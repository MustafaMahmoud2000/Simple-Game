
simple game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000344c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d6  00800060  0000344c  000034e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800336  00800336  000037b6  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000037b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00003e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  00003f10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000259e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d8  00000000  00000000  000065ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000113f  00000000  00000000  00006a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00007bc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000323  00000000  00000000  00007df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ada  00000000  00000000  0000811b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e4       	ldi	r30, 0x4C	; 76
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 34       	cpi	r26, 0x41	; 65
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 05 	call	0xa2e	; 0xa2e <main>
      8a:	0c 94 24 1a 	jmp	0x3448	; 0x3448 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vDIO_SET_BIT_DIR>:
#include "std_macros.h"
#include "DIO.h"

void vDIO_SET_BIT_DIR(unsigned char port,unsigned char pin,unsigned char dir)
{
	switch(port)
      92:	84 34       	cpi	r24, 0x44	; 68
      94:	09 f4       	brne	.+2      	; 0x98 <vDIO_SET_BIT_DIR+0x6>
      96:	71 c0       	rjmp	.+226    	; 0x17a <vDIO_SET_BIT_DIR+0xe8>
      98:	85 34       	cpi	r24, 0x45	; 69
      9a:	48 f4       	brcc	.+18     	; 0xae <vDIO_SET_BIT_DIR+0x1c>
      9c:	82 34       	cpi	r24, 0x42	; 66
      9e:	99 f1       	breq	.+102    	; 0x106 <vDIO_SET_BIT_DIR+0x74>
      a0:	83 34       	cpi	r24, 0x43	; 67
      a2:	08 f0       	brcs	.+2      	; 0xa6 <vDIO_SET_BIT_DIR+0x14>
      a4:	4d c0       	rjmp	.+154    	; 0x140 <vDIO_SET_BIT_DIR+0xae>
      a6:	81 34       	cpi	r24, 0x41	; 65
      a8:	09 f0       	breq	.+2      	; 0xac <vDIO_SET_BIT_DIR+0x1a>
      aa:	83 c0       	rjmp	.+262    	; 0x1b2 <vDIO_SET_BIT_DIR+0x120>
      ac:	0f c0       	rjmp	.+30     	; 0xcc <vDIO_SET_BIT_DIR+0x3a>
      ae:	82 36       	cpi	r24, 0x62	; 98
      b0:	51 f1       	breq	.+84     	; 0x106 <vDIO_SET_BIT_DIR+0x74>
      b2:	83 36       	cpi	r24, 0x63	; 99
      b4:	20 f4       	brcc	.+8      	; 0xbe <vDIO_SET_BIT_DIR+0x2c>
      b6:	81 36       	cpi	r24, 0x61	; 97
      b8:	09 f0       	breq	.+2      	; 0xbc <vDIO_SET_BIT_DIR+0x2a>
      ba:	7b c0       	rjmp	.+246    	; 0x1b2 <vDIO_SET_BIT_DIR+0x120>
      bc:	07 c0       	rjmp	.+14     	; 0xcc <vDIO_SET_BIT_DIR+0x3a>
      be:	83 36       	cpi	r24, 0x63	; 99
      c0:	09 f4       	brne	.+2      	; 0xc4 <vDIO_SET_BIT_DIR+0x32>
      c2:	3e c0       	rjmp	.+124    	; 0x140 <vDIO_SET_BIT_DIR+0xae>
      c4:	84 36       	cpi	r24, 0x64	; 100
      c6:	09 f0       	breq	.+2      	; 0xca <vDIO_SET_BIT_DIR+0x38>
      c8:	74 c0       	rjmp	.+232    	; 0x1b2 <vDIO_SET_BIT_DIR+0x120>
      ca:	57 c0       	rjmp	.+174    	; 0x17a <vDIO_SET_BIT_DIR+0xe8>
	{
		case'A':
		case'a':
		if(dir==1)
      cc:	41 30       	cpi	r20, 0x01	; 1
      ce:	69 f4       	brne	.+26     	; 0xea <vDIO_SET_BIT_DIR+0x58>
		{
			SET_BIT(DDRA,pin);
      d0:	2a b3       	in	r18, 0x1a	; 26
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	ac 01       	movw	r20, r24
      d8:	02 c0       	rjmp	.+4      	; 0xde <vDIO_SET_BIT_DIR+0x4c>
      da:	44 0f       	add	r20, r20
      dc:	55 1f       	adc	r21, r21
      de:	6a 95       	dec	r22
      e0:	e2 f7       	brpl	.-8      	; 0xda <vDIO_SET_BIT_DIR+0x48>
      e2:	ba 01       	movw	r22, r20
      e4:	62 2b       	or	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
      ea:	2a b3       	in	r18, 0x1a	; 26
      ec:	81 e0       	ldi	r24, 0x01	; 1
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	ac 01       	movw	r20, r24
      f2:	02 c0       	rjmp	.+4      	; 0xf8 <vDIO_SET_BIT_DIR+0x66>
      f4:	44 0f       	add	r20, r20
      f6:	55 1f       	adc	r21, r21
      f8:	6a 95       	dec	r22
      fa:	e2 f7       	brpl	.-8      	; 0xf4 <vDIO_SET_BIT_DIR+0x62>
      fc:	ba 01       	movw	r22, r20
      fe:	60 95       	com	r22
     100:	62 23       	and	r22, r18
     102:	6a bb       	out	0x1a, r22	; 26
     104:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(dir==1)
     106:	41 30       	cpi	r20, 0x01	; 1
     108:	69 f4       	brne	.+26     	; 0x124 <vDIO_SET_BIT_DIR+0x92>
		{
			SET_BIT(DDRB,pin);
     10a:	27 b3       	in	r18, 0x17	; 23
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	90 e0       	ldi	r25, 0x00	; 0
     110:	ac 01       	movw	r20, r24
     112:	02 c0       	rjmp	.+4      	; 0x118 <vDIO_SET_BIT_DIR+0x86>
     114:	44 0f       	add	r20, r20
     116:	55 1f       	adc	r21, r21
     118:	6a 95       	dec	r22
     11a:	e2 f7       	brpl	.-8      	; 0x114 <vDIO_SET_BIT_DIR+0x82>
     11c:	ba 01       	movw	r22, r20
     11e:	62 2b       	or	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     124:	27 b3       	in	r18, 0x17	; 23
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	ac 01       	movw	r20, r24
     12c:	02 c0       	rjmp	.+4      	; 0x132 <vDIO_SET_BIT_DIR+0xa0>
     12e:	44 0f       	add	r20, r20
     130:	55 1f       	adc	r21, r21
     132:	6a 95       	dec	r22
     134:	e2 f7       	brpl	.-8      	; 0x12e <vDIO_SET_BIT_DIR+0x9c>
     136:	ba 01       	movw	r22, r20
     138:	60 95       	com	r22
     13a:	62 23       	and	r22, r18
     13c:	67 bb       	out	0x17, r22	; 23
     13e:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(dir==1)
     140:	41 30       	cpi	r20, 0x01	; 1
     142:	69 f4       	brne	.+26     	; 0x15e <vDIO_SET_BIT_DIR+0xcc>
		{
			SET_BIT(DDRC,pin);
     144:	24 b3       	in	r18, 0x14	; 20
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	ac 01       	movw	r20, r24
     14c:	02 c0       	rjmp	.+4      	; 0x152 <vDIO_SET_BIT_DIR+0xc0>
     14e:	44 0f       	add	r20, r20
     150:	55 1f       	adc	r21, r21
     152:	6a 95       	dec	r22
     154:	e2 f7       	brpl	.-8      	; 0x14e <vDIO_SET_BIT_DIR+0xbc>
     156:	ba 01       	movw	r22, r20
     158:	62 2b       	or	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     15e:	24 b3       	in	r18, 0x14	; 20
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	90 e0       	ldi	r25, 0x00	; 0
     164:	ac 01       	movw	r20, r24
     166:	02 c0       	rjmp	.+4      	; 0x16c <vDIO_SET_BIT_DIR+0xda>
     168:	44 0f       	add	r20, r20
     16a:	55 1f       	adc	r21, r21
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <vDIO_SET_BIT_DIR+0xd6>
     170:	ba 01       	movw	r22, r20
     172:	60 95       	com	r22
     174:	62 23       	and	r22, r18
     176:	64 bb       	out	0x14, r22	; 20
     178:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(dir==1)
     17a:	41 30       	cpi	r20, 0x01	; 1
     17c:	69 f4       	brne	.+26     	; 0x198 <vDIO_SET_BIT_DIR+0x106>
		{
			SET_BIT(DDRD,pin);
     17e:	21 b3       	in	r18, 0x11	; 17
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	ac 01       	movw	r20, r24
     186:	02 c0       	rjmp	.+4      	; 0x18c <vDIO_SET_BIT_DIR+0xfa>
     188:	44 0f       	add	r20, r20
     18a:	55 1f       	adc	r21, r21
     18c:	6a 95       	dec	r22
     18e:	e2 f7       	brpl	.-8      	; 0x188 <vDIO_SET_BIT_DIR+0xf6>
     190:	ba 01       	movw	r22, r20
     192:	62 2b       	or	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
     198:	21 b3       	in	r18, 0x11	; 17
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	ac 01       	movw	r20, r24
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <vDIO_SET_BIT_DIR+0x114>
     1a2:	44 0f       	add	r20, r20
     1a4:	55 1f       	adc	r21, r21
     1a6:	6a 95       	dec	r22
     1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <vDIO_SET_BIT_DIR+0x110>
     1aa:	ba 01       	movw	r22, r20
     1ac:	60 95       	com	r22
     1ae:	62 23       	and	r22, r18
     1b0:	61 bb       	out	0x11, r22	; 17
     1b2:	08 95       	ret

000001b4 <vDIO_WRITE_BIT>:
		
	}
}
void vDIO_WRITE_BIT(unsigned char port,unsigned char pin,unsigned char val)
{
	switch(port)
     1b4:	84 34       	cpi	r24, 0x44	; 68
     1b6:	09 f4       	brne	.+2      	; 0x1ba <vDIO_WRITE_BIT+0x6>
     1b8:	71 c0       	rjmp	.+226    	; 0x29c <vDIO_WRITE_BIT+0xe8>
     1ba:	85 34       	cpi	r24, 0x45	; 69
     1bc:	48 f4       	brcc	.+18     	; 0x1d0 <vDIO_WRITE_BIT+0x1c>
     1be:	82 34       	cpi	r24, 0x42	; 66
     1c0:	99 f1       	breq	.+102    	; 0x228 <vDIO_WRITE_BIT+0x74>
     1c2:	83 34       	cpi	r24, 0x43	; 67
     1c4:	08 f0       	brcs	.+2      	; 0x1c8 <vDIO_WRITE_BIT+0x14>
     1c6:	4d c0       	rjmp	.+154    	; 0x262 <vDIO_WRITE_BIT+0xae>
     1c8:	81 34       	cpi	r24, 0x41	; 65
     1ca:	09 f0       	breq	.+2      	; 0x1ce <vDIO_WRITE_BIT+0x1a>
     1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <vDIO_WRITE_BIT+0x120>
     1ce:	0f c0       	rjmp	.+30     	; 0x1ee <vDIO_WRITE_BIT+0x3a>
     1d0:	82 36       	cpi	r24, 0x62	; 98
     1d2:	51 f1       	breq	.+84     	; 0x228 <vDIO_WRITE_BIT+0x74>
     1d4:	83 36       	cpi	r24, 0x63	; 99
     1d6:	20 f4       	brcc	.+8      	; 0x1e0 <vDIO_WRITE_BIT+0x2c>
     1d8:	81 36       	cpi	r24, 0x61	; 97
     1da:	09 f0       	breq	.+2      	; 0x1de <vDIO_WRITE_BIT+0x2a>
     1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <vDIO_WRITE_BIT+0x120>
     1de:	07 c0       	rjmp	.+14     	; 0x1ee <vDIO_WRITE_BIT+0x3a>
     1e0:	83 36       	cpi	r24, 0x63	; 99
     1e2:	09 f4       	brne	.+2      	; 0x1e6 <vDIO_WRITE_BIT+0x32>
     1e4:	3e c0       	rjmp	.+124    	; 0x262 <vDIO_WRITE_BIT+0xae>
     1e6:	84 36       	cpi	r24, 0x64	; 100
     1e8:	09 f0       	breq	.+2      	; 0x1ec <vDIO_WRITE_BIT+0x38>
     1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <vDIO_WRITE_BIT+0x120>
     1ec:	57 c0       	rjmp	.+174    	; 0x29c <vDIO_WRITE_BIT+0xe8>
  {
	case'A':
	case'a':
	if(val==1)
     1ee:	41 30       	cpi	r20, 0x01	; 1
     1f0:	69 f4       	brne	.+26     	; 0x20c <vDIO_WRITE_BIT+0x58>
	{
		SET_BIT(PORTA,pin);
     1f2:	2b b3       	in	r18, 0x1b	; 27
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	ac 01       	movw	r20, r24
     1fa:	02 c0       	rjmp	.+4      	; 0x200 <vDIO_WRITE_BIT+0x4c>
     1fc:	44 0f       	add	r20, r20
     1fe:	55 1f       	adc	r21, r21
     200:	6a 95       	dec	r22
     202:	e2 f7       	brpl	.-8      	; 0x1fc <vDIO_WRITE_BIT+0x48>
     204:	ba 01       	movw	r22, r20
     206:	62 2b       	or	r22, r18
     208:	6b bb       	out	0x1b, r22	; 27
     20a:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTA,pin);
     20c:	2b b3       	in	r18, 0x1b	; 27
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	ac 01       	movw	r20, r24
     214:	02 c0       	rjmp	.+4      	; 0x21a <vDIO_WRITE_BIT+0x66>
     216:	44 0f       	add	r20, r20
     218:	55 1f       	adc	r21, r21
     21a:	6a 95       	dec	r22
     21c:	e2 f7       	brpl	.-8      	; 0x216 <vDIO_WRITE_BIT+0x62>
     21e:	ba 01       	movw	r22, r20
     220:	60 95       	com	r22
     222:	62 23       	and	r22, r18
     224:	6b bb       	out	0x1b, r22	; 27
     226:	08 95       	ret
	}
	break;
	case'B':
	case'b':
	if(val==1)
     228:	41 30       	cpi	r20, 0x01	; 1
     22a:	69 f4       	brne	.+26     	; 0x246 <vDIO_WRITE_BIT+0x92>
	{
		SET_BIT(PORTB,pin);
     22c:	28 b3       	in	r18, 0x18	; 24
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	ac 01       	movw	r20, r24
     234:	02 c0       	rjmp	.+4      	; 0x23a <vDIO_WRITE_BIT+0x86>
     236:	44 0f       	add	r20, r20
     238:	55 1f       	adc	r21, r21
     23a:	6a 95       	dec	r22
     23c:	e2 f7       	brpl	.-8      	; 0x236 <vDIO_WRITE_BIT+0x82>
     23e:	ba 01       	movw	r22, r20
     240:	62 2b       	or	r22, r18
     242:	68 bb       	out	0x18, r22	; 24
     244:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTB,pin);
     246:	28 b3       	in	r18, 0x18	; 24
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	ac 01       	movw	r20, r24
     24e:	02 c0       	rjmp	.+4      	; 0x254 <vDIO_WRITE_BIT+0xa0>
     250:	44 0f       	add	r20, r20
     252:	55 1f       	adc	r21, r21
     254:	6a 95       	dec	r22
     256:	e2 f7       	brpl	.-8      	; 0x250 <vDIO_WRITE_BIT+0x9c>
     258:	ba 01       	movw	r22, r20
     25a:	60 95       	com	r22
     25c:	62 23       	and	r22, r18
     25e:	68 bb       	out	0x18, r22	; 24
     260:	08 95       	ret
	}
	break;
	case'C':
	case'c':
	if(val==1)
     262:	41 30       	cpi	r20, 0x01	; 1
     264:	69 f4       	brne	.+26     	; 0x280 <vDIO_WRITE_BIT+0xcc>
	{
		SET_BIT(PORTC,pin);
     266:	25 b3       	in	r18, 0x15	; 21
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	ac 01       	movw	r20, r24
     26e:	02 c0       	rjmp	.+4      	; 0x274 <vDIO_WRITE_BIT+0xc0>
     270:	44 0f       	add	r20, r20
     272:	55 1f       	adc	r21, r21
     274:	6a 95       	dec	r22
     276:	e2 f7       	brpl	.-8      	; 0x270 <vDIO_WRITE_BIT+0xbc>
     278:	ba 01       	movw	r22, r20
     27a:	62 2b       	or	r22, r18
     27c:	65 bb       	out	0x15, r22	; 21
     27e:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTC,pin);
     280:	25 b3       	in	r18, 0x15	; 21
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	ac 01       	movw	r20, r24
     288:	02 c0       	rjmp	.+4      	; 0x28e <vDIO_WRITE_BIT+0xda>
     28a:	44 0f       	add	r20, r20
     28c:	55 1f       	adc	r21, r21
     28e:	6a 95       	dec	r22
     290:	e2 f7       	brpl	.-8      	; 0x28a <vDIO_WRITE_BIT+0xd6>
     292:	ba 01       	movw	r22, r20
     294:	60 95       	com	r22
     296:	62 23       	and	r22, r18
     298:	65 bb       	out	0x15, r22	; 21
     29a:	08 95       	ret
	}
	break;
	case'D':
	case'd':
	if(val==1)
     29c:	41 30       	cpi	r20, 0x01	; 1
     29e:	69 f4       	brne	.+26     	; 0x2ba <vDIO_WRITE_BIT+0x106>
	{
		SET_BIT(PORTD,pin);
     2a0:	22 b3       	in	r18, 0x12	; 18
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	ac 01       	movw	r20, r24
     2a8:	02 c0       	rjmp	.+4      	; 0x2ae <vDIO_WRITE_BIT+0xfa>
     2aa:	44 0f       	add	r20, r20
     2ac:	55 1f       	adc	r21, r21
     2ae:	6a 95       	dec	r22
     2b0:	e2 f7       	brpl	.-8      	; 0x2aa <vDIO_WRITE_BIT+0xf6>
     2b2:	ba 01       	movw	r22, r20
     2b4:	62 2b       	or	r22, r18
     2b6:	62 bb       	out	0x12, r22	; 18
     2b8:	08 95       	ret
	}
	else
	{
		CLEAR_BIT(PORTD,pin);
     2ba:	22 b3       	in	r18, 0x12	; 18
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	ac 01       	movw	r20, r24
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <vDIO_WRITE_BIT+0x114>
     2c4:	44 0f       	add	r20, r20
     2c6:	55 1f       	adc	r21, r21
     2c8:	6a 95       	dec	r22
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <vDIO_WRITE_BIT+0x110>
     2cc:	ba 01       	movw	r22, r20
     2ce:	60 95       	com	r22
     2d0:	62 23       	and	r22, r18
     2d2:	62 bb       	out	0x12, r22	; 18
     2d4:	08 95       	ret

000002d6 <vDIO_TOGGLE_BIT>:
	
  }
}
void vDIO_TOGGLE_BIT(unsigned char port,unsigned char pin)
{
switch(port)
     2d6:	84 34       	cpi	r24, 0x44	; 68
     2d8:	09 f4       	brne	.+2      	; 0x2dc <vDIO_TOGGLE_BIT+0x6>
     2da:	3d c0       	rjmp	.+122    	; 0x356 <vDIO_TOGGLE_BIT+0x80>
     2dc:	85 34       	cpi	r24, 0x45	; 69
     2de:	40 f4       	brcc	.+16     	; 0x2f0 <vDIO_TOGGLE_BIT+0x1a>
     2e0:	82 34       	cpi	r24, 0x42	; 66
     2e2:	f9 f0       	breq	.+62     	; 0x322 <vDIO_TOGGLE_BIT+0x4c>
     2e4:	83 34       	cpi	r24, 0x43	; 67
     2e6:	50 f5       	brcc	.+84     	; 0x33c <vDIO_TOGGLE_BIT+0x66>
     2e8:	81 34       	cpi	r24, 0x41	; 65
     2ea:	09 f0       	breq	.+2      	; 0x2ee <vDIO_TOGGLE_BIT+0x18>
     2ec:	40 c0       	rjmp	.+128    	; 0x36e <vDIO_TOGGLE_BIT+0x98>
     2ee:	0c c0       	rjmp	.+24     	; 0x308 <vDIO_TOGGLE_BIT+0x32>
     2f0:	82 36       	cpi	r24, 0x62	; 98
     2f2:	b9 f0       	breq	.+46     	; 0x322 <vDIO_TOGGLE_BIT+0x4c>
     2f4:	83 36       	cpi	r24, 0x63	; 99
     2f6:	18 f4       	brcc	.+6      	; 0x2fe <vDIO_TOGGLE_BIT+0x28>
     2f8:	81 36       	cpi	r24, 0x61	; 97
     2fa:	c9 f5       	brne	.+114    	; 0x36e <vDIO_TOGGLE_BIT+0x98>
     2fc:	05 c0       	rjmp	.+10     	; 0x308 <vDIO_TOGGLE_BIT+0x32>
     2fe:	83 36       	cpi	r24, 0x63	; 99
     300:	e9 f0       	breq	.+58     	; 0x33c <vDIO_TOGGLE_BIT+0x66>
     302:	84 36       	cpi	r24, 0x64	; 100
     304:	a1 f5       	brne	.+104    	; 0x36e <vDIO_TOGGLE_BIT+0x98>
     306:	27 c0       	rjmp	.+78     	; 0x356 <vDIO_TOGGLE_BIT+0x80>
{
	case'A':
	case'a':
	TOGGAL_BIT(PORTA,pin);
     308:	2b b3       	in	r18, 0x1b	; 27
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	ac 01       	movw	r20, r24
     310:	02 c0       	rjmp	.+4      	; 0x316 <vDIO_TOGGLE_BIT+0x40>
     312:	44 0f       	add	r20, r20
     314:	55 1f       	adc	r21, r21
     316:	6a 95       	dec	r22
     318:	e2 f7       	brpl	.-8      	; 0x312 <vDIO_TOGGLE_BIT+0x3c>
     31a:	ba 01       	movw	r22, r20
     31c:	62 27       	eor	r22, r18
     31e:	6b bb       	out	0x1b, r22	; 27
	break;
     320:	08 95       	ret
	case'B':
	case'b':
	TOGGAL_BIT(PORTB,pin);
     322:	28 b3       	in	r18, 0x18	; 24
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	ac 01       	movw	r20, r24
     32a:	02 c0       	rjmp	.+4      	; 0x330 <vDIO_TOGGLE_BIT+0x5a>
     32c:	44 0f       	add	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	6a 95       	dec	r22
     332:	e2 f7       	brpl	.-8      	; 0x32c <vDIO_TOGGLE_BIT+0x56>
     334:	ba 01       	movw	r22, r20
     336:	62 27       	eor	r22, r18
     338:	68 bb       	out	0x18, r22	; 24
	break;
     33a:	08 95       	ret
	case'C':
	case'c':
	TOGGAL_BIT(PORTC,pin);
     33c:	25 b3       	in	r18, 0x15	; 21
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	ac 01       	movw	r20, r24
     344:	02 c0       	rjmp	.+4      	; 0x34a <vDIO_TOGGLE_BIT+0x74>
     346:	44 0f       	add	r20, r20
     348:	55 1f       	adc	r21, r21
     34a:	6a 95       	dec	r22
     34c:	e2 f7       	brpl	.-8      	; 0x346 <vDIO_TOGGLE_BIT+0x70>
     34e:	ba 01       	movw	r22, r20
     350:	62 27       	eor	r22, r18
     352:	65 bb       	out	0x15, r22	; 21
	break;
     354:	08 95       	ret
	case'D':
	case'd':
	TOGGAL_BIT(PORTD,pin);
     356:	22 b3       	in	r18, 0x12	; 18
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	ac 01       	movw	r20, r24
     35e:	02 c0       	rjmp	.+4      	; 0x364 <vDIO_TOGGLE_BIT+0x8e>
     360:	44 0f       	add	r20, r20
     362:	55 1f       	adc	r21, r21
     364:	6a 95       	dec	r22
     366:	e2 f7       	brpl	.-8      	; 0x360 <vDIO_TOGGLE_BIT+0x8a>
     368:	ba 01       	movw	r22, r20
     36a:	62 27       	eor	r22, r18
     36c:	62 bb       	out	0x12, r22	; 18
     36e:	08 95       	ret

00000370 <u8DIO_READ_BIT>:
}		
}
unsigned char u8DIO_READ_BIT(unsigned char port, unsigned char pin)
{

	switch(port)
     370:	84 34       	cpi	r24, 0x44	; 68
     372:	09 f4       	brne	.+2      	; 0x376 <u8DIO_READ_BIT+0x6>
     374:	4e c0       	rjmp	.+156    	; 0x412 <u8DIO_READ_BIT+0xa2>
     376:	85 34       	cpi	r24, 0x45	; 69
     378:	40 f4       	brcc	.+16     	; 0x38a <u8DIO_READ_BIT+0x1a>
     37a:	82 34       	cpi	r24, 0x42	; 66
     37c:	31 f1       	breq	.+76     	; 0x3ca <u8DIO_READ_BIT+0x5a>
     37e:	83 34       	cpi	r24, 0x43	; 67
     380:	b0 f5       	brcc	.+108    	; 0x3ee <u8DIO_READ_BIT+0x7e>
     382:	81 34       	cpi	r24, 0x41	; 65
     384:	09 f0       	breq	.+2      	; 0x388 <u8DIO_READ_BIT+0x18>
     386:	57 c0       	rjmp	.+174    	; 0x436 <u8DIO_READ_BIT+0xc6>
     388:	0e c0       	rjmp	.+28     	; 0x3a6 <u8DIO_READ_BIT+0x36>
     38a:	82 36       	cpi	r24, 0x62	; 98
     38c:	f1 f0       	breq	.+60     	; 0x3ca <u8DIO_READ_BIT+0x5a>
     38e:	83 36       	cpi	r24, 0x63	; 99
     390:	20 f4       	brcc	.+8      	; 0x39a <u8DIO_READ_BIT+0x2a>
     392:	81 36       	cpi	r24, 0x61	; 97
     394:	09 f0       	breq	.+2      	; 0x398 <u8DIO_READ_BIT+0x28>
     396:	4f c0       	rjmp	.+158    	; 0x436 <u8DIO_READ_BIT+0xc6>
     398:	06 c0       	rjmp	.+12     	; 0x3a6 <u8DIO_READ_BIT+0x36>
     39a:	83 36       	cpi	r24, 0x63	; 99
     39c:	41 f1       	breq	.+80     	; 0x3ee <u8DIO_READ_BIT+0x7e>
     39e:	84 36       	cpi	r24, 0x64	; 100
     3a0:	09 f0       	breq	.+2      	; 0x3a4 <u8DIO_READ_BIT+0x34>
     3a2:	49 c0       	rjmp	.+146    	; 0x436 <u8DIO_READ_BIT+0xc6>
     3a4:	36 c0       	rjmp	.+108    	; 0x412 <u8DIO_READ_BIT+0xa2>
	{
		case'A':
		case'a':
		return READ_BIT(PINA,pin);
     3a6:	29 b3       	in	r18, 0x19	; 25
     3a8:	81 e0       	ldi	r24, 0x01	; 1
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	06 2e       	mov	r0, r22
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <u8DIO_READ_BIT+0x44>
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	0a 94       	dec	r0
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <u8DIO_READ_BIT+0x40>
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	82 23       	and	r24, r18
     3bc:	93 23       	and	r25, r19
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <u8DIO_READ_BIT+0x54>
     3c0:	95 95       	asr	r25
     3c2:	87 95       	ror	r24
     3c4:	6a 95       	dec	r22
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <u8DIO_READ_BIT+0x50>
     3c8:	08 95       	ret
		break;
		case'B':
		case'b':
		return READ_BIT(PINB,pin);
     3ca:	26 b3       	in	r18, 0x16	; 22
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	06 2e       	mov	r0, r22
     3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <u8DIO_READ_BIT+0x68>
     3d4:	88 0f       	add	r24, r24
     3d6:	99 1f       	adc	r25, r25
     3d8:	0a 94       	dec	r0
     3da:	e2 f7       	brpl	.-8      	; 0x3d4 <u8DIO_READ_BIT+0x64>
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	82 23       	and	r24, r18
     3e0:	93 23       	and	r25, r19
     3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <u8DIO_READ_BIT+0x78>
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	6a 95       	dec	r22
     3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <u8DIO_READ_BIT+0x74>
     3ec:	08 95       	ret
		break;
		case'C':
		case'c':
		return READ_BIT(PINC,pin);
     3ee:	23 b3       	in	r18, 0x13	; 19
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	06 2e       	mov	r0, r22
     3f6:	02 c0       	rjmp	.+4      	; 0x3fc <u8DIO_READ_BIT+0x8c>
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	0a 94       	dec	r0
     3fe:	e2 f7       	brpl	.-8      	; 0x3f8 <u8DIO_READ_BIT+0x88>
     400:	30 e0       	ldi	r19, 0x00	; 0
     402:	82 23       	and	r24, r18
     404:	93 23       	and	r25, r19
     406:	02 c0       	rjmp	.+4      	; 0x40c <u8DIO_READ_BIT+0x9c>
     408:	95 95       	asr	r25
     40a:	87 95       	ror	r24
     40c:	6a 95       	dec	r22
     40e:	e2 f7       	brpl	.-8      	; 0x408 <u8DIO_READ_BIT+0x98>
     410:	08 95       	ret
		break;
		case'D':
		case'd':
		return READ_BIT(PIND,pin);
     412:	20 b3       	in	r18, 0x10	; 16
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	06 2e       	mov	r0, r22
     41a:	02 c0       	rjmp	.+4      	; 0x420 <u8DIO_READ_BIT+0xb0>
     41c:	88 0f       	add	r24, r24
     41e:	99 1f       	adc	r25, r25
     420:	0a 94       	dec	r0
     422:	e2 f7       	brpl	.-8      	; 0x41c <u8DIO_READ_BIT+0xac>
     424:	30 e0       	ldi	r19, 0x00	; 0
     426:	82 23       	and	r24, r18
     428:	93 23       	and	r25, r19
     42a:	02 c0       	rjmp	.+4      	; 0x430 <u8DIO_READ_BIT+0xc0>
     42c:	95 95       	asr	r25
     42e:	87 95       	ror	r24
     430:	6a 95       	dec	r22
     432:	e2 f7       	brpl	.-8      	; 0x42c <u8DIO_READ_BIT+0xbc>
     434:	08 95       	ret
		break;
		default:
		break;
   }
}
     436:	08 95       	ret

00000438 <vDIO_SET_PORT>:
void vDIO_SET_PORT( unsigned char port,unsigned char dir)
{
	switch(port)
     438:	84 34       	cpi	r24, 0x44	; 68
     43a:	d9 f0       	breq	.+54     	; 0x472 <vDIO_SET_PORT+0x3a>
     43c:	85 34       	cpi	r24, 0x45	; 69
     43e:	38 f4       	brcc	.+14     	; 0x44e <vDIO_SET_PORT+0x16>
     440:	82 34       	cpi	r24, 0x42	; 66
     442:	99 f0       	breq	.+38     	; 0x46a <vDIO_SET_PORT+0x32>
     444:	83 34       	cpi	r24, 0x43	; 67
     446:	98 f4       	brcc	.+38     	; 0x46e <vDIO_SET_PORT+0x36>
     448:	81 34       	cpi	r24, 0x41	; 65
     44a:	a1 f4       	brne	.+40     	; 0x474 <vDIO_SET_PORT+0x3c>
     44c:	0c c0       	rjmp	.+24     	; 0x466 <vDIO_SET_PORT+0x2e>
     44e:	82 36       	cpi	r24, 0x62	; 98
     450:	61 f0       	breq	.+24     	; 0x46a <vDIO_SET_PORT+0x32>
     452:	83 36       	cpi	r24, 0x63	; 99
     454:	18 f4       	brcc	.+6      	; 0x45c <vDIO_SET_PORT+0x24>
     456:	81 36       	cpi	r24, 0x61	; 97
     458:	69 f4       	brne	.+26     	; 0x474 <vDIO_SET_PORT+0x3c>
     45a:	05 c0       	rjmp	.+10     	; 0x466 <vDIO_SET_PORT+0x2e>
     45c:	83 36       	cpi	r24, 0x63	; 99
     45e:	39 f0       	breq	.+14     	; 0x46e <vDIO_SET_PORT+0x36>
     460:	84 36       	cpi	r24, 0x64	; 100
     462:	41 f4       	brne	.+16     	; 0x474 <vDIO_SET_PORT+0x3c>
     464:	06 c0       	rjmp	.+12     	; 0x472 <vDIO_SET_PORT+0x3a>
	{
		case 'A':
		case 'a':
		DDRA=dir;
     466:	6a bb       	out	0x1a, r22	; 26
		break;
     468:	08 95       	ret
		case 'B':
		case 'b':
		DDRB=dir;
     46a:	67 bb       	out	0x17, r22	; 23
		break;
     46c:	08 95       	ret
		case 'C':
		case 'c':
		DDRC=dir;
     46e:	64 bb       	out	0x14, r22	; 20
		break;
     470:	08 95       	ret
		case 'D':
		case 'd':
		DDRD=dir;
     472:	61 bb       	out	0x11, r22	; 17
     474:	08 95       	ret

00000476 <vDIO_WRITE_PORT>:
		break;
	}
}
void vDIO_WRITE_PORT(unsigned char port,unsigned char val)
{
	switch(port)
     476:	84 34       	cpi	r24, 0x44	; 68
     478:	d9 f0       	breq	.+54     	; 0x4b0 <vDIO_WRITE_PORT+0x3a>
     47a:	85 34       	cpi	r24, 0x45	; 69
     47c:	38 f4       	brcc	.+14     	; 0x48c <vDIO_WRITE_PORT+0x16>
     47e:	82 34       	cpi	r24, 0x42	; 66
     480:	99 f0       	breq	.+38     	; 0x4a8 <vDIO_WRITE_PORT+0x32>
     482:	83 34       	cpi	r24, 0x43	; 67
     484:	98 f4       	brcc	.+38     	; 0x4ac <vDIO_WRITE_PORT+0x36>
     486:	81 34       	cpi	r24, 0x41	; 65
     488:	a1 f4       	brne	.+40     	; 0x4b2 <vDIO_WRITE_PORT+0x3c>
     48a:	0c c0       	rjmp	.+24     	; 0x4a4 <vDIO_WRITE_PORT+0x2e>
     48c:	82 36       	cpi	r24, 0x62	; 98
     48e:	61 f0       	breq	.+24     	; 0x4a8 <vDIO_WRITE_PORT+0x32>
     490:	83 36       	cpi	r24, 0x63	; 99
     492:	18 f4       	brcc	.+6      	; 0x49a <vDIO_WRITE_PORT+0x24>
     494:	81 36       	cpi	r24, 0x61	; 97
     496:	69 f4       	brne	.+26     	; 0x4b2 <vDIO_WRITE_PORT+0x3c>
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <vDIO_WRITE_PORT+0x2e>
     49a:	83 36       	cpi	r24, 0x63	; 99
     49c:	39 f0       	breq	.+14     	; 0x4ac <vDIO_WRITE_PORT+0x36>
     49e:	84 36       	cpi	r24, 0x64	; 100
     4a0:	41 f4       	brne	.+16     	; 0x4b2 <vDIO_WRITE_PORT+0x3c>
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <vDIO_WRITE_PORT+0x3a>
	{
		case 'A':
		case 'a':
		PORTA=val;
     4a4:	6b bb       	out	0x1b, r22	; 27
		break;
     4a6:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=val;
     4a8:	68 bb       	out	0x18, r22	; 24
		break;
     4aa:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=val;
     4ac:	65 bb       	out	0x15, r22	; 21
		break;
     4ae:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=val;
     4b0:	62 bb       	out	0x12, r22	; 18
     4b2:	08 95       	ret

000004b4 <u8DIO_READ_PORT>:
	}
}
unsigned char u8DIO_READ_PORT(unsigned char port)
{
	unsigned char ret_val;
	switch(port)
     4b4:	84 34       	cpi	r24, 0x44	; 68
     4b6:	d9 f0       	breq	.+54     	; 0x4ee <u8DIO_READ_PORT+0x3a>
     4b8:	85 34       	cpi	r24, 0x45	; 69
     4ba:	38 f4       	brcc	.+14     	; 0x4ca <u8DIO_READ_PORT+0x16>
     4bc:	82 34       	cpi	r24, 0x42	; 66
     4be:	99 f0       	breq	.+38     	; 0x4e6 <u8DIO_READ_PORT+0x32>
     4c0:	83 34       	cpi	r24, 0x43	; 67
     4c2:	98 f4       	brcc	.+38     	; 0x4ea <u8DIO_READ_PORT+0x36>
     4c4:	81 34       	cpi	r24, 0x41	; 65
     4c6:	a1 f4       	brne	.+40     	; 0x4f0 <u8DIO_READ_PORT+0x3c>
     4c8:	0c c0       	rjmp	.+24     	; 0x4e2 <u8DIO_READ_PORT+0x2e>
     4ca:	82 36       	cpi	r24, 0x62	; 98
     4cc:	61 f0       	breq	.+24     	; 0x4e6 <u8DIO_READ_PORT+0x32>
     4ce:	83 36       	cpi	r24, 0x63	; 99
     4d0:	18 f4       	brcc	.+6      	; 0x4d8 <u8DIO_READ_PORT+0x24>
     4d2:	81 36       	cpi	r24, 0x61	; 97
     4d4:	69 f4       	brne	.+26     	; 0x4f0 <u8DIO_READ_PORT+0x3c>
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <u8DIO_READ_PORT+0x2e>
     4d8:	83 36       	cpi	r24, 0x63	; 99
     4da:	39 f0       	breq	.+14     	; 0x4ea <u8DIO_READ_PORT+0x36>
     4dc:	84 36       	cpi	r24, 0x64	; 100
     4de:	41 f4       	brne	.+16     	; 0x4f0 <u8DIO_READ_PORT+0x3c>
     4e0:	06 c0       	rjmp	.+12     	; 0x4ee <u8DIO_READ_PORT+0x3a>
	{
		case 'A':
		case 'a':
		ret_val=PINA;
     4e2:	89 b3       	in	r24, 0x19	; 25
		break;
     4e4:	08 95       	ret
		case 'B':
		case 'b':
		ret_val=PINB;
     4e6:	86 b3       	in	r24, 0x16	; 22
		break;
     4e8:	08 95       	ret
		case 'C':
		case 'c':
		ret_val=PINC;
     4ea:	83 b3       	in	r24, 0x13	; 19
		break;
     4ec:	08 95       	ret
		case 'D':
		case 'd':
		ret_val=PIND;
     4ee:	80 b3       	in	r24, 0x10	; 16
		break;
		default:
		break;	
		
	}
}
     4f0:	08 95       	ret

000004f2 <vDIO_TOGGLE_PORT>:
void vDIO_TOGGLE_PORT(unsigned char port)
{
	switch(port)
     4f2:	84 34       	cpi	r24, 0x44	; 68
     4f4:	09 f1       	breq	.+66     	; 0x538 <vDIO_TOGGLE_PORT+0x46>
     4f6:	85 34       	cpi	r24, 0x45	; 69
     4f8:	38 f4       	brcc	.+14     	; 0x508 <vDIO_TOGGLE_PORT+0x16>
     4fa:	82 34       	cpi	r24, 0x42	; 66
     4fc:	a9 f0       	breq	.+42     	; 0x528 <vDIO_TOGGLE_PORT+0x36>
     4fe:	83 34       	cpi	r24, 0x43	; 67
     500:	b8 f4       	brcc	.+46     	; 0x530 <vDIO_TOGGLE_PORT+0x3e>
     502:	81 34       	cpi	r24, 0x41	; 65
     504:	e1 f4       	brne	.+56     	; 0x53e <vDIO_TOGGLE_PORT+0x4c>
     506:	0c c0       	rjmp	.+24     	; 0x520 <vDIO_TOGGLE_PORT+0x2e>
     508:	82 36       	cpi	r24, 0x62	; 98
     50a:	71 f0       	breq	.+28     	; 0x528 <vDIO_TOGGLE_PORT+0x36>
     50c:	83 36       	cpi	r24, 0x63	; 99
     50e:	18 f4       	brcc	.+6      	; 0x516 <vDIO_TOGGLE_PORT+0x24>
     510:	81 36       	cpi	r24, 0x61	; 97
     512:	a9 f4       	brne	.+42     	; 0x53e <vDIO_TOGGLE_PORT+0x4c>
     514:	05 c0       	rjmp	.+10     	; 0x520 <vDIO_TOGGLE_PORT+0x2e>
     516:	83 36       	cpi	r24, 0x63	; 99
     518:	59 f0       	breq	.+22     	; 0x530 <vDIO_TOGGLE_PORT+0x3e>
     51a:	84 36       	cpi	r24, 0x64	; 100
     51c:	81 f4       	brne	.+32     	; 0x53e <vDIO_TOGGLE_PORT+0x4c>
     51e:	0c c0       	rjmp	.+24     	; 0x538 <vDIO_TOGGLE_PORT+0x46>
	{
		case 'A':
		case 'a':
		PORTA=~PORTA;
     520:	8b b3       	in	r24, 0x1b	; 27
     522:	80 95       	com	r24
     524:	8b bb       	out	0x1b, r24	; 27
		break;
     526:	08 95       	ret
		case 'B':
		case 'b':
		PORTB=~PORTB;
     528:	88 b3       	in	r24, 0x18	; 24
     52a:	80 95       	com	r24
     52c:	88 bb       	out	0x18, r24	; 24
		break;
     52e:	08 95       	ret
		case 'C':
		case 'c':
		PORTC=~PORTC;
     530:	85 b3       	in	r24, 0x15	; 21
     532:	80 95       	com	r24
     534:	85 bb       	out	0x15, r24	; 21
		break;
     536:	08 95       	ret
		case 'D':
		case 'd':
		PORTD=~PORTD;
     538:	82 b3       	in	r24, 0x12	; 18
     53a:	80 95       	com	r24
     53c:	82 bb       	out	0x12, r24	; 18
     53e:	08 95       	ret

00000540 <vDIO_PULLUP_CONNECT>:
		break;
	}
}
void vDIO_PULLUP_CONNECT(unsigned char port,unsigned char pin,unsigned char connect)
{
	switch(port)
     540:	84 34       	cpi	r24, 0x44	; 68
     542:	09 f4       	brne	.+2      	; 0x546 <vDIO_PULLUP_CONNECT+0x6>
     544:	71 c0       	rjmp	.+226    	; 0x628 <vDIO_PULLUP_CONNECT+0xe8>
     546:	85 34       	cpi	r24, 0x45	; 69
     548:	48 f4       	brcc	.+18     	; 0x55c <vDIO_PULLUP_CONNECT+0x1c>
     54a:	82 34       	cpi	r24, 0x42	; 66
     54c:	99 f1       	breq	.+102    	; 0x5b4 <vDIO_PULLUP_CONNECT+0x74>
     54e:	83 34       	cpi	r24, 0x43	; 67
     550:	08 f0       	brcs	.+2      	; 0x554 <vDIO_PULLUP_CONNECT+0x14>
     552:	4d c0       	rjmp	.+154    	; 0x5ee <vDIO_PULLUP_CONNECT+0xae>
     554:	81 34       	cpi	r24, 0x41	; 65
     556:	09 f0       	breq	.+2      	; 0x55a <vDIO_PULLUP_CONNECT+0x1a>
     558:	83 c0       	rjmp	.+262    	; 0x660 <vDIO_PULLUP_CONNECT+0x120>
     55a:	0f c0       	rjmp	.+30     	; 0x57a <vDIO_PULLUP_CONNECT+0x3a>
     55c:	82 36       	cpi	r24, 0x62	; 98
     55e:	51 f1       	breq	.+84     	; 0x5b4 <vDIO_PULLUP_CONNECT+0x74>
     560:	83 36       	cpi	r24, 0x63	; 99
     562:	20 f4       	brcc	.+8      	; 0x56c <vDIO_PULLUP_CONNECT+0x2c>
     564:	81 36       	cpi	r24, 0x61	; 97
     566:	09 f0       	breq	.+2      	; 0x56a <vDIO_PULLUP_CONNECT+0x2a>
     568:	7b c0       	rjmp	.+246    	; 0x660 <vDIO_PULLUP_CONNECT+0x120>
     56a:	07 c0       	rjmp	.+14     	; 0x57a <vDIO_PULLUP_CONNECT+0x3a>
     56c:	83 36       	cpi	r24, 0x63	; 99
     56e:	09 f4       	brne	.+2      	; 0x572 <vDIO_PULLUP_CONNECT+0x32>
     570:	3e c0       	rjmp	.+124    	; 0x5ee <vDIO_PULLUP_CONNECT+0xae>
     572:	84 36       	cpi	r24, 0x64	; 100
     574:	09 f0       	breq	.+2      	; 0x578 <vDIO_PULLUP_CONNECT+0x38>
     576:	74 c0       	rjmp	.+232    	; 0x660 <vDIO_PULLUP_CONNECT+0x120>
     578:	57 c0       	rjmp	.+174    	; 0x628 <vDIO_PULLUP_CONNECT+0xe8>
	{
		case'A':
		case'a':
		if(connect==1)
     57a:	41 30       	cpi	r20, 0x01	; 1
     57c:	69 f4       	brne	.+26     	; 0x598 <vDIO_PULLUP_CONNECT+0x58>
		{
			SET_BIT(PORTA,pin);
     57e:	2b b3       	in	r18, 0x1b	; 27
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	ac 01       	movw	r20, r24
     586:	02 c0       	rjmp	.+4      	; 0x58c <vDIO_PULLUP_CONNECT+0x4c>
     588:	44 0f       	add	r20, r20
     58a:	55 1f       	adc	r21, r21
     58c:	6a 95       	dec	r22
     58e:	e2 f7       	brpl	.-8      	; 0x588 <vDIO_PULLUP_CONNECT+0x48>
     590:	ba 01       	movw	r22, r20
     592:	62 2b       	or	r22, r18
     594:	6b bb       	out	0x1b, r22	; 27
     596:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
     598:	2b b3       	in	r18, 0x1b	; 27
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	ac 01       	movw	r20, r24
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <vDIO_PULLUP_CONNECT+0x66>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	6a 95       	dec	r22
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <vDIO_PULLUP_CONNECT+0x62>
     5aa:	ba 01       	movw	r22, r20
     5ac:	60 95       	com	r22
     5ae:	62 23       	and	r22, r18
     5b0:	6b bb       	out	0x1b, r22	; 27
     5b2:	08 95       	ret
		}
		break;
		case'B':
		case'b':
		if(connect==1)
     5b4:	41 30       	cpi	r20, 0x01	; 1
     5b6:	69 f4       	brne	.+26     	; 0x5d2 <vDIO_PULLUP_CONNECT+0x92>
		{
			SET_BIT(PORTB,pin);
     5b8:	28 b3       	in	r18, 0x18	; 24
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	ac 01       	movw	r20, r24
     5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <vDIO_PULLUP_CONNECT+0x86>
     5c2:	44 0f       	add	r20, r20
     5c4:	55 1f       	adc	r21, r21
     5c6:	6a 95       	dec	r22
     5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <vDIO_PULLUP_CONNECT+0x82>
     5ca:	ba 01       	movw	r22, r20
     5cc:	62 2b       	or	r22, r18
     5ce:	68 bb       	out	0x18, r22	; 24
     5d0:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
     5d2:	28 b3       	in	r18, 0x18	; 24
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	ac 01       	movw	r20, r24
     5da:	02 c0       	rjmp	.+4      	; 0x5e0 <vDIO_PULLUP_CONNECT+0xa0>
     5dc:	44 0f       	add	r20, r20
     5de:	55 1f       	adc	r21, r21
     5e0:	6a 95       	dec	r22
     5e2:	e2 f7       	brpl	.-8      	; 0x5dc <vDIO_PULLUP_CONNECT+0x9c>
     5e4:	ba 01       	movw	r22, r20
     5e6:	60 95       	com	r22
     5e8:	62 23       	and	r22, r18
     5ea:	68 bb       	out	0x18, r22	; 24
     5ec:	08 95       	ret
		}
		break;
		case'C':
		case'c':
		if(connect==1)
     5ee:	41 30       	cpi	r20, 0x01	; 1
     5f0:	69 f4       	brne	.+26     	; 0x60c <vDIO_PULLUP_CONNECT+0xcc>
		{
			SET_BIT(PORTC,pin);
     5f2:	25 b3       	in	r18, 0x15	; 21
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	ac 01       	movw	r20, r24
     5fa:	02 c0       	rjmp	.+4      	; 0x600 <vDIO_PULLUP_CONNECT+0xc0>
     5fc:	44 0f       	add	r20, r20
     5fe:	55 1f       	adc	r21, r21
     600:	6a 95       	dec	r22
     602:	e2 f7       	brpl	.-8      	; 0x5fc <vDIO_PULLUP_CONNECT+0xbc>
     604:	ba 01       	movw	r22, r20
     606:	62 2b       	or	r22, r18
     608:	65 bb       	out	0x15, r22	; 21
     60a:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
     60c:	25 b3       	in	r18, 0x15	; 21
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	ac 01       	movw	r20, r24
     614:	02 c0       	rjmp	.+4      	; 0x61a <vDIO_PULLUP_CONNECT+0xda>
     616:	44 0f       	add	r20, r20
     618:	55 1f       	adc	r21, r21
     61a:	6a 95       	dec	r22
     61c:	e2 f7       	brpl	.-8      	; 0x616 <vDIO_PULLUP_CONNECT+0xd6>
     61e:	ba 01       	movw	r22, r20
     620:	60 95       	com	r22
     622:	62 23       	and	r22, r18
     624:	65 bb       	out	0x15, r22	; 21
     626:	08 95       	ret
		}
		break;
		case'D':
		case'd':
		if(connect==1)
     628:	41 30       	cpi	r20, 0x01	; 1
     62a:	69 f4       	brne	.+26     	; 0x646 <vDIO_PULLUP_CONNECT+0x106>
		{
			SET_BIT(PORTD,pin);
     62c:	22 b3       	in	r18, 0x12	; 18
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	ac 01       	movw	r20, r24
     634:	02 c0       	rjmp	.+4      	; 0x63a <vDIO_PULLUP_CONNECT+0xfa>
     636:	44 0f       	add	r20, r20
     638:	55 1f       	adc	r21, r21
     63a:	6a 95       	dec	r22
     63c:	e2 f7       	brpl	.-8      	; 0x636 <vDIO_PULLUP_CONNECT+0xf6>
     63e:	ba 01       	movw	r22, r20
     640:	62 2b       	or	r22, r18
     642:	62 bb       	out	0x12, r22	; 18
     644:	08 95       	ret
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
     646:	22 b3       	in	r18, 0x12	; 18
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	ac 01       	movw	r20, r24
     64e:	02 c0       	rjmp	.+4      	; 0x654 <vDIO_PULLUP_CONNECT+0x114>
     650:	44 0f       	add	r20, r20
     652:	55 1f       	adc	r21, r21
     654:	6a 95       	dec	r22
     656:	e2 f7       	brpl	.-8      	; 0x650 <vDIO_PULLUP_CONNECT+0x110>
     658:	ba 01       	movw	r22, r20
     65a:	60 95       	com	r22
     65c:	62 23       	and	r22, r18
     65e:	62 bb       	out	0x12, r22	; 18
     660:	08 95       	ret

00000662 <vDIO_WRITE_LOW_NIBBLE>:
		default:
		break;
}
}
void vDIO_WRITE_LOW_NIBBLE(unsigned char port,unsigned char value)
{
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
     668:	c8 2f       	mov	r28, r24
     66a:	06 2f       	mov	r16, r22
	vDIO_WRITE_BIT(port,0,READ_BIT(value,0));
     66c:	46 2f       	mov	r20, r22
     66e:	41 70       	andi	r20, 0x01	; 1
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,1,READ_BIT(value,1));
     676:	10 e0       	ldi	r17, 0x00	; 0
     678:	a8 01       	movw	r20, r16
     67a:	42 70       	andi	r20, 0x02	; 2
     67c:	50 70       	andi	r21, 0x00	; 0
     67e:	55 95       	asr	r21
     680:	47 95       	ror	r20
     682:	8c 2f       	mov	r24, r28
     684:	61 e0       	ldi	r22, 0x01	; 1
     686:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,2,READ_BIT(value,2));
     68a:	a8 01       	movw	r20, r16
     68c:	44 70       	andi	r20, 0x04	; 4
     68e:	50 70       	andi	r21, 0x00	; 0
     690:	55 95       	asr	r21
     692:	47 95       	ror	r20
     694:	55 95       	asr	r21
     696:	47 95       	ror	r20
     698:	8c 2f       	mov	r24, r28
     69a:	62 e0       	ldi	r22, 0x02	; 2
     69c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,3,READ_BIT(value,3));
     6a0:	08 70       	andi	r16, 0x08	; 8
     6a2:	10 70       	andi	r17, 0x00	; 0
     6a4:	a8 01       	movw	r20, r16
     6a6:	55 95       	asr	r21
     6a8:	47 95       	ror	r20
     6aa:	55 95       	asr	r21
     6ac:	47 95       	ror	r20
     6ae:	55 95       	asr	r21
     6b0:	47 95       	ror	r20
     6b2:	8c 2f       	mov	r24, r28
     6b4:	63 e0       	ldi	r22, 0x03	; 3
     6b6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
}
     6ba:	cf 91       	pop	r28
     6bc:	1f 91       	pop	r17
     6be:	0f 91       	pop	r16
     6c0:	08 95       	ret

000006c2 <vDIO_WRITE_HIGH_NIBBLE>:
void vDIO_WRITE_HIGH_NIBBLE(unsigned char port,unsigned char value)
{
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	c8 2f       	mov	r28, r24
     6cc:	d6 2f       	mov	r29, r22
	vDIO_WRITE_BIT(port,4,READ_BIT(value,4));
     6ce:	06 2f       	mov	r16, r22
     6d0:	10 e0       	ldi	r17, 0x00	; 0
     6d2:	a8 01       	movw	r20, r16
     6d4:	40 71       	andi	r20, 0x10	; 16
     6d6:	50 70       	andi	r21, 0x00	; 0
     6d8:	55 95       	asr	r21
     6da:	47 95       	ror	r20
     6dc:	55 95       	asr	r21
     6de:	47 95       	ror	r20
     6e0:	55 95       	asr	r21
     6e2:	47 95       	ror	r20
     6e4:	55 95       	asr	r21
     6e6:	47 95       	ror	r20
     6e8:	64 e0       	ldi	r22, 0x04	; 4
     6ea:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,5,READ_BIT(value,5));
     6ee:	a8 01       	movw	r20, r16
     6f0:	40 72       	andi	r20, 0x20	; 32
     6f2:	50 70       	andi	r21, 0x00	; 0
     6f4:	55 95       	asr	r21
     6f6:	47 95       	ror	r20
     6f8:	55 95       	asr	r21
     6fa:	47 95       	ror	r20
     6fc:	55 95       	asr	r21
     6fe:	47 95       	ror	r20
     700:	55 95       	asr	r21
     702:	47 95       	ror	r20
     704:	55 95       	asr	r21
     706:	47 95       	ror	r20
     708:	8c 2f       	mov	r24, r28
     70a:	65 e0       	ldi	r22, 0x05	; 5
     70c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,6,READ_BIT(value,6));
     710:	00 74       	andi	r16, 0x40	; 64
     712:	10 70       	andi	r17, 0x00	; 0
     714:	a8 01       	movw	r20, r16
     716:	04 2e       	mov	r0, r20
     718:	45 2f       	mov	r20, r21
     71a:	00 0c       	add	r0, r0
     71c:	44 1f       	adc	r20, r20
     71e:	55 0b       	sbc	r21, r21
     720:	00 0c       	add	r0, r0
     722:	44 1f       	adc	r20, r20
     724:	55 1f       	adc	r21, r21
     726:	8c 2f       	mov	r24, r28
     728:	66 e0       	ldi	r22, 0x06	; 6
     72a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	vDIO_WRITE_BIT(port,7,READ_BIT(value,7));
     72e:	4d 2f       	mov	r20, r29
     730:	44 1f       	adc	r20, r20
     732:	44 27       	eor	r20, r20
     734:	44 1f       	adc	r20, r20
     736:	8c 2f       	mov	r24, r28
     738:	67 e0       	ldi	r22, 0x07	; 7
     73a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	0f 91       	pop	r16
     746:	08 95       	ret

00000748 <keybad_vinit>:
#include "keybad.h"
void keybad_vinit(void)
{
	vDIO_SET_BIT_DIR(keybad_port,0,1);
     748:	84 e6       	ldi	r24, 0x64	; 100
     74a:	60 e0       	ldi	r22, 0x00	; 0
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,1,1);
     752:	84 e6       	ldi	r24, 0x64	; 100
     754:	61 e0       	ldi	r22, 0x01	; 1
     756:	41 e0       	ldi	r20, 0x01	; 1
     758:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,2,1);
     75c:	84 e6       	ldi	r24, 0x64	; 100
     75e:	62 e0       	ldi	r22, 0x02	; 2
     760:	41 e0       	ldi	r20, 0x01	; 1
     762:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,3,1);
     766:	84 e6       	ldi	r24, 0x64	; 100
     768:	63 e0       	ldi	r22, 0x03	; 3
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,4,0);
     770:	84 e6       	ldi	r24, 0x64	; 100
     772:	64 e0       	ldi	r22, 0x04	; 4
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,5,0);
     77a:	84 e6       	ldi	r24, 0x64	; 100
     77c:	65 e0       	ldi	r22, 0x05	; 5
     77e:	40 e0       	ldi	r20, 0x00	; 0
     780:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,6,0);
     784:	84 e6       	ldi	r24, 0x64	; 100
     786:	66 e0       	ldi	r22, 0x06	; 6
     788:	40 e0       	ldi	r20, 0x00	; 0
     78a:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(keybad_port,7,0);
     78e:	84 e6       	ldi	r24, 0x64	; 100
     790:	67 e0       	ldi	r22, 0x07	; 7
     792:	40 e0       	ldi	r20, 0x00	; 0
     794:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	
	vDIO_PULLUP_CONNECT(keybad_port,4,1);
     798:	84 e6       	ldi	r24, 0x64	; 100
     79a:	64 e0       	ldi	r22, 0x04	; 4
     79c:	41 e0       	ldi	r20, 0x01	; 1
     79e:	0e 94 a0 02 	call	0x540	; 0x540 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
     7a2:	84 e6       	ldi	r24, 0x64	; 100
     7a4:	65 e0       	ldi	r22, 0x05	; 5
     7a6:	41 e0       	ldi	r20, 0x01	; 1
     7a8:	0e 94 a0 02 	call	0x540	; 0x540 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
     7ac:	84 e6       	ldi	r24, 0x64	; 100
     7ae:	66 e0       	ldi	r22, 0x06	; 6
     7b0:	41 e0       	ldi	r20, 0x01	; 1
     7b2:	0e 94 a0 02 	call	0x540	; 0x540 <vDIO_PULLUP_CONNECT>
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
     7b6:	84 e6       	ldi	r24, 0x64	; 100
     7b8:	67 e0       	ldi	r22, 0x07	; 7
     7ba:	41 e0       	ldi	r20, 0x01	; 1
     7bc:	0e 94 a0 02 	call	0x540	; 0x540 <vDIO_PULLUP_CONNECT>
}	
     7c0:	08 95       	ret

000007c2 <keybad_u8read_press>:
	
char keybad_u8read_press()
{
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
     7ce:	60 97       	sbiw	r28, 0x10	; 16
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     7da:	de 01       	movw	r26, r28
     7dc:	11 96       	adiw	r26, 0x01	; 1
     7de:	e0 e6       	ldi	r30, 0x60	; 96
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	80 e1       	ldi	r24, 0x10	; 16
     7e4:	01 90       	ld	r0, Z+
     7e6:	0d 92       	st	X+, r0
     7e8:	81 50       	subi	r24, 0x01	; 1
     7ea:	e1 f7       	brne	.-8      	; 0x7e4 <keybad_u8read_press+0x22>
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     7ec:	00 e0       	ldi	r16, 0x00	; 0
	{
		vDIO_WRITE_BIT(keybad_port,0,1);
     7ee:	84 e6       	ldi	r24, 0x64	; 100
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	41 e0       	ldi	r20, 0x01	; 1
     7f4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,1,1);
     7f8:	84 e6       	ldi	r24, 0x64	; 100
     7fa:	61 e0       	ldi	r22, 0x01	; 1
     7fc:	41 e0       	ldi	r20, 0x01	; 1
     7fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,2,1);
     802:	84 e6       	ldi	r24, 0x64	; 100
     804:	62 e0       	ldi	r22, 0x02	; 2
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,3,1);
     80c:	84 e6       	ldi	r24, 0x64	; 100
     80e:	63 e0       	ldi	r22, 0x03	; 3
     810:	41 e0       	ldi	r20, 0x01	; 1
     812:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
		vDIO_WRITE_BIT(keybad_port,row,0);
     816:	84 e6       	ldi	r24, 0x64	; 100
     818:	60 2f       	mov	r22, r16
     81a:	40 e0       	ldi	r20, 0x00	; 0
     81c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
		for (colum=0;colum<4;colum++)
     820:	10 e0       	ldi	r17, 0x00	; 0
	vDIO_PULLUP_CONNECT(keybad_port,5,1);
	vDIO_PULLUP_CONNECT(keybad_port,6,1);
	vDIO_PULLUP_CONNECT(keybad_port,7,1);
}	
	
char keybad_u8read_press()
     822:	61 2f       	mov	r22, r17
     824:	6c 5f       	subi	r22, 0xFC	; 252
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
		{
		val=u8DIO_READ_BIT(keybad_port,(colum+4)) ;
     826:	84 e6       	ldi	r24, 0x64	; 100
     828:	0e 94 b8 01 	call	0x370	; 0x370 <u8DIO_READ_BIT>
		if(val==0)
     82c:	88 23       	and	r24, r24
     82e:	61 f4       	brne	.+24     	; 0x848 <keybad_u8read_press+0x86>
			{
			returnval=arr[row][colum];
     830:	e0 2f       	mov	r30, r16
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	ee 0f       	add	r30, r30
     836:	ff 1f       	adc	r31, r31
     838:	ee 0f       	add	r30, r30
     83a:	ff 1f       	adc	r31, r31
     83c:	e1 0f       	add	r30, r17
     83e:	f1 1d       	adc	r31, r1
     840:	ec 0f       	add	r30, r28
     842:	fd 1f       	adc	r31, r29
     844:	81 81       	ldd	r24, Z+1	; 0x01
     846:	04 c0       	rjmp	.+8      	; 0x850 <keybad_u8read_press+0x8e>
		vDIO_WRITE_BIT(keybad_port,0,1);
		vDIO_WRITE_BIT(keybad_port,1,1);
		vDIO_WRITE_BIT(keybad_port,2,1);
		vDIO_WRITE_BIT(keybad_port,3,1);
		vDIO_WRITE_BIT(keybad_port,row,0);
		for (colum=0;colum<4;colum++)
     848:	1f 5f       	subi	r17, 0xFF	; 255
     84a:	14 30       	cpi	r17, 0x04	; 4
     84c:	51 f7       	brne	.-44     	; 0x822 <keybad_u8read_press+0x60>
     84e:	0b c0       	rjmp	.+22     	; 0x866 <__stack+0x7>
			break;
			}
	}
	
	return returnval;
}
     850:	60 96       	adiw	r28, 0x10	; 16
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	f8 94       	cli
     856:	de bf       	out	0x3e, r29	; 62
     858:	0f be       	out	0x3f, r0	; 63
     85a:	cd bf       	out	0x3d, r28	; 61
     85c:	df 91       	pop	r29
     85e:	cf 91       	pop	r28
     860:	1f 91       	pop	r17
     862:	0f 91       	pop	r16
     864:	08 95       	ret
char keybad_u8read_press()
{
	char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	char row,colum,val;
	char returnval=notpassed;
	for(row=0;row<4;row++)
     866:	0f 5f       	subi	r16, 0xFF	; 255
     868:	04 30       	cpi	r16, 0x04	; 4
     86a:	09 f6       	brne	.-126    	; 0x7ee <keybad_u8read_press+0x2c>
     86c:	8f ef       	ldi	r24, 0xFF	; 255
     86e:	f0 cf       	rjmp	.-32     	; 0x850 <keybad_u8read_press+0x8e>

00000870 <LCD_ENABLE>:
	#endif

}
static void LCD_ENABLE(void)
{
	vDIO_WRITE_BIT(LCD_CONTROL,EN,1);
     870:	82 e4       	ldi	r24, 0x42	; 66
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	41 e0       	ldi	r20, 0x01	; 1
     876:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     87a:	8f e9       	ldi	r24, 0x9F	; 159
     87c:	9f e0       	ldi	r25, 0x0F	; 15
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	f1 f7       	brne	.-4      	; 0x87e <LCD_ENABLE+0xe>
     882:	00 c0       	rjmp	.+0      	; 0x884 <LCD_ENABLE+0x14>
     884:	00 00       	nop
	_delay_ms(2);
	vDIO_WRITE_BIT(LCD_CONTROL,EN,0);
     886:	82 e4       	ldi	r24, 0x42	; 66
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	40 e0       	ldi	r20, 0x00	; 0
     88c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
     890:	8f e9       	ldi	r24, 0x9F	; 159
     892:	9f e0       	ldi	r25, 0x0F	; 15
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <LCD_ENABLE+0x24>
     898:	00 c0       	rjmp	.+0      	; 0x89a <LCD_ENABLE+0x2a>
     89a:	00 00       	nop
	_delay_ms(2);
	
}
     89c:	08 95       	ret

0000089e <LCD_SEND_CHAR>:
	
	#endif
	
}
void LCD_SEND_CHAR( char data)
{
     89e:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,data);
     8a0:	81 e4       	ldi	r24, 0x41	; 65
     8a2:	0e 94 3b 02 	call	0x476	; 0x476 <vDIO_WRITE_PORT>
	vDIO_WRITE_BIT(LCD_CONTROL,RS,1);
     8a6:	82 e4       	ldi	r24, 0x42	; 66
     8a8:	62 e0       	ldi	r22, 0x02	; 2
     8aa:	41 e0       	ldi	r20, 0x01	; 1
     8ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	LCD_ENABLE();
     8b0:	0e 94 38 04 	call	0x870	; 0x870 <LCD_ENABLE>
	vDIO_WRITE_HIGH_NIBBLE(LCD_DATA,data);
	LCD_ENABLE();
	_delay_ms(1);
	#endif

}
     8b4:	08 95       	ret

000008b6 <LCD_SEND_CMD>:
	vDIO_WRITE_BIT(LCD_CONTROL,EN,0);
	_delay_ms(2);
	
}
void LCD_SEND_CMD( char cmd)
{
     8b6:	68 2f       	mov	r22, r24
	#if defined eight_bit_mode
	vDIO_WRITE_PORT(LCD_DATA,cmd);
     8b8:	81 e4       	ldi	r24, 0x41	; 65
     8ba:	0e 94 3b 02 	call	0x476	; 0x476 <vDIO_WRITE_PORT>
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
     8be:	82 e4       	ldi	r24, 0x42	; 66
     8c0:	62 e0       	ldi	r22, 0x02	; 2
     8c2:	40 e0       	ldi	r20, 0x00	; 0
     8c4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	LCD_ENABLE();
     8c8:	0e 94 38 04 	call	0x870	; 0x870 <LCD_ENABLE>
     8cc:	8f ec       	ldi	r24, 0xCF	; 207
     8ce:	97 e0       	ldi	r25, 0x07	; 7
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	f1 f7       	brne	.-4      	; 0x8d0 <LCD_SEND_CMD+0x1a>
     8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <LCD_SEND_CMD+0x20>
     8d6:	00 00       	nop
	vDIO_WRITE_BIT(LCD_CONTROL,RS,0);
	LCD_ENABLE();
	_delay_ms(1);
	#endif
	
}
     8d8:	08 95       	ret

000008da <LCD_INIT>:
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	91 ee       	ldi	r25, 0xE1	; 225
     8de:	a4 e0       	ldi	r26, 0x04	; 4
     8e0:	81 50       	subi	r24, 0x01	; 1
     8e2:	90 40       	sbci	r25, 0x00	; 0
     8e4:	a0 40       	sbci	r26, 0x00	; 0
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <LCD_INIT+0x6>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <LCD_INIT+0x10>
     8ea:	00 00       	nop

void LCD_INIT(void)
{
	_delay_ms(200);
	#if defined eight_bit_mode
	vDIO_SET_BIT_DIR(LCD_DATA,0,1);
     8ec:	81 e4       	ldi	r24, 0x41	; 65
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	41 e0       	ldi	r20, 0x01	; 1
     8f2:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,1,1);
     8f6:	81 e4       	ldi	r24, 0x41	; 65
     8f8:	61 e0       	ldi	r22, 0x01	; 1
     8fa:	41 e0       	ldi	r20, 0x01	; 1
     8fc:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,2,1);
     900:	81 e4       	ldi	r24, 0x41	; 65
     902:	62 e0       	ldi	r22, 0x02	; 2
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,3,1);
     90a:	81 e4       	ldi	r24, 0x41	; 65
     90c:	63 e0       	ldi	r22, 0x03	; 3
     90e:	41 e0       	ldi	r20, 0x01	; 1
     910:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,4,1);
     914:	81 e4       	ldi	r24, 0x41	; 65
     916:	64 e0       	ldi	r22, 0x04	; 4
     918:	41 e0       	ldi	r20, 0x01	; 1
     91a:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,5,1);
     91e:	81 e4       	ldi	r24, 0x41	; 65
     920:	65 e0       	ldi	r22, 0x05	; 5
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,6,1);
     928:	81 e4       	ldi	r24, 0x41	; 65
     92a:	66 e0       	ldi	r22, 0x06	; 6
     92c:	41 e0       	ldi	r20, 0x01	; 1
     92e:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_DATA,7,1);
     932:	81 e4       	ldi	r24, 0x41	; 65
     934:	67 e0       	ldi	r22, 0x07	; 7
     936:	41 e0       	ldi	r20, 0x01	; 1
     938:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,EN,1);
     93c:	82 e4       	ldi	r24, 0x42	; 66
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	41 e0       	ldi	r20, 0x01	; 1
     942:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,RS,1);
     946:	82 e4       	ldi	r24, 0x42	; 66
     948:	62 e0       	ldi	r22, 0x02	; 2
     94a:	41 e0       	ldi	r20, 0x01	; 1
     94c:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_SET_BIT_DIR(LCD_CONTROL,WR,1);
     950:	82 e4       	ldi	r24, 0x42	; 66
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	41 e0       	ldi	r20, 0x01	; 1
     956:	0e 94 49 00 	call	0x92	; 0x92 <vDIO_SET_BIT_DIR>
	vDIO_WRITE_BIT(LCD_CONTROL,WR,0);
     95a:	82 e4       	ldi	r24, 0x42	; 66
     95c:	61 e0       	ldi	r22, 0x01	; 1
     95e:	40 e0       	ldi	r20, 0x00	; 0
     960:	0e 94 da 00 	call	0x1b4	; 0x1b4 <vDIO_WRITE_BIT>
	LCD_SEND_CMD(RET_HOME);
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_SEND_CMD>
     96a:	af e1       	ldi	r26, 0x1F	; 31
     96c:	be e4       	ldi	r27, 0x4E	; 78
     96e:	11 97       	sbiw	r26, 0x01	; 1
     970:	f1 f7       	brne	.-4      	; 0x96e <LCD_INIT+0x94>
     972:	00 c0       	rjmp	.+0      	; 0x974 <LCD_INIT+0x9a>
     974:	00 00       	nop
	_delay_ms(10);
	LCD_SEND_CMD(EIGHT_BIT);
     976:	88 e3       	ldi	r24, 0x38	; 56
     978:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_SEND_CMD>
     97c:	8f ec       	ldi	r24, 0xCF	; 207
     97e:	97 e0       	ldi	r25, 0x07	; 7
     980:	01 97       	sbiw	r24, 0x01	; 1
     982:	f1 f7       	brne	.-4      	; 0x980 <LCD_INIT+0xa6>
     984:	00 c0       	rjmp	.+0      	; 0x986 <LCD_INIT+0xac>
     986:	00 00       	nop
	_delay_ms(1);
	LCD_SEND_CMD(DISPLAY_CURSOR);
     988:	8c e0       	ldi	r24, 0x0C	; 12
     98a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_SEND_CMD>
     98e:	af ec       	ldi	r26, 0xCF	; 207
     990:	b7 e0       	ldi	r27, 0x07	; 7
     992:	11 97       	sbiw	r26, 0x01	; 1
     994:	f1 f7       	brne	.-4      	; 0x992 <LCD_INIT+0xb8>
     996:	00 c0       	rjmp	.+0      	; 0x998 <LCD_INIT+0xbe>
     998:	00 00       	nop
     99a:	8f ec       	ldi	r24, 0xCF	; 207
     99c:	97 e0       	ldi	r25, 0x07	; 7
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	f1 f7       	brne	.-4      	; 0x99e <LCD_INIT+0xc4>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <LCD_INIT+0xca>
     9a4:	00 00       	nop
	_delay_ms(1);
	//LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(1);
	LCD_SEND_CMD(ENTRY_MODE);
     9a6:	86 e0       	ldi	r24, 0x06	; 6
     9a8:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_SEND_CMD>
     9ac:	af ec       	ldi	r26, 0xCF	; 207
     9ae:	b7 e0       	ldi	r27, 0x07	; 7
     9b0:	11 97       	sbiw	r26, 0x01	; 1
     9b2:	f1 f7       	brne	.-4      	; 0x9b0 <LCD_INIT+0xd6>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <LCD_INIT+0xdc>
     9b6:	00 00       	nop
	LCD_SEND_CMD(ENTRY_MODE);
	_delay_ms(1);
	
	#endif
	
}
     9b8:	08 95       	ret

000009ba <LCD_clear_screen>:
	#endif
	
}
void LCD_clear_screen(void)
{
	LCD_SEND_CMD(CLR_SCREEN);
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_SEND_CMD>
     9c0:	8f e1       	ldi	r24, 0x1F	; 31
     9c2:	9e e4       	ldi	r25, 0x4E	; 78
     9c4:	01 97       	sbiw	r24, 0x01	; 1
     9c6:	f1 f7       	brne	.-4      	; 0x9c4 <LCD_clear_screen+0xa>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <LCD_clear_screen+0x10>
     9ca:	00 00       	nop
	_delay_ms(10);
}
     9cc:	08 95       	ret

000009ce <LCD_SEND_STRING>:

void LCD_SEND_STRING( char *data)
{
     9ce:	cf 93       	push	r28
     9d0:	df 93       	push	r29
     9d2:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     9d4:	88 81       	ld	r24, Y
     9d6:	88 23       	and	r24, r24
     9d8:	31 f0       	breq	.+12     	; 0x9e6 <LCD_SEND_STRING+0x18>
{
	LCD_SEND_CMD(CLR_SCREEN);
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
     9da:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_SEND_CHAR(*data);
     9dc:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
	_delay_ms(10);
}

void LCD_SEND_STRING( char *data)
{
	while((*data)!='\0')
     9e0:	89 91       	ld	r24, Y+
     9e2:	88 23       	and	r24, r24
     9e4:	d9 f7       	brne	.-10     	; 0x9dc <LCD_SEND_STRING+0xe>
	{
		LCD_SEND_CHAR(*data);
		data++;
	}
}
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <LCD_MOVE_CURSOR>:
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
     9ec:	28 2f       	mov	r18, r24
     9ee:	21 50       	subi	r18, 0x01	; 1
     9f0:	22 30       	cpi	r18, 0x02	; 2
     9f2:	70 f4       	brcc	.+28     	; 0xa10 <LCD_MOVE_CURSOR+0x24>
     9f4:	61 31       	cpi	r22, 0x11	; 17
     9f6:	70 f4       	brcc	.+28     	; 0xa14 <LCD_MOVE_CURSOR+0x28>
     9f8:	66 23       	and	r22, r22
     9fa:	71 f0       	breq	.+28     	; 0xa18 <LCD_MOVE_CURSOR+0x2c>
	{
		val=0x80;
	}
	else if(row==1)
     9fc:	81 30       	cpi	r24, 0x01	; 1
     9fe:	19 f4       	brne	.+6      	; 0xa06 <LCD_MOVE_CURSOR+0x1a>
	{
		val=0x80+(colum-1);
     a00:	96 2f       	mov	r25, r22
     a02:	91 58       	subi	r25, 0x81	; 129
     a04:	0a c0       	rjmp	.+20     	; 0xa1a <LCD_MOVE_CURSOR+0x2e>
	}
	else if(row==2)
     a06:	82 30       	cpi	r24, 0x02	; 2
     a08:	41 f4       	brne	.+16     	; 0xa1a <LCD_MOVE_CURSOR+0x2e>
	{
		val=0xC0+(colum-1);
     a0a:	96 2f       	mov	r25, r22
     a0c:	91 54       	subi	r25, 0x41	; 65
     a0e:	05 c0       	rjmp	.+10     	; 0xa1a <LCD_MOVE_CURSOR+0x2e>
void LCD_MOVE_CURSOR( char row, char colum)
{
	char val;
	if(row>2||row<1||colum>16||colum<1)
	{
		val=0x80;
     a10:	90 e8       	ldi	r25, 0x80	; 128
     a12:	03 c0       	rjmp	.+6      	; 0xa1a <LCD_MOVE_CURSOR+0x2e>
     a14:	90 e8       	ldi	r25, 0x80	; 128
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <LCD_MOVE_CURSOR+0x2e>
     a18:	90 e8       	ldi	r25, 0x80	; 128
	else if(row==2)
	{
		val=0xC0+(colum-1);
	}	
	
	LCD_SEND_CMD(val);
     a1a:	89 2f       	mov	r24, r25
     a1c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <LCD_SEND_CMD>
     a20:	8f ec       	ldi	r24, 0xCF	; 207
     a22:	97 e0       	ldi	r25, 0x07	; 7
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	f1 f7       	brne	.-4      	; 0xa24 <LCD_MOVE_CURSOR+0x38>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <LCD_MOVE_CURSOR+0x3e>
     a2a:	00 00       	nop
	_delay_ms(1);	 
}
     a2c:	08 95       	ret

00000a2e <main>:
unsigned char flag3=0;
unsigned char flag4=0;
int main(void)
{
	int value_read;
	LCD_INIT();
     a2e:	0e 94 6d 04 	call	0x8da	; 0x8da <LCD_INIT>
	TIMER_CTC_INIT();
     a32:	0e 94 14 1a 	call	0x3428	; 0x3428 <TIMER_CTC_INIT>
	keybad_vinit();
     a36:	0e 94 a4 03 	call	0x748	; 0x748 <keybad_vinit>
	LCD_MOVE_CURSOR(1,5);
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	65 e0       	ldi	r22, 0x05	; 5
     a3e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
    LCD_SEND_STRING("Welcome");
     a42:	80 e7       	ldi	r24, 0x70	; 112
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(2,3);
     a4a:	82 e0       	ldi	r24, 0x02	; 2
     a4c:	63 e0       	ldi	r22, 0x03	; 3
     a4e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("Simple Game");
     a52:	88 e7       	ldi	r24, 0x78	; 120
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
     a5a:	8f ef       	ldi	r24, 0xFF	; 255
     a5c:	99 e6       	ldi	r25, 0x69	; 105
     a5e:	a8 e1       	ldi	r26, 0x18	; 24
     a60:	81 50       	subi	r24, 0x01	; 1
     a62:	90 40       	sbci	r25, 0x00	; 0
     a64:	a0 40       	sbci	r26, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <main+0x32>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <main+0x3c>
     a6a:	00 00       	nop
	_delay_ms(1000);
  L1:LCD_clear_screen();
	LCD_SEND_STRING("1-Test1  2-Test2 ");
     a6c:	c4 e8       	ldi	r28, 0x84	; 132
     a6e:	d0 e0       	ldi	r29, 0x00	; 0
	LCD_MOVE_CURSOR(2,1);
	LCD_SEND_STRING("3-Test3  4-Test4 ");
     a70:	06 e9       	ldi	r16, 0x96	; 150
     a72:	10 e0       	ldi	r17, 0x00	; 0
		goto L1; 
  }
  else
  {
	  LCD_clear_screen();
	  LCD_SEND_STRING("  Test4 locked  ");
     a74:	0f 2e       	mov	r0, r31
     a76:	f4 e2       	ldi	r31, 0x24	; 36
     a78:	ef 2e       	mov	r14, r31
     a7a:	f3 e0       	ldi	r31, 0x03	; 3
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
		LCD_clear_screen();
		LCD_MOVE_CURSOR(1,4);
		LCD_SEND_STRING("Test(4)");
		_delay_ms(200);
		LCD_clear_screen();
		LCD_SEND_STRING("1) 3+..=10");
     a80:	0f 2e       	mov	r0, r31
     a82:	f0 eb       	ldi	r31, 0xB0	; 176
     a84:	af 2e       	mov	r10, r31
     a86:	f0 e0       	ldi	r31, 0x00	; 0
     a88:	bf 2e       	mov	r11, r31
     a8a:	f0 2d       	mov	r31, r0
		}
		_delay_ms(150);
		counter=0;
		flag=0;
		LCD_clear_screen();
		LCD_SEND_STRING("2) 13-..=10");
     a8c:	0f 2e       	mov	r0, r31
     a8e:	fc ed       	ldi	r31, 0xDC	; 220
     a90:	8f 2e       	mov	r8, r31
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	9f 2e       	mov	r9, r31
     a96:	f0 2d       	mov	r31, r0
		}
		_delay_ms(150);
		counter=0;
		flag=0;
		LCD_clear_screen();
		LCD_SEND_STRING("3) 2*..=10");
     a98:	0f 2e       	mov	r0, r31
     a9a:	f8 ee       	ldi	r31, 0xE8	; 232
     a9c:	6f 2e       	mov	r6, r31
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	7f 2e       	mov	r7, r31
     aa2:	f0 2d       	mov	r31, r0
		}
		_delay_ms(150);
		counter=0;
		flag=0;
		LCD_clear_screen();
		LCD_SEND_STRING("4) 50/..=10");
     aa4:	0f 2e       	mov	r0, r31
     aa6:	f3 ef       	ldi	r31, 0xF3	; 243
     aa8:	4f 2e       	mov	r4, r31
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	5f 2e       	mov	r5, r31
     aae:	f0 2d       	mov	r31, r0
		}
		_delay_ms(150);
		counter=0;
		flag=0;
		LCD_clear_screen();
		LCD_SEND_STRING("5) 14%..=0");
     ab0:	0f 2e       	mov	r0, r31
     ab2:	ff ef       	ldi	r31, 0xFF	; 255
     ab4:	2f 2e       	mov	r2, r31
     ab6:	f0 e0       	ldi	r31, 0x00	; 0
     ab8:	3f 2e       	mov	r3, r31
     aba:	f0 2d       	mov	r31, r0
	LCD_MOVE_CURSOR(1,5);
    LCD_SEND_STRING("Welcome");
	LCD_MOVE_CURSOR(2,3);
	LCD_SEND_STRING("Simple Game");
	_delay_ms(1000);
  L1:LCD_clear_screen();
     abc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
	LCD_SEND_STRING("1-Test1  2-Test2 ");
     ac0:	ce 01       	movw	r24, r28
     ac2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
	LCD_MOVE_CURSOR(2,1);
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	61 e0       	ldi	r22, 0x01	; 1
     aca:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
	LCD_SEND_STRING("3-Test3  4-Test4 ");
     ace:	c8 01       	movw	r24, r16
     ad0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
	//_delay_ms(800);
	while(1)
	 {
	   value_read=notpassed;
       value_read=keybad_u8read_press();
     ad4:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
     ad8:	90 e0       	ldi	r25, 0x00	; 0
	   //_delay_ms(30);
	  // counter=0;
	 if (value_read == '1' && flag1==0)
     ada:	81 33       	cpi	r24, 0x31	; 49
     adc:	91 05       	cpc	r25, r1
     ade:	09 f0       	breq	.+2      	; 0xae2 <main+0xb4>
     ae0:	12 c5       	rjmp	.+2596   	; 0x1506 <main+0xad8>
     ae2:	20 91 39 03 	lds	r18, 0x0339
     ae6:	22 23       	and	r18, r18
     ae8:	09 f0       	breq	.+2      	; 0xaec <main+0xbe>
     aea:	0d c5       	rjmp	.+2586   	; 0x1506 <main+0xad8>
	 {
		// counter=0;
	    if (value_read == '1')
		{
		flag1=1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 39 03 	sts	0x0339, r24
		counter=0;
     af2:	10 92 40 03 	sts	0x0340, r1
     af6:	10 92 3f 03 	sts	0x033F, r1
		LCD_clear_screen();
     afa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_MOVE_CURSOR(1,4);
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	64 e0       	ldi	r22, 0x04	; 4
     b02:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Test(1)");
     b06:	88 ea       	ldi	r24, 0xA8	; 168
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
     b0e:	8f ef       	ldi	r24, 0xFF	; 255
     b10:	91 ee       	ldi	r25, 0xE1	; 225
     b12:	a4 e0       	ldi	r26, 0x04	; 4
     b14:	81 50       	subi	r24, 0x01	; 1
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	a0 40       	sbci	r26, 0x00	; 0
     b1a:	e1 f7       	brne	.-8      	; 0xb14 <main+0xe6>
     b1c:	00 c0       	rjmp	.+0      	; 0xb1e <main+0xf0>
     b1e:	00 00       	nop
		_delay_ms(200);
		LCD_clear_screen();
     b20:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("1) 3+..=10");
     b24:	c5 01       	movw	r24, r10
     b26:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			do 
		{
			if (counter>=200)
			{
				flag=1;
     b2a:	dd 24       	eor	r13, r13
     b2c:	d3 94       	inc	r13
		_delay_ms(200);
		LCD_clear_screen();
		LCD_SEND_STRING("1) 3+..=10");
			do 
		{
			if (counter>=200)
     b2e:	80 91 3f 03 	lds	r24, 0x033F
     b32:	90 91 40 03 	lds	r25, 0x0340
     b36:	88 3c       	cpi	r24, 0xC8	; 200
     b38:	91 05       	cpc	r25, r1
     b3a:	10 f0       	brcs	.+4      	; 0xb40 <main+0x112>
			{
				flag=1;
     b3c:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
     b40:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
     b44:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read == notpassed && flag == 0);
     b46:	8f 3f       	cpi	r24, 0xFF	; 255
     b48:	91 05       	cpc	r25, r1
     b4a:	c1 f4       	brne	.+48     	; 0xb7c <main+0x14e>
     b4c:	80 91 3a 03 	lds	r24, 0x033A
     b50:	88 23       	and	r24, r24
     b52:	69 f3       	breq	.-38     	; 0xb2e <main+0x100>
		if(value_read == notpassed)
		{
			LCD_clear_screen();
     b54:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
     b60:	8b eb       	ldi	r24, 0xBB	; 187
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
     b68:	80 91 3b 03 	lds	r24, 0x033B
     b6c:	90 91 3c 03 	lds	r25, 0x033C
     b70:	01 96       	adiw	r24, 0x01	; 1
     b72:	90 93 3c 03 	sts	0x033C, r25
     b76:	80 93 3b 03 	sts	0x033B, r24
     b7a:	2a c0       	rjmp	.+84     	; 0xbd0 <main+0x1a2>
		}
		else if (value_read == '7')
     b7c:	87 33       	cpi	r24, 0x37	; 55
     b7e:	91 05       	cpc	r25, r1
     b80:	a1 f4       	brne	.+40     	; 0xbaa <main+0x17c>
	   {
		  LCD_clear_screen();
     b82:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		  LCD_MOVE_CURSOR(2,4);
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	64 e0       	ldi	r22, 0x04	; 4
     b8a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		  LCD_SEND_STRING("well done");
     b8e:	85 ec       	ldi	r24, 0xC5	; 197
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		  counter1++;
     b96:	80 91 3d 03 	lds	r24, 0x033D
     b9a:	90 91 3e 03 	lds	r25, 0x033E
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	90 93 3e 03 	sts	0x033E, r25
     ba4:	80 93 3d 03 	sts	0x033D, r24
     ba8:	13 c0       	rjmp	.+38     	; 0xbd0 <main+0x1a2>
	   }
	   else 
	   {
		   LCD_clear_screen();
     baa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_MOVE_CURSOR(2,4);
     bae:	82 e0       	ldi	r24, 0x02	; 2
     bb0:	64 e0       	ldi	r22, 0x04	; 4
     bb2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		   LCD_SEND_STRING("wrong answer");
     bb6:	8f ec       	ldi	r24, 0xCF	; 207
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		   counter2++;
     bbe:	80 91 3b 03 	lds	r24, 0x033B
     bc2:	90 91 3c 03 	lds	r25, 0x033C
     bc6:	01 96       	adiw	r24, 0x01	; 1
     bc8:	90 93 3c 03 	sts	0x033C, r25
     bcc:	80 93 3b 03 	sts	0x033B, r24
     bd0:	8f e7       	ldi	r24, 0x7F	; 127
     bd2:	99 ea       	ldi	r25, 0xA9	; 169
     bd4:	a3 e0       	ldi	r26, 0x03	; 3
     bd6:	81 50       	subi	r24, 0x01	; 1
     bd8:	90 40       	sbci	r25, 0x00	; 0
     bda:	a0 40       	sbci	r26, 0x00	; 0
     bdc:	e1 f7       	brne	.-8      	; 0xbd6 <main+0x1a8>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <main+0x1b2>
     be0:	00 00       	nop
	   }
	   _delay_ms(150);
	   counter =0;
     be2:	10 92 40 03 	sts	0x0340, r1
     be6:	10 92 3f 03 	sts	0x033F, r1
	   flag =0;
     bea:	10 92 3a 03 	sts	0x033A, r1
	   LCD_clear_screen();
     bee:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
	   LCD_SEND_STRING("2) 13-..=10");
     bf2:	c4 01       	movw	r24, r8
     bf4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	90 e7       	ldi	r25, 0x70	; 112
     bfc:	a2 e0       	ldi	r26, 0x02	; 2
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	90 40       	sbci	r25, 0x00	; 0
     c02:	a0 40       	sbci	r26, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <main+0x1d0>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <main+0x1da>
     c08:	00 00       	nop
	   _delay_ms(100);
	   do
	   {
		   if (counter >= 200)
		   {
			   flag=1;
     c0a:	dd 24       	eor	r13, r13
     c0c:	d3 94       	inc	r13
	   LCD_clear_screen();
	   LCD_SEND_STRING("2) 13-..=10");
	   _delay_ms(100);
	   do
	   {
		   if (counter >= 200)
     c0e:	80 91 3f 03 	lds	r24, 0x033F
     c12:	90 91 40 03 	lds	r25, 0x0340
     c16:	88 3c       	cpi	r24, 0xC8	; 200
     c18:	91 05       	cpc	r25, r1
     c1a:	10 f0       	brcs	.+4      	; 0xc20 <main+0x1f2>
		   {
			   flag=1;
     c1c:	d0 92 3a 03 	sts	0x033A, r13
		   }
		   value_read=keybad_u8read_press();
     c20:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
     c24:	90 e0       	ldi	r25, 0x00	; 0
	   } while (value_read == notpassed && flag == 0);
     c26:	8f 3f       	cpi	r24, 0xFF	; 255
     c28:	91 05       	cpc	r25, r1
     c2a:	c1 f4       	brne	.+48     	; 0xc5c <main+0x22e>
     c2c:	80 91 3a 03 	lds	r24, 0x033A
     c30:	88 23       	and	r24, r24
     c32:	69 f3       	breq	.-38     	; 0xc0e <main+0x1e0>
	   if (value_read == notpassed)
	   {
		   LCD_clear_screen();
     c34:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_MOVE_CURSOR(2,4);
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	64 e0       	ldi	r22, 0x04	; 4
     c3c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		   LCD_SEND_STRING("time over");
     c40:	8b eb       	ldi	r24, 0xBB	; 187
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		   counter2++;
     c48:	80 91 3b 03 	lds	r24, 0x033B
     c4c:	90 91 3c 03 	lds	r25, 0x033C
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	90 93 3c 03 	sts	0x033C, r25
     c56:	80 93 3b 03 	sts	0x033B, r24
     c5a:	2a c0       	rjmp	.+84     	; 0xcb0 <main+0x282>
	   }
	   else if (value_read=='3')
     c5c:	83 33       	cpi	r24, 0x33	; 51
     c5e:	91 05       	cpc	r25, r1
     c60:	a1 f4       	brne	.+40     	; 0xc8a <main+0x25c>
	   {
		   LCD_clear_screen();
     c62:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_MOVE_CURSOR(2,4);
     c66:	82 e0       	ldi	r24, 0x02	; 2
     c68:	64 e0       	ldi	r22, 0x04	; 4
     c6a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		   LCD_SEND_STRING("well done");
     c6e:	85 ec       	ldi	r24, 0xC5	; 197
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			 counter1++;
     c76:	80 91 3d 03 	lds	r24, 0x033D
     c7a:	90 91 3e 03 	lds	r25, 0x033E
     c7e:	01 96       	adiw	r24, 0x01	; 1
     c80:	90 93 3e 03 	sts	0x033E, r25
     c84:	80 93 3d 03 	sts	0x033D, r24
     c88:	13 c0       	rjmp	.+38     	; 0xcb0 <main+0x282>
	   }
	   else
	   {
		   LCD_clear_screen();
     c8a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_MOVE_CURSOR(2,4);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	64 e0       	ldi	r22, 0x04	; 4
     c92:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		   LCD_SEND_STRING("wrong answer");
     c96:	8f ec       	ldi	r24, 0xCF	; 207
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		   counter2++;
     c9e:	80 91 3b 03 	lds	r24, 0x033B
     ca2:	90 91 3c 03 	lds	r25, 0x033C
     ca6:	01 96       	adiw	r24, 0x01	; 1
     ca8:	90 93 3c 03 	sts	0x033C, r25
     cac:	80 93 3b 03 	sts	0x033B, r24
     cb0:	8f e7       	ldi	r24, 0x7F	; 127
     cb2:	99 ea       	ldi	r25, 0xA9	; 169
     cb4:	a3 e0       	ldi	r26, 0x03	; 3
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	90 40       	sbci	r25, 0x00	; 0
     cba:	a0 40       	sbci	r26, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <main+0x288>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <main+0x292>
     cc0:	00 00       	nop
	   }
	   _delay_ms(150);
	   counter = 0;
     cc2:	10 92 40 03 	sts	0x0340, r1
     cc6:	10 92 3f 03 	sts	0x033F, r1
	   flag = 0;
     cca:	10 92 3a 03 	sts	0x033A, r1
	   LCD_clear_screen();
     cce:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
	   LCD_SEND_STRING("3) 2*..=10");
     cd2:	c3 01       	movw	r24, r6
     cd4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
     cd8:	8f ef       	ldi	r24, 0xFF	; 255
     cda:	90 e7       	ldi	r25, 0x70	; 112
     cdc:	a2 e0       	ldi	r26, 0x02	; 2
     cde:	81 50       	subi	r24, 0x01	; 1
     ce0:	90 40       	sbci	r25, 0x00	; 0
     ce2:	a0 40       	sbci	r26, 0x00	; 0
     ce4:	e1 f7       	brne	.-8      	; 0xcde <main+0x2b0>
     ce6:	00 c0       	rjmp	.+0      	; 0xce8 <main+0x2ba>
     ce8:	00 00       	nop
	   _delay_ms(100);
	   do
	   {
		   if (counter >= 200)
		   {
			   flag=1;
     cea:	dd 24       	eor	r13, r13
     cec:	d3 94       	inc	r13
	   LCD_clear_screen();
	   LCD_SEND_STRING("3) 2*..=10");
	   _delay_ms(100);
	   do
	   {
		   if (counter >= 200)
     cee:	80 91 3f 03 	lds	r24, 0x033F
     cf2:	90 91 40 03 	lds	r25, 0x0340
     cf6:	88 3c       	cpi	r24, 0xC8	; 200
     cf8:	91 05       	cpc	r25, r1
     cfa:	10 f0       	brcs	.+4      	; 0xd00 <main+0x2d2>
		   {
			   flag=1;
     cfc:	d0 92 3a 03 	sts	0x033A, r13
		   }
		   value_read=keybad_u8read_press();
     d00:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
     d04:	90 e0       	ldi	r25, 0x00	; 0
	   } while (value_read == notpassed && flag == 0);
     d06:	8f 3f       	cpi	r24, 0xFF	; 255
     d08:	91 05       	cpc	r25, r1
     d0a:	c1 f4       	brne	.+48     	; 0xd3c <main+0x30e>
     d0c:	80 91 3a 03 	lds	r24, 0x033A
     d10:	88 23       	and	r24, r24
     d12:	69 f3       	breq	.-38     	; 0xcee <main+0x2c0>
	   if (value_read==notpassed)
	   {
		   LCD_clear_screen();
     d14:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_MOVE_CURSOR(2,4);
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	64 e0       	ldi	r22, 0x04	; 4
     d1c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		   LCD_SEND_STRING("time over");
     d20:	8b eb       	ldi	r24, 0xBB	; 187
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		   counter2++;
     d28:	80 91 3b 03 	lds	r24, 0x033B
     d2c:	90 91 3c 03 	lds	r25, 0x033C
     d30:	01 96       	adiw	r24, 0x01	; 1
     d32:	90 93 3c 03 	sts	0x033C, r25
     d36:	80 93 3b 03 	sts	0x033B, r24
     d3a:	2a c0       	rjmp	.+84     	; 0xd90 <main+0x362>
	   }
	   else if (value_read =='5')
     d3c:	85 33       	cpi	r24, 0x35	; 53
     d3e:	91 05       	cpc	r25, r1
     d40:	a1 f4       	brne	.+40     	; 0xd6a <main+0x33c>
	   {
		   LCD_clear_screen();
     d42:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_MOVE_CURSOR(2,4);
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	64 e0       	ldi	r22, 0x04	; 4
     d4a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		   LCD_SEND_STRING("well done");
     d4e:	85 ec       	ldi	r24, 0xC5	; 197
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			 counter1++;
     d56:	80 91 3d 03 	lds	r24, 0x033D
     d5a:	90 91 3e 03 	lds	r25, 0x033E
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	90 93 3e 03 	sts	0x033E, r25
     d64:	80 93 3d 03 	sts	0x033D, r24
     d68:	13 c0       	rjmp	.+38     	; 0xd90 <main+0x362>
	   }
	   else
	   {
		   LCD_clear_screen();
     d6a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_MOVE_CURSOR(2,4);
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	64 e0       	ldi	r22, 0x04	; 4
     d72:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		   LCD_SEND_STRING("wrong answer");
     d76:	8f ec       	ldi	r24, 0xCF	; 207
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		   counter2++;
     d7e:	80 91 3b 03 	lds	r24, 0x033B
     d82:	90 91 3c 03 	lds	r25, 0x033C
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	90 93 3c 03 	sts	0x033C, r25
     d8c:	80 93 3b 03 	sts	0x033B, r24
     d90:	8f e7       	ldi	r24, 0x7F	; 127
     d92:	99 ea       	ldi	r25, 0xA9	; 169
     d94:	a3 e0       	ldi	r26, 0x03	; 3
     d96:	81 50       	subi	r24, 0x01	; 1
     d98:	90 40       	sbci	r25, 0x00	; 0
     d9a:	a0 40       	sbci	r26, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <main+0x368>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <main+0x372>
     da0:	00 00       	nop
	   }
		_delay_ms(150);
		counter=0;
     da2:	10 92 40 03 	sts	0x0340, r1
     da6:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
     daa:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
     dae:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("4) 50/..=10");
     db2:	c2 01       	movw	r24, r4
     db4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	90 e7       	ldi	r25, 0x70	; 112
     dbc:	a2 e0       	ldi	r26, 0x02	; 2
     dbe:	81 50       	subi	r24, 0x01	; 1
     dc0:	90 40       	sbci	r25, 0x00	; 0
     dc2:	a0 40       	sbci	r26, 0x00	; 0
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <main+0x390>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <main+0x39a>
     dc8:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
     dca:	dd 24       	eor	r13, r13
     dcc:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("4) 50/..=10");
		_delay_ms(100);
		do
		{
			if (counter>=200)
     dce:	80 91 3f 03 	lds	r24, 0x033F
     dd2:	90 91 40 03 	lds	r25, 0x0340
     dd6:	88 3c       	cpi	r24, 0xC8	; 200
     dd8:	91 05       	cpc	r25, r1
     dda:	10 f0       	brcs	.+4      	; 0xde0 <main+0x3b2>
			{
				flag=1;
     ddc:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
     de0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
     de4:	28 2f       	mov	r18, r24
     de6:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
     de8:	8f 3f       	cpi	r24, 0xFF	; 255
     dea:	91 05       	cpc	r25, r1
     dec:	c1 f4       	brne	.+48     	; 0xe1e <main+0x3f0>
     dee:	80 91 3a 03 	lds	r24, 0x033A
     df2:	88 23       	and	r24, r24
     df4:	61 f3       	breq	.-40     	; 0xdce <main+0x3a0>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
     df6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	64 e0       	ldi	r22, 0x04	; 4
     dfe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
     e02:	8b eb       	ldi	r24, 0xBB	; 187
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
     e0a:	80 91 3b 03 	lds	r24, 0x033B
     e0e:	90 91 3c 03 	lds	r25, 0x033C
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	90 93 3c 03 	sts	0x033C, r25
     e18:	80 93 3b 03 	sts	0x033B, r24
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <main+0x44a>
		}
		else if (value_read =='5')
     e1e:	85 33       	cpi	r24, 0x35	; 53
     e20:	91 05       	cpc	r25, r1
     e22:	b9 f4       	brne	.+46     	; 0xe52 <main+0x424>
		{
			LCD_SEND_CHAR(value_read);
     e24:	82 2f       	mov	r24, r18
     e26:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
     e2a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
     e2e:	82 e0       	ldi	r24, 0x02	; 2
     e30:	64 e0       	ldi	r22, 0x04	; 4
     e32:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
     e36:	85 ec       	ldi	r24, 0xC5	; 197
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
     e3e:	80 91 3d 03 	lds	r24, 0x033D
     e42:	90 91 3e 03 	lds	r25, 0x033E
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	90 93 3e 03 	sts	0x033E, r25
     e4c:	80 93 3d 03 	sts	0x033D, r24
     e50:	13 c0       	rjmp	.+38     	; 0xe78 <main+0x44a>
		}
		else
		{
			LCD_clear_screen();
     e52:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	64 e0       	ldi	r22, 0x04	; 4
     e5a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
     e5e:	8f ec       	ldi	r24, 0xCF	; 207
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
     e66:	80 91 3b 03 	lds	r24, 0x033B
     e6a:	90 91 3c 03 	lds	r25, 0x033C
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	90 93 3c 03 	sts	0x033C, r25
     e74:	80 93 3b 03 	sts	0x033B, r24
     e78:	8f e7       	ldi	r24, 0x7F	; 127
     e7a:	99 ea       	ldi	r25, 0xA9	; 169
     e7c:	a3 e0       	ldi	r26, 0x03	; 3
     e7e:	81 50       	subi	r24, 0x01	; 1
     e80:	90 40       	sbci	r25, 0x00	; 0
     e82:	a0 40       	sbci	r26, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <main+0x450>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <main+0x45a>
     e88:	00 00       	nop
		}
		_delay_ms(150);
		 counter=0;
     e8a:	10 92 40 03 	sts	0x0340, r1
     e8e:	10 92 3f 03 	sts	0x033F, r1
		 flag=0;
     e92:	10 92 3a 03 	sts	0x033A, r1
		 LCD_clear_screen();
     e96:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		 LCD_SEND_STRING("5) 14%..=0");
     e9a:	c1 01       	movw	r24, r2
     e9c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	90 e7       	ldi	r25, 0x70	; 112
     ea4:	a2 e0       	ldi	r26, 0x02	; 2
     ea6:	81 50       	subi	r24, 0x01	; 1
     ea8:	90 40       	sbci	r25, 0x00	; 0
     eaa:	a0 40       	sbci	r26, 0x00	; 0
     eac:	e1 f7       	brne	.-8      	; 0xea6 <main+0x478>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <main+0x482>
     eb0:	00 00       	nop
		 _delay_ms(100);
		 do
		 {
			 if (counter>=200)
			 {
				 flag=1;
     eb2:	dd 24       	eor	r13, r13
     eb4:	d3 94       	inc	r13
		 LCD_clear_screen();
		 LCD_SEND_STRING("5) 14%..=0");
		 _delay_ms(100);
		 do
		 {
			 if (counter>=200)
     eb6:	80 91 3f 03 	lds	r24, 0x033F
     eba:	90 91 40 03 	lds	r25, 0x0340
     ebe:	88 3c       	cpi	r24, 0xC8	; 200
     ec0:	91 05       	cpc	r25, r1
     ec2:	10 f0       	brcs	.+4      	; 0xec8 <main+0x49a>
			 {
				 flag=1;
     ec4:	d0 92 3a 03 	sts	0x033A, r13
			 }
			 value_read=keybad_u8read_press();
     ec8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
     ecc:	28 2f       	mov	r18, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
		 } while (value_read==notpassed && flag==0);
     ed0:	8f 3f       	cpi	r24, 0xFF	; 255
     ed2:	91 05       	cpc	r25, r1
     ed4:	c1 f4       	brne	.+48     	; 0xf06 <main+0x4d8>
     ed6:	80 91 3a 03 	lds	r24, 0x033A
     eda:	88 23       	and	r24, r24
     edc:	61 f3       	breq	.-40     	; 0xeb6 <main+0x488>
		 if (value_read==notpassed)
		 {
			 LCD_clear_screen();
     ede:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			 LCD_MOVE_CURSOR(2,4);
     ee2:	82 e0       	ldi	r24, 0x02	; 2
     ee4:	64 e0       	ldi	r22, 0x04	; 4
     ee6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			 LCD_SEND_STRING("time over");
     eea:	8b eb       	ldi	r24, 0xBB	; 187
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			 counter2++;
     ef2:	80 91 3b 03 	lds	r24, 0x033B
     ef6:	90 91 3c 03 	lds	r25, 0x033C
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	90 93 3c 03 	sts	0x033C, r25
     f00:	80 93 3b 03 	sts	0x033B, r24
     f04:	2d c0       	rjmp	.+90     	; 0xf60 <main+0x532>
		 }
		 else if (value_read=='7')
     f06:	87 33       	cpi	r24, 0x37	; 55
     f08:	91 05       	cpc	r25, r1
     f0a:	b9 f4       	brne	.+46     	; 0xf3a <main+0x50c>
		 {
			 LCD_SEND_CHAR(value_read);
     f0c:	82 2f       	mov	r24, r18
     f0e:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			 LCD_clear_screen();
     f12:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			 LCD_MOVE_CURSOR(2,4);
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	64 e0       	ldi	r22, 0x04	; 4
     f1a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			 LCD_SEND_STRING("well done");
     f1e:	85 ec       	ldi	r24, 0xC5	; 197
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			 counter1++;
     f26:	80 91 3d 03 	lds	r24, 0x033D
     f2a:	90 91 3e 03 	lds	r25, 0x033E
     f2e:	01 96       	adiw	r24, 0x01	; 1
     f30:	90 93 3e 03 	sts	0x033E, r25
     f34:	80 93 3d 03 	sts	0x033D, r24
     f38:	13 c0       	rjmp	.+38     	; 0xf60 <main+0x532>
		 }
		 else
		 {
			 LCD_clear_screen();
     f3a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			 LCD_MOVE_CURSOR(2,4);
     f3e:	82 e0       	ldi	r24, 0x02	; 2
     f40:	64 e0       	ldi	r22, 0x04	; 4
     f42:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			 LCD_SEND_STRING("wrong answer");
     f46:	8f ec       	ldi	r24, 0xCF	; 207
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			 counter2++;
     f4e:	80 91 3b 03 	lds	r24, 0x033B
     f52:	90 91 3c 03 	lds	r25, 0x033C
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	90 93 3c 03 	sts	0x033C, r25
     f5c:	80 93 3b 03 	sts	0x033B, r24
     f60:	8f e7       	ldi	r24, 0x7F	; 127
     f62:	99 ea       	ldi	r25, 0xA9	; 169
     f64:	a3 e0       	ldi	r26, 0x03	; 3
     f66:	81 50       	subi	r24, 0x01	; 1
     f68:	90 40       	sbci	r25, 0x00	; 0
     f6a:	a0 40       	sbci	r26, 0x00	; 0
     f6c:	e1 f7       	brne	.-8      	; 0xf66 <main+0x538>
     f6e:	00 c0       	rjmp	.+0      	; 0xf70 <main+0x542>
     f70:	00 00       	nop
		 }
		 _delay_ms(150);
		  counter=0;
     f72:	10 92 40 03 	sts	0x0340, r1
     f76:	10 92 3f 03 	sts	0x033F, r1
		  flag=0;
     f7a:	10 92 3a 03 	sts	0x033A, r1
		  LCD_clear_screen();
     f7e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		  LCD_SEND_STRING("6) 50+4+...=60");
     f82:	8a e0       	ldi	r24, 0x0A	; 10
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	90 e7       	ldi	r25, 0x70	; 112
     f8e:	a2 e0       	ldi	r26, 0x02	; 2
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	90 40       	sbci	r25, 0x00	; 0
     f94:	a0 40       	sbci	r26, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <main+0x562>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <main+0x56c>
     f9a:	00 00       	nop
		  _delay_ms(100);
		  do
		  {
			  if (counter>=200)
			  {
				  flag=1;
     f9c:	dd 24       	eor	r13, r13
     f9e:	d3 94       	inc	r13
		  LCD_clear_screen();
		  LCD_SEND_STRING("6) 50+4+...=60");
		  _delay_ms(100);
		  do
		  {
			  if (counter>=200)
     fa0:	80 91 3f 03 	lds	r24, 0x033F
     fa4:	90 91 40 03 	lds	r25, 0x0340
     fa8:	88 3c       	cpi	r24, 0xC8	; 200
     faa:	91 05       	cpc	r25, r1
     fac:	10 f0       	brcs	.+4      	; 0xfb2 <main+0x584>
			  {
				  flag=1;
     fae:	d0 92 3a 03 	sts	0x033A, r13
			  }
			  value_read=keybad_u8read_press();
     fb2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
     fb6:	28 2f       	mov	r18, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
		  } while (value_read==notpassed && flag==0);
     fba:	8f 3f       	cpi	r24, 0xFF	; 255
     fbc:	91 05       	cpc	r25, r1
     fbe:	c1 f4       	brne	.+48     	; 0xff0 <main+0x5c2>
     fc0:	80 91 3a 03 	lds	r24, 0x033A
     fc4:	88 23       	and	r24, r24
     fc6:	61 f3       	breq	.-40     	; 0xfa0 <main+0x572>
		  if (value_read==notpassed)
		  {
			  LCD_clear_screen();
     fc8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			  LCD_MOVE_CURSOR(2,4);
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	64 e0       	ldi	r22, 0x04	; 4
     fd0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			  LCD_SEND_STRING("time over");
     fd4:	8b eb       	ldi	r24, 0xBB	; 187
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			  counter2++;
     fdc:	80 91 3b 03 	lds	r24, 0x033B
     fe0:	90 91 3c 03 	lds	r25, 0x033C
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	90 93 3c 03 	sts	0x033C, r25
     fea:	80 93 3b 03 	sts	0x033B, r24
     fee:	2d c0       	rjmp	.+90     	; 0x104a <main+0x61c>
		  }
		  else if (value_read=='6')
     ff0:	86 33       	cpi	r24, 0x36	; 54
     ff2:	91 05       	cpc	r25, r1
     ff4:	b9 f4       	brne	.+46     	; 0x1024 <main+0x5f6>
		  {
			  LCD_SEND_CHAR(value_read);
     ff6:	82 2f       	mov	r24, r18
     ff8:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			  LCD_clear_screen();
     ffc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			  LCD_MOVE_CURSOR(2,4);
    1000:	82 e0       	ldi	r24, 0x02	; 2
    1002:	64 e0       	ldi	r22, 0x04	; 4
    1004:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			  LCD_SEND_STRING("well done");
    1008:	85 ec       	ldi	r24, 0xC5	; 197
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			  counter1++;
    1010:	80 91 3d 03 	lds	r24, 0x033D
    1014:	90 91 3e 03 	lds	r25, 0x033E
    1018:	01 96       	adiw	r24, 0x01	; 1
    101a:	90 93 3e 03 	sts	0x033E, r25
    101e:	80 93 3d 03 	sts	0x033D, r24
    1022:	13 c0       	rjmp	.+38     	; 0x104a <main+0x61c>
		  }
		  else
		  {
			  LCD_clear_screen();
    1024:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			  LCD_MOVE_CURSOR(2,4);
    1028:	82 e0       	ldi	r24, 0x02	; 2
    102a:	64 e0       	ldi	r22, 0x04	; 4
    102c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			  LCD_SEND_STRING("wrong answer");
    1030:	8f ec       	ldi	r24, 0xCF	; 207
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			  counter2++;
    1038:	80 91 3b 03 	lds	r24, 0x033B
    103c:	90 91 3c 03 	lds	r25, 0x033C
    1040:	01 96       	adiw	r24, 0x01	; 1
    1042:	90 93 3c 03 	sts	0x033C, r25
    1046:	80 93 3b 03 	sts	0x033B, r24
    104a:	8f e7       	ldi	r24, 0x7F	; 127
    104c:	99 ea       	ldi	r25, 0xA9	; 169
    104e:	a3 e0       	ldi	r26, 0x03	; 3
    1050:	81 50       	subi	r24, 0x01	; 1
    1052:	90 40       	sbci	r25, 0x00	; 0
    1054:	a0 40       	sbci	r26, 0x00	; 0
    1056:	e1 f7       	brne	.-8      	; 0x1050 <main+0x622>
    1058:	00 c0       	rjmp	.+0      	; 0x105a <main+0x62c>
    105a:	00 00       	nop
		  }
		   _delay_ms(150);
		   counter=0;
    105c:	10 92 40 03 	sts	0x0340, r1
    1060:	10 92 3f 03 	sts	0x033F, r1
		   flag=0;
    1064:	10 92 3a 03 	sts	0x033A, r1
		   LCD_clear_screen();
    1068:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_SEND_STRING("7) 50*2+...=108");
    106c:	89 e1       	ldi	r24, 0x19	; 25
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	90 e7       	ldi	r25, 0x70	; 112
    1078:	a2 e0       	ldi	r26, 0x02	; 2
    107a:	81 50       	subi	r24, 0x01	; 1
    107c:	90 40       	sbci	r25, 0x00	; 0
    107e:	a0 40       	sbci	r26, 0x00	; 0
    1080:	e1 f7       	brne	.-8      	; 0x107a <main+0x64c>
    1082:	00 c0       	rjmp	.+0      	; 0x1084 <main+0x656>
    1084:	00 00       	nop
		   _delay_ms(100);
		   do
		   {
			   if (counter>=200)
			   {
				   flag=1;
    1086:	dd 24       	eor	r13, r13
    1088:	d3 94       	inc	r13
		   LCD_clear_screen();
		   LCD_SEND_STRING("7) 50*2+...=108");
		   _delay_ms(100);
		   do
		   {
			   if (counter>=200)
    108a:	80 91 3f 03 	lds	r24, 0x033F
    108e:	90 91 40 03 	lds	r25, 0x0340
    1092:	88 3c       	cpi	r24, 0xC8	; 200
    1094:	91 05       	cpc	r25, r1
    1096:	10 f0       	brcs	.+4      	; 0x109c <main+0x66e>
			   {
				   flag=1;
    1098:	d0 92 3a 03 	sts	0x033A, r13
			   }
			   value_read=keybad_u8read_press();
    109c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    10a0:	28 2f       	mov	r18, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
		   } while (value_read==notpassed && flag==0);
    10a4:	8f 3f       	cpi	r24, 0xFF	; 255
    10a6:	91 05       	cpc	r25, r1
    10a8:	c1 f4       	brne	.+48     	; 0x10da <main+0x6ac>
    10aa:	80 91 3a 03 	lds	r24, 0x033A
    10ae:	88 23       	and	r24, r24
    10b0:	61 f3       	breq	.-40     	; 0x108a <main+0x65c>
		   if (value_read==notpassed)
		   {
			   LCD_clear_screen();
    10b2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			   LCD_MOVE_CURSOR(2,4);
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	64 e0       	ldi	r22, 0x04	; 4
    10ba:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			   LCD_SEND_STRING("time over");
    10be:	8b eb       	ldi	r24, 0xBB	; 187
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			   counter2++;
    10c6:	80 91 3b 03 	lds	r24, 0x033B
    10ca:	90 91 3c 03 	lds	r25, 0x033C
    10ce:	01 96       	adiw	r24, 0x01	; 1
    10d0:	90 93 3c 03 	sts	0x033C, r25
    10d4:	80 93 3b 03 	sts	0x033B, r24
    10d8:	2d c0       	rjmp	.+90     	; 0x1134 <main+0x706>
		   }
		   else if (value_read=='8')
    10da:	88 33       	cpi	r24, 0x38	; 56
    10dc:	91 05       	cpc	r25, r1
    10de:	b9 f4       	brne	.+46     	; 0x110e <main+0x6e0>
		   {
			   LCD_SEND_CHAR(value_read);
    10e0:	82 2f       	mov	r24, r18
    10e2:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			   LCD_clear_screen();
    10e6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			   LCD_MOVE_CURSOR(2,4);
    10ea:	82 e0       	ldi	r24, 0x02	; 2
    10ec:	64 e0       	ldi	r22, 0x04	; 4
    10ee:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			   LCD_SEND_STRING("well done");
    10f2:	85 ec       	ldi	r24, 0xC5	; 197
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			   counter1++;
    10fa:	80 91 3d 03 	lds	r24, 0x033D
    10fe:	90 91 3e 03 	lds	r25, 0x033E
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	90 93 3e 03 	sts	0x033E, r25
    1108:	80 93 3d 03 	sts	0x033D, r24
    110c:	13 c0       	rjmp	.+38     	; 0x1134 <main+0x706>
		   }
		   else
		   {
			   LCD_clear_screen();
    110e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			   LCD_MOVE_CURSOR(2,4);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	64 e0       	ldi	r22, 0x04	; 4
    1116:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			   LCD_SEND_STRING("wrong answer");
    111a:	8f ec       	ldi	r24, 0xCF	; 207
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			   counter2++;
    1122:	80 91 3b 03 	lds	r24, 0x033B
    1126:	90 91 3c 03 	lds	r25, 0x033C
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	90 93 3c 03 	sts	0x033C, r25
    1130:	80 93 3b 03 	sts	0x033B, r24
    1134:	8f e7       	ldi	r24, 0x7F	; 127
    1136:	99 ea       	ldi	r25, 0xA9	; 169
    1138:	a3 e0       	ldi	r26, 0x03	; 3
    113a:	81 50       	subi	r24, 0x01	; 1
    113c:	90 40       	sbci	r25, 0x00	; 0
    113e:	a0 40       	sbci	r26, 0x00	; 0
    1140:	e1 f7       	brne	.-8      	; 0x113a <main+0x70c>
    1142:	00 c0       	rjmp	.+0      	; 0x1144 <main+0x716>
    1144:	00 00       	nop
		   }
		   _delay_ms(150);
		   counter=0;
    1146:	10 92 40 03 	sts	0x0340, r1
    114a:	10 92 3f 03 	sts	0x033F, r1
		   flag=0;
    114e:	10 92 3a 03 	sts	0x033A, r1
		   LCD_clear_screen();
    1152:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		   LCD_SEND_STRING("8) 14+4-1*...=14");
    1156:	89 e2       	ldi	r24, 0x29	; 41
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	90 e7       	ldi	r25, 0x70	; 112
    1162:	a2 e0       	ldi	r26, 0x02	; 2
    1164:	81 50       	subi	r24, 0x01	; 1
    1166:	90 40       	sbci	r25, 0x00	; 0
    1168:	a0 40       	sbci	r26, 0x00	; 0
    116a:	e1 f7       	brne	.-8      	; 0x1164 <main+0x736>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <main+0x740>
    116e:	00 00       	nop
		   _delay_ms(100);
		   do
		   {
			   if (counter>=200)
			   {
				   flag=1;
    1170:	dd 24       	eor	r13, r13
    1172:	d3 94       	inc	r13
		   LCD_clear_screen();
		   LCD_SEND_STRING("8) 14+4-1*...=14");
		   _delay_ms(100);
		   do
		   {
			   if (counter>=200)
    1174:	80 91 3f 03 	lds	r24, 0x033F
    1178:	90 91 40 03 	lds	r25, 0x0340
    117c:	88 3c       	cpi	r24, 0xC8	; 200
    117e:	91 05       	cpc	r25, r1
    1180:	10 f0       	brcs	.+4      	; 0x1186 <main+0x758>
			   {
				   flag=1;
    1182:	d0 92 3a 03 	sts	0x033A, r13
			   }
			   value_read=keybad_u8read_press();
    1186:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    118a:	28 2f       	mov	r18, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
		   } while (value_read==notpassed && flag==0);
    118e:	8f 3f       	cpi	r24, 0xFF	; 255
    1190:	91 05       	cpc	r25, r1
    1192:	c1 f4       	brne	.+48     	; 0x11c4 <main+0x796>
    1194:	80 91 3a 03 	lds	r24, 0x033A
    1198:	88 23       	and	r24, r24
    119a:	61 f3       	breq	.-40     	; 0x1174 <main+0x746>
		   if (value_read==notpassed)
		   {
			   LCD_clear_screen();
    119c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			   LCD_MOVE_CURSOR(2,4);
    11a0:	82 e0       	ldi	r24, 0x02	; 2
    11a2:	64 e0       	ldi	r22, 0x04	; 4
    11a4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			   LCD_SEND_STRING("time over");
    11a8:	8b eb       	ldi	r24, 0xBB	; 187
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			   counter2++;
    11b0:	80 91 3b 03 	lds	r24, 0x033B
    11b4:	90 91 3c 03 	lds	r25, 0x033C
    11b8:	01 96       	adiw	r24, 0x01	; 1
    11ba:	90 93 3c 03 	sts	0x033C, r25
    11be:	80 93 3b 03 	sts	0x033B, r24
    11c2:	2d c0       	rjmp	.+90     	; 0x121e <main+0x7f0>
		   }
		   else if (value_read=='4')
    11c4:	84 33       	cpi	r24, 0x34	; 52
    11c6:	91 05       	cpc	r25, r1
    11c8:	b9 f4       	brne	.+46     	; 0x11f8 <main+0x7ca>
		   {
			   LCD_SEND_CHAR(value_read);
    11ca:	82 2f       	mov	r24, r18
    11cc:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			   LCD_clear_screen();
    11d0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			   LCD_MOVE_CURSOR(2,4);
    11d4:	82 e0       	ldi	r24, 0x02	; 2
    11d6:	64 e0       	ldi	r22, 0x04	; 4
    11d8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			   LCD_SEND_STRING("well done");
    11dc:	85 ec       	ldi	r24, 0xC5	; 197
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			   counter1++;
    11e4:	80 91 3d 03 	lds	r24, 0x033D
    11e8:	90 91 3e 03 	lds	r25, 0x033E
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	90 93 3e 03 	sts	0x033E, r25
    11f2:	80 93 3d 03 	sts	0x033D, r24
    11f6:	13 c0       	rjmp	.+38     	; 0x121e <main+0x7f0>
		   }
		   else
		   {
			   LCD_clear_screen();
    11f8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			   LCD_MOVE_CURSOR(2,4);
    11fc:	82 e0       	ldi	r24, 0x02	; 2
    11fe:	64 e0       	ldi	r22, 0x04	; 4
    1200:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			   LCD_SEND_STRING("wrong answer");
    1204:	8f ec       	ldi	r24, 0xCF	; 207
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			   counter2++;
    120c:	80 91 3b 03 	lds	r24, 0x033B
    1210:	90 91 3c 03 	lds	r25, 0x033C
    1214:	01 96       	adiw	r24, 0x01	; 1
    1216:	90 93 3c 03 	sts	0x033C, r25
    121a:	80 93 3b 03 	sts	0x033B, r24
    121e:	8f e7       	ldi	r24, 0x7F	; 127
    1220:	99 ea       	ldi	r25, 0xA9	; 169
    1222:	a3 e0       	ldi	r26, 0x03	; 3
    1224:	81 50       	subi	r24, 0x01	; 1
    1226:	90 40       	sbci	r25, 0x00	; 0
    1228:	a0 40       	sbci	r26, 0x00	; 0
    122a:	e1 f7       	brne	.-8      	; 0x1224 <main+0x7f6>
    122c:	00 c0       	rjmp	.+0      	; 0x122e <main+0x800>
    122e:	00 00       	nop
		   }
			_delay_ms(150);
			counter=0;
    1230:	10 92 40 03 	sts	0x0340, r1
    1234:	10 92 3f 03 	sts	0x033F, r1
			flag=0;
    1238:	10 92 3a 03 	sts	0x033A, r1
			LCD_clear_screen();
    123c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_SEND_STRING("9) 1*4+10/...=9");
    1240:	8a e3       	ldi	r24, 0x3A	; 58
    1242:	91 e0       	ldi	r25, 0x01	; 1
    1244:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	90 e7       	ldi	r25, 0x70	; 112
    124c:	a2 e0       	ldi	r26, 0x02	; 2
    124e:	81 50       	subi	r24, 0x01	; 1
    1250:	90 40       	sbci	r25, 0x00	; 0
    1252:	a0 40       	sbci	r26, 0x00	; 0
    1254:	e1 f7       	brne	.-8      	; 0x124e <main+0x820>
    1256:	00 c0       	rjmp	.+0      	; 0x1258 <main+0x82a>
    1258:	00 00       	nop
			_delay_ms(100);
			do
			{
				if (counter>=200)
				{
					flag=1;
    125a:	dd 24       	eor	r13, r13
    125c:	d3 94       	inc	r13
			LCD_clear_screen();
			LCD_SEND_STRING("9) 1*4+10/...=9");
			_delay_ms(100);
			do
			{
				if (counter>=200)
    125e:	80 91 3f 03 	lds	r24, 0x033F
    1262:	90 91 40 03 	lds	r25, 0x0340
    1266:	88 3c       	cpi	r24, 0xC8	; 200
    1268:	91 05       	cpc	r25, r1
    126a:	10 f0       	brcs	.+4      	; 0x1270 <main+0x842>
				{
					flag=1;
    126c:	d0 92 3a 03 	sts	0x033A, r13
				}
				value_read=keybad_u8read_press();
    1270:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1274:	28 2f       	mov	r18, r24
    1276:	90 e0       	ldi	r25, 0x00	; 0
			} while (value_read==notpassed && flag==0);
    1278:	8f 3f       	cpi	r24, 0xFF	; 255
    127a:	91 05       	cpc	r25, r1
    127c:	c1 f4       	brne	.+48     	; 0x12ae <main+0x880>
    127e:	80 91 3a 03 	lds	r24, 0x033A
    1282:	88 23       	and	r24, r24
    1284:	61 f3       	breq	.-40     	; 0x125e <main+0x830>
			if (value_read==notpassed)
			{
				LCD_clear_screen();
    1286:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_MOVE_CURSOR(2,4);
    128a:	82 e0       	ldi	r24, 0x02	; 2
    128c:	64 e0       	ldi	r22, 0x04	; 4
    128e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("time over");
    1292:	8b eb       	ldi	r24, 0xBB	; 187
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				counter2++;
    129a:	80 91 3b 03 	lds	r24, 0x033B
    129e:	90 91 3c 03 	lds	r25, 0x033C
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	90 93 3c 03 	sts	0x033C, r25
    12a8:	80 93 3b 03 	sts	0x033B, r24
    12ac:	2d c0       	rjmp	.+90     	; 0x1308 <main+0x8da>
			}
			else if (value_read=='2')
    12ae:	82 33       	cpi	r24, 0x32	; 50
    12b0:	91 05       	cpc	r25, r1
    12b2:	b9 f4       	brne	.+46     	; 0x12e2 <main+0x8b4>
			{
				LCD_SEND_CHAR(value_read);
    12b4:	82 2f       	mov	r24, r18
    12b6:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
				LCD_clear_screen();
    12ba:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_MOVE_CURSOR(2,4);
    12be:	82 e0       	ldi	r24, 0x02	; 2
    12c0:	64 e0       	ldi	r22, 0x04	; 4
    12c2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("well done");
    12c6:	85 ec       	ldi	r24, 0xC5	; 197
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				counter1++;
    12ce:	80 91 3d 03 	lds	r24, 0x033D
    12d2:	90 91 3e 03 	lds	r25, 0x033E
    12d6:	01 96       	adiw	r24, 0x01	; 1
    12d8:	90 93 3e 03 	sts	0x033E, r25
    12dc:	80 93 3d 03 	sts	0x033D, r24
    12e0:	13 c0       	rjmp	.+38     	; 0x1308 <main+0x8da>
			}
			else
			{
				LCD_clear_screen();
    12e2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_MOVE_CURSOR(2,4);
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	64 e0       	ldi	r22, 0x04	; 4
    12ea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("wrong answer");
    12ee:	8f ec       	ldi	r24, 0xCF	; 207
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				counter2++;
    12f6:	80 91 3b 03 	lds	r24, 0x033B
    12fa:	90 91 3c 03 	lds	r25, 0x033C
    12fe:	01 96       	adiw	r24, 0x01	; 1
    1300:	90 93 3c 03 	sts	0x033C, r25
    1304:	80 93 3b 03 	sts	0x033B, r24
    1308:	8f e7       	ldi	r24, 0x7F	; 127
    130a:	99 ea       	ldi	r25, 0xA9	; 169
    130c:	a3 e0       	ldi	r26, 0x03	; 3
    130e:	81 50       	subi	r24, 0x01	; 1
    1310:	90 40       	sbci	r25, 0x00	; 0
    1312:	a0 40       	sbci	r26, 0x00	; 0
    1314:	e1 f7       	brne	.-8      	; 0x130e <main+0x8e0>
    1316:	00 c0       	rjmp	.+0      	; 0x1318 <main+0x8ea>
    1318:	00 00       	nop
			}
			 _delay_ms(150);
			 counter=0;
    131a:	10 92 40 03 	sts	0x0340, r1
    131e:	10 92 3f 03 	sts	0x033F, r1
			 flag=0;
    1322:	10 92 3a 03 	sts	0x033A, r1
			 LCD_clear_screen();
    1326:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			 LCD_SEND_STRING("10) 14-4/1+..=10");
    132a:	8a e4       	ldi	r24, 0x4A	; 74
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1332:	8f ef       	ldi	r24, 0xFF	; 255
    1334:	90 e7       	ldi	r25, 0x70	; 112
    1336:	a2 e0       	ldi	r26, 0x02	; 2
    1338:	81 50       	subi	r24, 0x01	; 1
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	a0 40       	sbci	r26, 0x00	; 0
    133e:	e1 f7       	brne	.-8      	; 0x1338 <main+0x90a>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <main+0x914>
    1342:	00 00       	nop
			 _delay_ms(100);
			 do
			 {
				 if (counter>=200)
				 {
					 flag=1;
    1344:	dd 24       	eor	r13, r13
    1346:	d3 94       	inc	r13
			 LCD_clear_screen();
			 LCD_SEND_STRING("10) 14-4/1+..=10");
			 _delay_ms(100);
			 do
			 {
				 if (counter>=200)
    1348:	80 91 3f 03 	lds	r24, 0x033F
    134c:	90 91 40 03 	lds	r25, 0x0340
    1350:	88 3c       	cpi	r24, 0xC8	; 200
    1352:	91 05       	cpc	r25, r1
    1354:	10 f0       	brcs	.+4      	; 0x135a <main+0x92c>
				 {
					 flag=1;
    1356:	d0 92 3a 03 	sts	0x033A, r13
				 }
				 value_read=keybad_u8read_press();
    135a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    135e:	28 2f       	mov	r18, r24
    1360:	90 e0       	ldi	r25, 0x00	; 0
			 } while (value_read==notpassed && flag==0);
    1362:	8f 3f       	cpi	r24, 0xFF	; 255
    1364:	91 05       	cpc	r25, r1
    1366:	c1 f4       	brne	.+48     	; 0x1398 <main+0x96a>
    1368:	80 91 3a 03 	lds	r24, 0x033A
    136c:	88 23       	and	r24, r24
    136e:	61 f3       	breq	.-40     	; 0x1348 <main+0x91a>
			 if (value_read==notpassed)
			 {
				 LCD_clear_screen();
    1370:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				 LCD_MOVE_CURSOR(2,4);
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	64 e0       	ldi	r22, 0x04	; 4
    1378:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				 LCD_SEND_STRING("time over");
    137c:	8b eb       	ldi	r24, 0xBB	; 187
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				 counter2++;
    1384:	80 91 3b 03 	lds	r24, 0x033B
    1388:	90 91 3c 03 	lds	r25, 0x033C
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	90 93 3c 03 	sts	0x033C, r25
    1392:	80 93 3b 03 	sts	0x033B, r24
    1396:	2d c0       	rjmp	.+90     	; 0x13f2 <main+0x9c4>
			 }
			 else if (value_read=='0')
    1398:	80 33       	cpi	r24, 0x30	; 48
    139a:	91 05       	cpc	r25, r1
    139c:	b9 f4       	brne	.+46     	; 0x13cc <main+0x99e>
			 {
				 LCD_SEND_CHAR(value_read);
    139e:	82 2f       	mov	r24, r18
    13a0:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
				 LCD_clear_screen();
    13a4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				 LCD_MOVE_CURSOR(2,4);
    13a8:	82 e0       	ldi	r24, 0x02	; 2
    13aa:	64 e0       	ldi	r22, 0x04	; 4
    13ac:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				 LCD_SEND_STRING("well done");
    13b0:	85 ec       	ldi	r24, 0xC5	; 197
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				 counter1++;
    13b8:	80 91 3d 03 	lds	r24, 0x033D
    13bc:	90 91 3e 03 	lds	r25, 0x033E
    13c0:	01 96       	adiw	r24, 0x01	; 1
    13c2:	90 93 3e 03 	sts	0x033E, r25
    13c6:	80 93 3d 03 	sts	0x033D, r24
    13ca:	13 c0       	rjmp	.+38     	; 0x13f2 <main+0x9c4>
			 }
			 else
			 {
				 LCD_clear_screen();
    13cc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				 LCD_MOVE_CURSOR(2,4);
    13d0:	82 e0       	ldi	r24, 0x02	; 2
    13d2:	64 e0       	ldi	r22, 0x04	; 4
    13d4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				 LCD_SEND_STRING("wrong answer");
    13d8:	8f ec       	ldi	r24, 0xCF	; 207
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				 counter2++;
    13e0:	80 91 3b 03 	lds	r24, 0x033B
    13e4:	90 91 3c 03 	lds	r25, 0x033C
    13e8:	01 96       	adiw	r24, 0x01	; 1
    13ea:	90 93 3c 03 	sts	0x033C, r25
    13ee:	80 93 3b 03 	sts	0x033B, r24
    13f2:	8f e7       	ldi	r24, 0x7F	; 127
    13f4:	99 ea       	ldi	r25, 0xA9	; 169
    13f6:	a3 e0       	ldi	r26, 0x03	; 3
    13f8:	81 50       	subi	r24, 0x01	; 1
    13fa:	90 40       	sbci	r25, 0x00	; 0
    13fc:	a0 40       	sbci	r26, 0x00	; 0
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <main+0x9ca>
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <main+0x9d4>
    1402:	00 00       	nop
			 }
			_delay_ms(150);
			 LCD_clear_screen();
    1404:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_SEND_STRING("the correct=");
    1408:	8b e5       	ldi	r24, 0x5B	; 91
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			LCD_MOVE_CURSOR(1,13);
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	6d e0       	ldi	r22, 0x0D	; 13
    1414:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_CHAR(counter1+48);
    1418:	80 91 3d 03 	lds	r24, 0x033D
    141c:	90 91 3e 03 	lds	r25, 0x033E
    1420:	80 5d       	subi	r24, 0xD0	; 208
    1422:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_MOVE_CURSOR(2,1);
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	61 e0       	ldi	r22, 0x01	; 1
    142a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("the wrong=");
    142e:	88 e6       	ldi	r24, 0x68	; 104
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			LCD_MOVE_CURSOR(2,11);
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	6b e0       	ldi	r22, 0x0B	; 11
    143a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_CHAR(counter2+48);
    143e:	80 91 3b 03 	lds	r24, 0x033B
    1442:	90 91 3c 03 	lds	r25, 0x033C
    1446:	80 5d       	subi	r24, 0xD0	; 208
    1448:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
    144c:	8f ef       	ldi	r24, 0xFF	; 255
    144e:	97 e8       	ldi	r25, 0x87	; 135
    1450:	a3 e1       	ldi	r26, 0x13	; 19
    1452:	81 50       	subi	r24, 0x01	; 1
    1454:	90 40       	sbci	r25, 0x00	; 0
    1456:	a0 40       	sbci	r26, 0x00	; 0
    1458:	e1 f7       	brne	.-8      	; 0x1452 <main+0xa24>
    145a:	00 c0       	rjmp	.+0      	; 0x145c <main+0xa2e>
    145c:	00 00       	nop
			_delay_ms(800);
			LCD_clear_screen();
    145e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			if(counter1>counter2)
    1462:	80 91 3d 03 	lds	r24, 0x033D
    1466:	90 91 3e 03 	lds	r25, 0x033E
    146a:	20 91 3b 03 	lds	r18, 0x033B
    146e:	30 91 3c 03 	lds	r19, 0x033C
    1472:	28 17       	cp	r18, r24
    1474:	39 07       	cpc	r19, r25
    1476:	58 f5       	brcc	.+86     	; 0x14ce <main+0xaa0>
			{
			counter=0;
    1478:	10 92 40 03 	sts	0x0340, r1
    147c:	10 92 3f 03 	sts	0x033F, r1
			counter1=0;
    1480:	10 92 3e 03 	sts	0x033E, r1
    1484:	10 92 3d 03 	sts	0x033D, r1
			counter2=0;
    1488:	10 92 3c 03 	sts	0x033C, r1
    148c:	10 92 3b 03 	sts	0x033B, r1
			LCD_SEND_STRING("succed");
    1490:	83 e7       	ldi	r24, 0x73	; 115
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1498:	8f e7       	ldi	r24, 0x7F	; 127
    149a:	99 ea       	ldi	r25, 0xA9	; 169
    149c:	a3 e0       	ldi	r26, 0x03	; 3
    149e:	81 50       	subi	r24, 0x01	; 1
    14a0:	90 40       	sbci	r25, 0x00	; 0
    14a2:	a0 40       	sbci	r26, 0x00	; 0
    14a4:	e1 f7       	brne	.-8      	; 0x149e <main+0xa70>
    14a6:	00 c0       	rjmp	.+0      	; 0x14a8 <main+0xa7a>
    14a8:	00 00       	nop
			_delay_ms(150);
			LCD_clear_screen();
    14aa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_SEND_STRING("up to test(2)");	
    14ae:	8a e7       	ldi	r24, 0x7A	; 122
    14b0:	91 e0       	ldi	r25, 0x01	; 1
    14b2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	91 ee       	ldi	r25, 0xE1	; 225
    14ba:	a4 e0       	ldi	r26, 0x04	; 4
    14bc:	81 50       	subi	r24, 0x01	; 1
    14be:	90 40       	sbci	r25, 0x00	; 0
    14c0:	a0 40       	sbci	r26, 0x00	; 0
    14c2:	e1 f7       	brne	.-8      	; 0x14bc <main+0xa8e>
    14c4:	00 c0       	rjmp	.+0      	; 0x14c6 <main+0xa98>
    14c6:	00 00       	nop
			_delay_ms(200);
			LCD_clear_screen();
    14c8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
    14cc:	f7 ca       	rjmp	.-2578   	; 0xabc <main+0x8e>
			}
			else
			{
				flag1=0;
    14ce:	10 92 39 03 	sts	0x0339, r1
				LCD_MOVE_CURSOR(1,5);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	65 e0       	ldi	r22, 0x05	; 5
    14d6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("failed");
    14da:	88 e8       	ldi	r24, 0x88	; 136
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(2,4);
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	64 e0       	ldi	r22, 0x04	; 4
    14e6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("Try again");
    14ea:	8f e8       	ldi	r24, 0x8F	; 143
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	93 ec       	ldi	r25, 0xC3	; 195
    14f6:	a9 e0       	ldi	r26, 0x09	; 9
    14f8:	81 50       	subi	r24, 0x01	; 1
    14fa:	90 40       	sbci	r25, 0x00	; 0
    14fc:	a0 40       	sbci	r26, 0x00	; 0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <main+0xaca>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <main+0xad4>
    1502:	00 00       	nop
    1504:	db ca       	rjmp	.-2634   	; 0xabc <main+0x8e>
		
		
		
			
		
		else if (value_read == '2' )
    1506:	82 33       	cpi	r24, 0x32	; 50
    1508:	91 05       	cpc	r25, r1
    150a:	09 f0       	breq	.+2      	; 0x150e <main+0xae0>
    150c:	1e c5       	rjmp	.+2620   	; 0x1f4a <main+0x151c>
		{
			//counter=0;
			if (value_read == '2'&& flag1==1)
    150e:	80 91 39 03 	lds	r24, 0x0339
    1512:	81 30       	cpi	r24, 0x01	; 1
    1514:	09 f0       	breq	.+2      	; 0x1518 <main+0xaea>
    1516:	06 c5       	rjmp	.+2572   	; 0x1f24 <main+0x14f6>
			{
				counter=0;
    1518:	10 92 40 03 	sts	0x0340, r1
    151c:	10 92 3f 03 	sts	0x033F, r1
				LCD_clear_screen();
    1520:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_MOVE_CURSOR(1,4);
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	64 e0       	ldi	r22, 0x04	; 4
    1528:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("Test(2)");
    152c:	89 e9       	ldi	r24, 0x99	; 153
    152e:	91 e0       	ldi	r25, 0x01	; 1
    1530:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1534:	8f ef       	ldi	r24, 0xFF	; 255
    1536:	91 ee       	ldi	r25, 0xE1	; 225
    1538:	a4 e0       	ldi	r26, 0x04	; 4
    153a:	81 50       	subi	r24, 0x01	; 1
    153c:	90 40       	sbci	r25, 0x00	; 0
    153e:	a0 40       	sbci	r26, 0x00	; 0
    1540:	e1 f7       	brne	.-8      	; 0x153a <main+0xb0c>
    1542:	00 c0       	rjmp	.+0      	; 0x1544 <main+0xb16>
    1544:	00 00       	nop
				_delay_ms(200);
				LCD_clear_screen();
    1546:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("1) 3+5*2-..=10");
    154a:	81 ea       	ldi	r24, 0xA1	; 161
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				do
				{
					if (counter>=200)
					{
						flag=1;
    1552:	dd 24       	eor	r13, r13
    1554:	d3 94       	inc	r13
				_delay_ms(200);
				LCD_clear_screen();
				LCD_SEND_STRING("1) 3+5*2-..=10");
				do
				{
					if (counter>=200)
    1556:	80 91 3f 03 	lds	r24, 0x033F
    155a:	90 91 40 03 	lds	r25, 0x0340
    155e:	88 3c       	cpi	r24, 0xC8	; 200
    1560:	91 05       	cpc	r25, r1
    1562:	10 f0       	brcs	.+4      	; 0x1568 <main+0xb3a>
					{
						flag=1;
    1564:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    1568:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    156c:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    156e:	8f 3f       	cpi	r24, 0xFF	; 255
    1570:	91 05       	cpc	r25, r1
    1572:	c1 f4       	brne	.+48     	; 0x15a4 <main+0xb76>
    1574:	80 91 3a 03 	lds	r24, 0x033A
    1578:	88 23       	and	r24, r24
    157a:	69 f3       	breq	.-38     	; 0x1556 <main+0xb28>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    157c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1580:	82 e0       	ldi	r24, 0x02	; 2
    1582:	64 e0       	ldi	r22, 0x04	; 4
    1584:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    1588:	8b eb       	ldi	r24, 0xBB	; 187
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1590:	80 91 3b 03 	lds	r24, 0x033B
    1594:	90 91 3c 03 	lds	r25, 0x033C
    1598:	01 96       	adiw	r24, 0x01	; 1
    159a:	90 93 3c 03 	sts	0x033C, r25
    159e:	80 93 3b 03 	sts	0x033B, r24
    15a2:	2a c0       	rjmp	.+84     	; 0x15f8 <main+0xbca>
				}
				else if (value_read=='3')
    15a4:	83 33       	cpi	r24, 0x33	; 51
    15a6:	91 05       	cpc	r25, r1
    15a8:	a1 f4       	brne	.+40     	; 0x15d2 <main+0xba4>
				{
					LCD_clear_screen();
    15aa:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    15ae:	82 e0       	ldi	r24, 0x02	; 2
    15b0:	64 e0       	ldi	r22, 0x04	; 4
    15b2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    15b6:	85 ec       	ldi	r24, 0xC5	; 197
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    15be:	80 91 3d 03 	lds	r24, 0x033D
    15c2:	90 91 3e 03 	lds	r25, 0x033E
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	90 93 3e 03 	sts	0x033E, r25
    15cc:	80 93 3d 03 	sts	0x033D, r24
    15d0:	13 c0       	rjmp	.+38     	; 0x15f8 <main+0xbca>
				}
				else
				{
					LCD_clear_screen();
    15d2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    15d6:	82 e0       	ldi	r24, 0x02	; 2
    15d8:	64 e0       	ldi	r22, 0x04	; 4
    15da:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    15de:	8f ec       	ldi	r24, 0xCF	; 207
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    15e6:	80 91 3b 03 	lds	r24, 0x033B
    15ea:	90 91 3c 03 	lds	r25, 0x033C
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	90 93 3c 03 	sts	0x033C, r25
    15f4:	80 93 3b 03 	sts	0x033B, r24
    15f8:	8f e7       	ldi	r24, 0x7F	; 127
    15fa:	99 ea       	ldi	r25, 0xA9	; 169
    15fc:	a3 e0       	ldi	r26, 0x03	; 3
    15fe:	81 50       	subi	r24, 0x01	; 1
    1600:	90 40       	sbci	r25, 0x00	; 0
    1602:	a0 40       	sbci	r26, 0x00	; 0
    1604:	e1 f7       	brne	.-8      	; 0x15fe <main+0xbd0>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <main+0xbda>
    1608:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    160a:	10 92 40 03 	sts	0x0340, r1
    160e:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    1612:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    1616:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("2)16*2/4+..=10");
    161a:	80 eb       	ldi	r24, 0xB0	; 176
    161c:	91 e0       	ldi	r25, 0x01	; 1
    161e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1622:	8f ef       	ldi	r24, 0xFF	; 255
    1624:	90 e7       	ldi	r25, 0x70	; 112
    1626:	a2 e0       	ldi	r26, 0x02	; 2
    1628:	81 50       	subi	r24, 0x01	; 1
    162a:	90 40       	sbci	r25, 0x00	; 0
    162c:	a0 40       	sbci	r26, 0x00	; 0
    162e:	e1 f7       	brne	.-8      	; 0x1628 <main+0xbfa>
    1630:	00 c0       	rjmp	.+0      	; 0x1632 <main+0xc04>
    1632:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    1634:	dd 24       	eor	r13, r13
    1636:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("2)16*2/4+..=10");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    1638:	80 91 3f 03 	lds	r24, 0x033F
    163c:	90 91 40 03 	lds	r25, 0x0340
    1640:	88 3c       	cpi	r24, 0xC8	; 200
    1642:	91 05       	cpc	r25, r1
    1644:	10 f0       	brcs	.+4      	; 0x164a <main+0xc1c>
					{
						flag=1;
    1646:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    164a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    164e:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    1650:	8f 3f       	cpi	r24, 0xFF	; 255
    1652:	91 05       	cpc	r25, r1
    1654:	c1 f4       	brne	.+48     	; 0x1686 <main+0xc58>
    1656:	80 91 3a 03 	lds	r24, 0x033A
    165a:	88 23       	and	r24, r24
    165c:	69 f3       	breq	.-38     	; 0x1638 <main+0xc0a>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    165e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1662:	82 e0       	ldi	r24, 0x02	; 2
    1664:	64 e0       	ldi	r22, 0x04	; 4
    1666:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    166a:	8b eb       	ldi	r24, 0xBB	; 187
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1672:	80 91 3b 03 	lds	r24, 0x033B
    1676:	90 91 3c 03 	lds	r25, 0x033C
    167a:	01 96       	adiw	r24, 0x01	; 1
    167c:	90 93 3c 03 	sts	0x033C, r25
    1680:	80 93 3b 03 	sts	0x033B, r24
    1684:	2a c0       	rjmp	.+84     	; 0x16da <main+0xcac>
				}
				else if (value_read=='2')
    1686:	82 33       	cpi	r24, 0x32	; 50
    1688:	91 05       	cpc	r25, r1
    168a:	a1 f4       	brne	.+40     	; 0x16b4 <main+0xc86>
				{
					LCD_clear_screen();
    168c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1690:	82 e0       	ldi	r24, 0x02	; 2
    1692:	64 e0       	ldi	r22, 0x04	; 4
    1694:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    1698:	85 ec       	ldi	r24, 0xC5	; 197
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    16a0:	80 91 3d 03 	lds	r24, 0x033D
    16a4:	90 91 3e 03 	lds	r25, 0x033E
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	90 93 3e 03 	sts	0x033E, r25
    16ae:	80 93 3d 03 	sts	0x033D, r24
    16b2:	13 c0       	rjmp	.+38     	; 0x16da <main+0xcac>
				}
				else
				{
					LCD_clear_screen();
    16b4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    16b8:	82 e0       	ldi	r24, 0x02	; 2
    16ba:	64 e0       	ldi	r22, 0x04	; 4
    16bc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    16c0:	8f ec       	ldi	r24, 0xCF	; 207
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    16c8:	80 91 3b 03 	lds	r24, 0x033B
    16cc:	90 91 3c 03 	lds	r25, 0x033C
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	90 93 3c 03 	sts	0x033C, r25
    16d6:	80 93 3b 03 	sts	0x033B, r24
    16da:	8f e7       	ldi	r24, 0x7F	; 127
    16dc:	99 ea       	ldi	r25, 0xA9	; 169
    16de:	a3 e0       	ldi	r26, 0x03	; 3
    16e0:	81 50       	subi	r24, 0x01	; 1
    16e2:	90 40       	sbci	r25, 0x00	; 0
    16e4:	a0 40       	sbci	r26, 0x00	; 0
    16e6:	e1 f7       	brne	.-8      	; 0x16e0 <main+0xcb2>
    16e8:	00 c0       	rjmp	.+0      	; 0x16ea <main+0xcbc>
    16ea:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    16ec:	10 92 40 03 	sts	0x0340, r1
    16f0:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    16f4:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    16f8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("3)4+3*3-5+..=14");
    16fc:	8f eb       	ldi	r24, 0xBF	; 191
    16fe:	91 e0       	ldi	r25, 0x01	; 1
    1700:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1704:	8f ef       	ldi	r24, 0xFF	; 255
    1706:	90 e7       	ldi	r25, 0x70	; 112
    1708:	a2 e0       	ldi	r26, 0x02	; 2
    170a:	81 50       	subi	r24, 0x01	; 1
    170c:	90 40       	sbci	r25, 0x00	; 0
    170e:	a0 40       	sbci	r26, 0x00	; 0
    1710:	e1 f7       	brne	.-8      	; 0x170a <main+0xcdc>
    1712:	00 c0       	rjmp	.+0      	; 0x1714 <main+0xce6>
    1714:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    1716:	dd 24       	eor	r13, r13
    1718:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("3)4+3*3-5+..=14");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    171a:	80 91 3f 03 	lds	r24, 0x033F
    171e:	90 91 40 03 	lds	r25, 0x0340
    1722:	88 3c       	cpi	r24, 0xC8	; 200
    1724:	91 05       	cpc	r25, r1
    1726:	10 f0       	brcs	.+4      	; 0x172c <main+0xcfe>
					{
						flag=1;
    1728:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    172c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1730:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    1732:	8f 3f       	cpi	r24, 0xFF	; 255
    1734:	91 05       	cpc	r25, r1
    1736:	c1 f4       	brne	.+48     	; 0x1768 <main+0xd3a>
    1738:	80 91 3a 03 	lds	r24, 0x033A
    173c:	88 23       	and	r24, r24
    173e:	69 f3       	breq	.-38     	; 0x171a <main+0xcec>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    1740:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1744:	82 e0       	ldi	r24, 0x02	; 2
    1746:	64 e0       	ldi	r22, 0x04	; 4
    1748:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    174c:	8b eb       	ldi	r24, 0xBB	; 187
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1754:	80 91 3b 03 	lds	r24, 0x033B
    1758:	90 91 3c 03 	lds	r25, 0x033C
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	90 93 3c 03 	sts	0x033C, r25
    1762:	80 93 3b 03 	sts	0x033B, r24
    1766:	2a c0       	rjmp	.+84     	; 0x17bc <main+0xd8e>
				}
				else if (value_read=='6')
    1768:	86 33       	cpi	r24, 0x36	; 54
    176a:	91 05       	cpc	r25, r1
    176c:	a1 f4       	brne	.+40     	; 0x1796 <main+0xd68>
				{
					LCD_clear_screen();
    176e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1772:	82 e0       	ldi	r24, 0x02	; 2
    1774:	64 e0       	ldi	r22, 0x04	; 4
    1776:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    177a:	85 ec       	ldi	r24, 0xC5	; 197
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    1782:	80 91 3d 03 	lds	r24, 0x033D
    1786:	90 91 3e 03 	lds	r25, 0x033E
    178a:	01 96       	adiw	r24, 0x01	; 1
    178c:	90 93 3e 03 	sts	0x033E, r25
    1790:	80 93 3d 03 	sts	0x033D, r24
    1794:	13 c0       	rjmp	.+38     	; 0x17bc <main+0xd8e>
				}
				else
				{
					LCD_clear_screen();
    1796:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    179a:	82 e0       	ldi	r24, 0x02	; 2
    179c:	64 e0       	ldi	r22, 0x04	; 4
    179e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    17a2:	8f ec       	ldi	r24, 0xCF	; 207
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    17aa:	80 91 3b 03 	lds	r24, 0x033B
    17ae:	90 91 3c 03 	lds	r25, 0x033C
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	90 93 3c 03 	sts	0x033C, r25
    17b8:	80 93 3b 03 	sts	0x033B, r24
    17bc:	8f e7       	ldi	r24, 0x7F	; 127
    17be:	99 ea       	ldi	r25, 0xA9	; 169
    17c0:	a3 e0       	ldi	r26, 0x03	; 3
    17c2:	81 50       	subi	r24, 0x01	; 1
    17c4:	90 40       	sbci	r25, 0x00	; 0
    17c6:	a0 40       	sbci	r26, 0x00	; 0
    17c8:	e1 f7       	brne	.-8      	; 0x17c2 <main+0xd94>
    17ca:	00 c0       	rjmp	.+0      	; 0x17cc <main+0xd9e>
    17cc:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    17ce:	10 92 40 03 	sts	0x0340, r1
    17d2:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    17d6:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    17da:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("4)50/5+2*4-..=9");
    17de:	8f ec       	ldi	r24, 0xCF	; 207
    17e0:	91 e0       	ldi	r25, 0x01	; 1
    17e2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    17e6:	8f ef       	ldi	r24, 0xFF	; 255
    17e8:	90 e7       	ldi	r25, 0x70	; 112
    17ea:	a2 e0       	ldi	r26, 0x02	; 2
    17ec:	81 50       	subi	r24, 0x01	; 1
    17ee:	90 40       	sbci	r25, 0x00	; 0
    17f0:	a0 40       	sbci	r26, 0x00	; 0
    17f2:	e1 f7       	brne	.-8      	; 0x17ec <main+0xdbe>
    17f4:	00 c0       	rjmp	.+0      	; 0x17f6 <main+0xdc8>
    17f6:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    17f8:	dd 24       	eor	r13, r13
    17fa:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("4)50/5+2*4-..=9");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    17fc:	80 91 3f 03 	lds	r24, 0x033F
    1800:	90 91 40 03 	lds	r25, 0x0340
    1804:	88 3c       	cpi	r24, 0xC8	; 200
    1806:	91 05       	cpc	r25, r1
    1808:	10 f0       	brcs	.+4      	; 0x180e <main+0xde0>
					{
						flag=1;
    180a:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    180e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1812:	28 2f       	mov	r18, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    1816:	8f 3f       	cpi	r24, 0xFF	; 255
    1818:	91 05       	cpc	r25, r1
    181a:	c1 f4       	brne	.+48     	; 0x184c <main+0xe1e>
    181c:	80 91 3a 03 	lds	r24, 0x033A
    1820:	88 23       	and	r24, r24
    1822:	61 f3       	breq	.-40     	; 0x17fc <main+0xdce>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    1824:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1828:	82 e0       	ldi	r24, 0x02	; 2
    182a:	64 e0       	ldi	r22, 0x04	; 4
    182c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    1830:	8b eb       	ldi	r24, 0xBB	; 187
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1838:	80 91 3b 03 	lds	r24, 0x033B
    183c:	90 91 3c 03 	lds	r25, 0x033C
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	90 93 3c 03 	sts	0x033C, r25
    1846:	80 93 3b 03 	sts	0x033B, r24
    184a:	2d c0       	rjmp	.+90     	; 0x18a6 <main+0xe78>
				}
				else if (value_read=='9')
    184c:	89 33       	cpi	r24, 0x39	; 57
    184e:	91 05       	cpc	r25, r1
    1850:	b9 f4       	brne	.+46     	; 0x1880 <main+0xe52>
				{
					LCD_SEND_CHAR(value_read);
    1852:	82 2f       	mov	r24, r18
    1854:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
					LCD_clear_screen();
    1858:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	64 e0       	ldi	r22, 0x04	; 4
    1860:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    1864:	85 ec       	ldi	r24, 0xC5	; 197
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    186c:	80 91 3d 03 	lds	r24, 0x033D
    1870:	90 91 3e 03 	lds	r25, 0x033E
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	90 93 3e 03 	sts	0x033E, r25
    187a:	80 93 3d 03 	sts	0x033D, r24
    187e:	13 c0       	rjmp	.+38     	; 0x18a6 <main+0xe78>
				}
				else
				{
					LCD_clear_screen();
    1880:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1884:	82 e0       	ldi	r24, 0x02	; 2
    1886:	64 e0       	ldi	r22, 0x04	; 4
    1888:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    188c:	8f ec       	ldi	r24, 0xCF	; 207
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1894:	80 91 3b 03 	lds	r24, 0x033B
    1898:	90 91 3c 03 	lds	r25, 0x033C
    189c:	01 96       	adiw	r24, 0x01	; 1
    189e:	90 93 3c 03 	sts	0x033C, r25
    18a2:	80 93 3b 03 	sts	0x033B, r24
    18a6:	8f e7       	ldi	r24, 0x7F	; 127
    18a8:	99 ea       	ldi	r25, 0xA9	; 169
    18aa:	a3 e0       	ldi	r26, 0x03	; 3
    18ac:	81 50       	subi	r24, 0x01	; 1
    18ae:	90 40       	sbci	r25, 0x00	; 0
    18b0:	a0 40       	sbci	r26, 0x00	; 0
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <main+0xe7e>
    18b4:	00 c0       	rjmp	.+0      	; 0x18b6 <main+0xe88>
    18b6:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    18b8:	10 92 40 03 	sts	0x0340, r1
    18bc:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    18c0:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    18c4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("5) 7+22*2-42=..");
    18c8:	8f ed       	ldi	r24, 0xDF	; 223
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    18d0:	8f ef       	ldi	r24, 0xFF	; 255
    18d2:	90 e7       	ldi	r25, 0x70	; 112
    18d4:	a2 e0       	ldi	r26, 0x02	; 2
    18d6:	81 50       	subi	r24, 0x01	; 1
    18d8:	90 40       	sbci	r25, 0x00	; 0
    18da:	a0 40       	sbci	r26, 0x00	; 0
    18dc:	e1 f7       	brne	.-8      	; 0x18d6 <main+0xea8>
    18de:	00 c0       	rjmp	.+0      	; 0x18e0 <main+0xeb2>
    18e0:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    18e2:	dd 24       	eor	r13, r13
    18e4:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("5) 7+22*2-42=..");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    18e6:	80 91 3f 03 	lds	r24, 0x033F
    18ea:	90 91 40 03 	lds	r25, 0x0340
    18ee:	88 3c       	cpi	r24, 0xC8	; 200
    18f0:	91 05       	cpc	r25, r1
    18f2:	10 f0       	brcs	.+4      	; 0x18f8 <main+0xeca>
					{
						flag=1;
    18f4:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    18f8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    18fc:	28 2f       	mov	r18, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    1900:	8f 3f       	cpi	r24, 0xFF	; 255
    1902:	91 05       	cpc	r25, r1
    1904:	c1 f4       	brne	.+48     	; 0x1936 <main+0xf08>
    1906:	80 91 3a 03 	lds	r24, 0x033A
    190a:	88 23       	and	r24, r24
    190c:	61 f3       	breq	.-40     	; 0x18e6 <main+0xeb8>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    190e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	64 e0       	ldi	r22, 0x04	; 4
    1916:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    191a:	8b eb       	ldi	r24, 0xBB	; 187
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1922:	80 91 3b 03 	lds	r24, 0x033B
    1926:	90 91 3c 03 	lds	r25, 0x033C
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	90 93 3c 03 	sts	0x033C, r25
    1930:	80 93 3b 03 	sts	0x033B, r24
    1934:	2d c0       	rjmp	.+90     	; 0x1990 <main+0xf62>
				}
				else if (value_read=='9')
    1936:	89 33       	cpi	r24, 0x39	; 57
    1938:	91 05       	cpc	r25, r1
    193a:	b9 f4       	brne	.+46     	; 0x196a <main+0xf3c>
				{
					LCD_SEND_CHAR(value_read);
    193c:	82 2f       	mov	r24, r18
    193e:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
					LCD_clear_screen();
    1942:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	64 e0       	ldi	r22, 0x04	; 4
    194a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    194e:	85 ec       	ldi	r24, 0xC5	; 197
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    1956:	80 91 3d 03 	lds	r24, 0x033D
    195a:	90 91 3e 03 	lds	r25, 0x033E
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	90 93 3e 03 	sts	0x033E, r25
    1964:	80 93 3d 03 	sts	0x033D, r24
    1968:	13 c0       	rjmp	.+38     	; 0x1990 <main+0xf62>
				}
				else
				{
					LCD_clear_screen();
    196a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    196e:	82 e0       	ldi	r24, 0x02	; 2
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    1976:	8f ec       	ldi	r24, 0xCF	; 207
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    197e:	80 91 3b 03 	lds	r24, 0x033B
    1982:	90 91 3c 03 	lds	r25, 0x033C
    1986:	01 96       	adiw	r24, 0x01	; 1
    1988:	90 93 3c 03 	sts	0x033C, r25
    198c:	80 93 3b 03 	sts	0x033B, r24
    1990:	8f e7       	ldi	r24, 0x7F	; 127
    1992:	99 ea       	ldi	r25, 0xA9	; 169
    1994:	a3 e0       	ldi	r26, 0x03	; 3
    1996:	81 50       	subi	r24, 0x01	; 1
    1998:	90 40       	sbci	r25, 0x00	; 0
    199a:	a0 40       	sbci	r26, 0x00	; 0
    199c:	e1 f7       	brne	.-8      	; 0x1996 <main+0xf68>
    199e:	00 c0       	rjmp	.+0      	; 0x19a0 <main+0xf72>
    19a0:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    19a2:	10 92 40 03 	sts	0x0340, r1
    19a6:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    19aa:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    19ae:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("6) 8/4+3*6+..=25");
    19b2:	8f ee       	ldi	r24, 0xEF	; 239
    19b4:	91 e0       	ldi	r25, 0x01	; 1
    19b6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	90 e7       	ldi	r25, 0x70	; 112
    19be:	a2 e0       	ldi	r26, 0x02	; 2
    19c0:	81 50       	subi	r24, 0x01	; 1
    19c2:	90 40       	sbci	r25, 0x00	; 0
    19c4:	a0 40       	sbci	r26, 0x00	; 0
    19c6:	e1 f7       	brne	.-8      	; 0x19c0 <main+0xf92>
    19c8:	00 c0       	rjmp	.+0      	; 0x19ca <main+0xf9c>
    19ca:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    19cc:	dd 24       	eor	r13, r13
    19ce:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("6) 8/4+3*6+..=25");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    19d0:	80 91 3f 03 	lds	r24, 0x033F
    19d4:	90 91 40 03 	lds	r25, 0x0340
    19d8:	88 3c       	cpi	r24, 0xC8	; 200
    19da:	91 05       	cpc	r25, r1
    19dc:	10 f0       	brcs	.+4      	; 0x19e2 <main+0xfb4>
					{
						flag=1;
    19de:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    19e2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    19e6:	28 2f       	mov	r18, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    19ea:	8f 3f       	cpi	r24, 0xFF	; 255
    19ec:	91 05       	cpc	r25, r1
    19ee:	c1 f4       	brne	.+48     	; 0x1a20 <main+0xff2>
    19f0:	80 91 3a 03 	lds	r24, 0x033A
    19f4:	88 23       	and	r24, r24
    19f6:	61 f3       	breq	.-40     	; 0x19d0 <main+0xfa2>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    19f8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	64 e0       	ldi	r22, 0x04	; 4
    1a00:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    1a04:	8b eb       	ldi	r24, 0xBB	; 187
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1a0c:	80 91 3b 03 	lds	r24, 0x033B
    1a10:	90 91 3c 03 	lds	r25, 0x033C
    1a14:	01 96       	adiw	r24, 0x01	; 1
    1a16:	90 93 3c 03 	sts	0x033C, r25
    1a1a:	80 93 3b 03 	sts	0x033B, r24
    1a1e:	2d c0       	rjmp	.+90     	; 0x1a7a <main+0x104c>
				}
				else if (value_read=='5')
    1a20:	85 33       	cpi	r24, 0x35	; 53
    1a22:	91 05       	cpc	r25, r1
    1a24:	b9 f4       	brne	.+46     	; 0x1a54 <main+0x1026>
				{
					LCD_SEND_CHAR(value_read);
    1a26:	82 2f       	mov	r24, r18
    1a28:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
					LCD_clear_screen();
    1a2c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	64 e0       	ldi	r22, 0x04	; 4
    1a34:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    1a38:	85 ec       	ldi	r24, 0xC5	; 197
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    1a40:	80 91 3d 03 	lds	r24, 0x033D
    1a44:	90 91 3e 03 	lds	r25, 0x033E
    1a48:	01 96       	adiw	r24, 0x01	; 1
    1a4a:	90 93 3e 03 	sts	0x033E, r25
    1a4e:	80 93 3d 03 	sts	0x033D, r24
    1a52:	13 c0       	rjmp	.+38     	; 0x1a7a <main+0x104c>
				}
				else
				{
					LCD_clear_screen();
    1a54:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1a58:	82 e0       	ldi	r24, 0x02	; 2
    1a5a:	64 e0       	ldi	r22, 0x04	; 4
    1a5c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    1a60:	8f ec       	ldi	r24, 0xCF	; 207
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1a68:	80 91 3b 03 	lds	r24, 0x033B
    1a6c:	90 91 3c 03 	lds	r25, 0x033C
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	90 93 3c 03 	sts	0x033C, r25
    1a76:	80 93 3b 03 	sts	0x033B, r24
    1a7a:	8f e7       	ldi	r24, 0x7F	; 127
    1a7c:	99 ea       	ldi	r25, 0xA9	; 169
    1a7e:	a3 e0       	ldi	r26, 0x03	; 3
    1a80:	81 50       	subi	r24, 0x01	; 1
    1a82:	90 40       	sbci	r25, 0x00	; 0
    1a84:	a0 40       	sbci	r26, 0x00	; 0
    1a86:	e1 f7       	brne	.-8      	; 0x1a80 <main+0x1052>
    1a88:	00 c0       	rjmp	.+0      	; 0x1a8a <main+0x105c>
    1a8a:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    1a8c:	10 92 40 03 	sts	0x0340, r1
    1a90:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    1a94:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    1a98:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("7) 50*2/25+4=..");
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	92 e0       	ldi	r25, 0x02	; 2
    1aa0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	90 e7       	ldi	r25, 0x70	; 112
    1aa8:	a2 e0       	ldi	r26, 0x02	; 2
    1aaa:	81 50       	subi	r24, 0x01	; 1
    1aac:	90 40       	sbci	r25, 0x00	; 0
    1aae:	a0 40       	sbci	r26, 0x00	; 0
    1ab0:	e1 f7       	brne	.-8      	; 0x1aaa <main+0x107c>
    1ab2:	00 c0       	rjmp	.+0      	; 0x1ab4 <main+0x1086>
    1ab4:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    1ab6:	dd 24       	eor	r13, r13
    1ab8:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("7) 50*2/25+4=..");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    1aba:	80 91 3f 03 	lds	r24, 0x033F
    1abe:	90 91 40 03 	lds	r25, 0x0340
    1ac2:	88 3c       	cpi	r24, 0xC8	; 200
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	10 f0       	brcs	.+4      	; 0x1acc <main+0x109e>
					{
						flag=1;
    1ac8:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    1acc:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1ad0:	28 2f       	mov	r18, r24
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    1ad4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ad6:	91 05       	cpc	r25, r1
    1ad8:	c1 f4       	brne	.+48     	; 0x1b0a <main+0x10dc>
    1ada:	80 91 3a 03 	lds	r24, 0x033A
    1ade:	88 23       	and	r24, r24
    1ae0:	61 f3       	breq	.-40     	; 0x1aba <main+0x108c>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    1ae2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1ae6:	82 e0       	ldi	r24, 0x02	; 2
    1ae8:	64 e0       	ldi	r22, 0x04	; 4
    1aea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    1aee:	8b eb       	ldi	r24, 0xBB	; 187
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1af6:	80 91 3b 03 	lds	r24, 0x033B
    1afa:	90 91 3c 03 	lds	r25, 0x033C
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	90 93 3c 03 	sts	0x033C, r25
    1b04:	80 93 3b 03 	sts	0x033B, r24
    1b08:	2d c0       	rjmp	.+90     	; 0x1b64 <main+0x1136>
				}
				else if (value_read=='8')
    1b0a:	88 33       	cpi	r24, 0x38	; 56
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	b9 f4       	brne	.+46     	; 0x1b3e <main+0x1110>
				{
					LCD_SEND_CHAR(value_read);
    1b10:	82 2f       	mov	r24, r18
    1b12:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
					LCD_clear_screen();
    1b16:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1b1a:	82 e0       	ldi	r24, 0x02	; 2
    1b1c:	64 e0       	ldi	r22, 0x04	; 4
    1b1e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    1b22:	85 ec       	ldi	r24, 0xC5	; 197
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    1b2a:	80 91 3d 03 	lds	r24, 0x033D
    1b2e:	90 91 3e 03 	lds	r25, 0x033E
    1b32:	01 96       	adiw	r24, 0x01	; 1
    1b34:	90 93 3e 03 	sts	0x033E, r25
    1b38:	80 93 3d 03 	sts	0x033D, r24
    1b3c:	13 c0       	rjmp	.+38     	; 0x1b64 <main+0x1136>
				}
				else
				{
					LCD_clear_screen();
    1b3e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1b42:	82 e0       	ldi	r24, 0x02	; 2
    1b44:	64 e0       	ldi	r22, 0x04	; 4
    1b46:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    1b4a:	8f ec       	ldi	r24, 0xCF	; 207
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1b52:	80 91 3b 03 	lds	r24, 0x033B
    1b56:	90 91 3c 03 	lds	r25, 0x033C
    1b5a:	01 96       	adiw	r24, 0x01	; 1
    1b5c:	90 93 3c 03 	sts	0x033C, r25
    1b60:	80 93 3b 03 	sts	0x033B, r24
    1b64:	8f e7       	ldi	r24, 0x7F	; 127
    1b66:	99 ea       	ldi	r25, 0xA9	; 169
    1b68:	a3 e0       	ldi	r26, 0x03	; 3
    1b6a:	81 50       	subi	r24, 0x01	; 1
    1b6c:	90 40       	sbci	r25, 0x00	; 0
    1b6e:	a0 40       	sbci	r26, 0x00	; 0
    1b70:	e1 f7       	brne	.-8      	; 0x1b6a <main+0x113c>
    1b72:	00 c0       	rjmp	.+0      	; 0x1b74 <main+0x1146>
    1b74:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    1b76:	10 92 40 03 	sts	0x0340, r1
    1b7a:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    1b7e:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    1b82:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("8)14/2-1+9-..=14");
    1b86:	80 e1       	ldi	r24, 0x10	; 16
    1b88:	92 e0       	ldi	r25, 0x02	; 2
    1b8a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1b8e:	8f ef       	ldi	r24, 0xFF	; 255
    1b90:	90 e7       	ldi	r25, 0x70	; 112
    1b92:	a2 e0       	ldi	r26, 0x02	; 2
    1b94:	81 50       	subi	r24, 0x01	; 1
    1b96:	90 40       	sbci	r25, 0x00	; 0
    1b98:	a0 40       	sbci	r26, 0x00	; 0
    1b9a:	e1 f7       	brne	.-8      	; 0x1b94 <main+0x1166>
    1b9c:	00 c0       	rjmp	.+0      	; 0x1b9e <main+0x1170>
    1b9e:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    1ba0:	dd 24       	eor	r13, r13
    1ba2:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("8)14/2-1+9-..=14");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    1ba4:	80 91 3f 03 	lds	r24, 0x033F
    1ba8:	90 91 40 03 	lds	r25, 0x0340
    1bac:	88 3c       	cpi	r24, 0xC8	; 200
    1bae:	91 05       	cpc	r25, r1
    1bb0:	10 f0       	brcs	.+4      	; 0x1bb6 <main+0x1188>
					{
						flag=1;
    1bb2:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    1bb6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1bba:	28 2f       	mov	r18, r24
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    1bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    1bc0:	91 05       	cpc	r25, r1
    1bc2:	c1 f4       	brne	.+48     	; 0x1bf4 <main+0x11c6>
    1bc4:	80 91 3a 03 	lds	r24, 0x033A
    1bc8:	88 23       	and	r24, r24
    1bca:	61 f3       	breq	.-40     	; 0x1ba4 <main+0x1176>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    1bcc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	64 e0       	ldi	r22, 0x04	; 4
    1bd4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    1bd8:	8b eb       	ldi	r24, 0xBB	; 187
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1be0:	80 91 3b 03 	lds	r24, 0x033B
    1be4:	90 91 3c 03 	lds	r25, 0x033C
    1be8:	01 96       	adiw	r24, 0x01	; 1
    1bea:	90 93 3c 03 	sts	0x033C, r25
    1bee:	80 93 3b 03 	sts	0x033B, r24
    1bf2:	2d c0       	rjmp	.+90     	; 0x1c4e <main+0x1220>
				}
				else if (value_read=='1')
    1bf4:	81 33       	cpi	r24, 0x31	; 49
    1bf6:	91 05       	cpc	r25, r1
    1bf8:	b9 f4       	brne	.+46     	; 0x1c28 <main+0x11fa>
				{
					LCD_SEND_CHAR(value_read);
    1bfa:	82 2f       	mov	r24, r18
    1bfc:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
					LCD_clear_screen();
    1c00:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	64 e0       	ldi	r22, 0x04	; 4
    1c08:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    1c0c:	85 ec       	ldi	r24, 0xC5	; 197
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    1c14:	80 91 3d 03 	lds	r24, 0x033D
    1c18:	90 91 3e 03 	lds	r25, 0x033E
    1c1c:	01 96       	adiw	r24, 0x01	; 1
    1c1e:	90 93 3e 03 	sts	0x033E, r25
    1c22:	80 93 3d 03 	sts	0x033D, r24
    1c26:	13 c0       	rjmp	.+38     	; 0x1c4e <main+0x1220>
				}
				else
				{
					LCD_clear_screen();
    1c28:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	64 e0       	ldi	r22, 0x04	; 4
    1c30:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    1c34:	8f ec       	ldi	r24, 0xCF	; 207
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1c3c:	80 91 3b 03 	lds	r24, 0x033B
    1c40:	90 91 3c 03 	lds	r25, 0x033C
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	90 93 3c 03 	sts	0x033C, r25
    1c4a:	80 93 3b 03 	sts	0x033B, r24
    1c4e:	8f e7       	ldi	r24, 0x7F	; 127
    1c50:	99 ea       	ldi	r25, 0xA9	; 169
    1c52:	a3 e0       	ldi	r26, 0x03	; 3
    1c54:	81 50       	subi	r24, 0x01	; 1
    1c56:	90 40       	sbci	r25, 0x00	; 0
    1c58:	a0 40       	sbci	r26, 0x00	; 0
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <main+0x1226>
    1c5c:	00 c0       	rjmp	.+0      	; 0x1c5e <main+0x1230>
    1c5e:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    1c60:	10 92 40 03 	sts	0x0340, r1
    1c64:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    1c68:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    1c6c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("9)4*6/2-8+..=9");
    1c70:	81 e2       	ldi	r24, 0x21	; 33
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1c78:	8f ef       	ldi	r24, 0xFF	; 255
    1c7a:	90 e7       	ldi	r25, 0x70	; 112
    1c7c:	a2 e0       	ldi	r26, 0x02	; 2
    1c7e:	81 50       	subi	r24, 0x01	; 1
    1c80:	90 40       	sbci	r25, 0x00	; 0
    1c82:	a0 40       	sbci	r26, 0x00	; 0
    1c84:	e1 f7       	brne	.-8      	; 0x1c7e <main+0x1250>
    1c86:	00 c0       	rjmp	.+0      	; 0x1c88 <main+0x125a>
    1c88:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    1c8a:	dd 24       	eor	r13, r13
    1c8c:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("9)4*6/2-8+..=9");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    1c8e:	80 91 3f 03 	lds	r24, 0x033F
    1c92:	90 91 40 03 	lds	r25, 0x0340
    1c96:	88 3c       	cpi	r24, 0xC8	; 200
    1c98:	91 05       	cpc	r25, r1
    1c9a:	10 f0       	brcs	.+4      	; 0x1ca0 <main+0x1272>
					{
						flag=1;
    1c9c:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    1ca0:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag == 0);
    1ca8:	8f 3f       	cpi	r24, 0xFF	; 255
    1caa:	91 05       	cpc	r25, r1
    1cac:	c1 f4       	brne	.+48     	; 0x1cde <main+0x12b0>
    1cae:	80 91 3a 03 	lds	r24, 0x033A
    1cb2:	88 23       	and	r24, r24
    1cb4:	61 f3       	breq	.-40     	; 0x1c8e <main+0x1260>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    1cb6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1cba:	82 e0       	ldi	r24, 0x02	; 2
    1cbc:	64 e0       	ldi	r22, 0x04	; 4
    1cbe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    1cc2:	8b eb       	ldi	r24, 0xBB	; 187
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1cca:	80 91 3b 03 	lds	r24, 0x033B
    1cce:	90 91 3c 03 	lds	r25, 0x033C
    1cd2:	01 96       	adiw	r24, 0x01	; 1
    1cd4:	90 93 3c 03 	sts	0x033C, r25
    1cd8:	80 93 3b 03 	sts	0x033B, r24
    1cdc:	2d c0       	rjmp	.+90     	; 0x1d38 <main+0x130a>
				}
				else if (value_read=='5')
    1cde:	85 33       	cpi	r24, 0x35	; 53
    1ce0:	91 05       	cpc	r25, r1
    1ce2:	b9 f4       	brne	.+46     	; 0x1d12 <main+0x12e4>
				{
					LCD_SEND_CHAR(value_read);
    1ce4:	82 2f       	mov	r24, r18
    1ce6:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
					LCD_clear_screen();
    1cea:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1cee:	82 e0       	ldi	r24, 0x02	; 2
    1cf0:	64 e0       	ldi	r22, 0x04	; 4
    1cf2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    1cf6:	85 ec       	ldi	r24, 0xC5	; 197
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    1cfe:	80 91 3d 03 	lds	r24, 0x033D
    1d02:	90 91 3e 03 	lds	r25, 0x033E
    1d06:	01 96       	adiw	r24, 0x01	; 1
    1d08:	90 93 3e 03 	sts	0x033E, r25
    1d0c:	80 93 3d 03 	sts	0x033D, r24
    1d10:	13 c0       	rjmp	.+38     	; 0x1d38 <main+0x130a>
				}
				else
				{
					LCD_clear_screen();
    1d12:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1d16:	82 e0       	ldi	r24, 0x02	; 2
    1d18:	64 e0       	ldi	r22, 0x04	; 4
    1d1a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    1d1e:	8f ec       	ldi	r24, 0xCF	; 207
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1d26:	80 91 3b 03 	lds	r24, 0x033B
    1d2a:	90 91 3c 03 	lds	r25, 0x033C
    1d2e:	01 96       	adiw	r24, 0x01	; 1
    1d30:	90 93 3c 03 	sts	0x033C, r25
    1d34:	80 93 3b 03 	sts	0x033B, r24
    1d38:	8f e7       	ldi	r24, 0x7F	; 127
    1d3a:	99 ea       	ldi	r25, 0xA9	; 169
    1d3c:	a3 e0       	ldi	r26, 0x03	; 3
    1d3e:	81 50       	subi	r24, 0x01	; 1
    1d40:	90 40       	sbci	r25, 0x00	; 0
    1d42:	a0 40       	sbci	r26, 0x00	; 0
    1d44:	e1 f7       	brne	.-8      	; 0x1d3e <main+0x1310>
    1d46:	00 c0       	rjmp	.+0      	; 0x1d48 <main+0x131a>
    1d48:	00 00       	nop
				}
				_delay_ms(150);
				counter=0;
    1d4a:	10 92 40 03 	sts	0x0340, r1
    1d4e:	10 92 3f 03 	sts	0x033F, r1
				flag=0;
    1d52:	10 92 3a 03 	sts	0x033A, r1
				LCD_clear_screen();
    1d56:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("10)4+6-4*2+..=10");
    1d5a:	80 e3       	ldi	r24, 0x30	; 48
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	90 e7       	ldi	r25, 0x70	; 112
    1d66:	a2 e0       	ldi	r26, 0x02	; 2
    1d68:	81 50       	subi	r24, 0x01	; 1
    1d6a:	90 40       	sbci	r25, 0x00	; 0
    1d6c:	a0 40       	sbci	r26, 0x00	; 0
    1d6e:	e1 f7       	brne	.-8      	; 0x1d68 <main+0x133a>
    1d70:	00 c0       	rjmp	.+0      	; 0x1d72 <main+0x1344>
    1d72:	00 00       	nop
				_delay_ms(100);
				do
				{
					if (counter>=200)
					{
						flag=1;
    1d74:	dd 24       	eor	r13, r13
    1d76:	d3 94       	inc	r13
				LCD_clear_screen();
				LCD_SEND_STRING("10)4+6-4*2+..=10");
				_delay_ms(100);
				do
				{
					if (counter>=200)
    1d78:	80 91 3f 03 	lds	r24, 0x033F
    1d7c:	90 91 40 03 	lds	r25, 0x0340
    1d80:	88 3c       	cpi	r24, 0xC8	; 200
    1d82:	91 05       	cpc	r25, r1
    1d84:	10 f0       	brcs	.+4      	; 0x1d8a <main+0x135c>
					{
						flag=1;
    1d86:	d0 92 3a 03 	sts	0x033A, r13
					}
					value_read=keybad_u8read_press();
    1d8a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1d8e:	28 2f       	mov	r18, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
				} while (value_read==notpassed && flag==0);
    1d92:	8f 3f       	cpi	r24, 0xFF	; 255
    1d94:	91 05       	cpc	r25, r1
    1d96:	c1 f4       	brne	.+48     	; 0x1dc8 <main+0x139a>
    1d98:	80 91 3a 03 	lds	r24, 0x033A
    1d9c:	88 23       	and	r24, r24
    1d9e:	61 f3       	breq	.-40     	; 0x1d78 <main+0x134a>
				if (value_read==notpassed)
				{
					LCD_clear_screen();
    1da0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	64 e0       	ldi	r22, 0x04	; 4
    1da8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("time over");
    1dac:	8b eb       	ldi	r24, 0xBB	; 187
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1db4:	80 91 3b 03 	lds	r24, 0x033B
    1db8:	90 91 3c 03 	lds	r25, 0x033C
    1dbc:	01 96       	adiw	r24, 0x01	; 1
    1dbe:	90 93 3c 03 	sts	0x033C, r25
    1dc2:	80 93 3b 03 	sts	0x033B, r24
    1dc6:	2d c0       	rjmp	.+90     	; 0x1e22 <main+0x13f4>
				}
				else if (value_read=='8')
    1dc8:	88 33       	cpi	r24, 0x38	; 56
    1dca:	91 05       	cpc	r25, r1
    1dcc:	b9 f4       	brne	.+46     	; 0x1dfc <main+0x13ce>
				{
					LCD_SEND_CHAR(value_read);
    1dce:	82 2f       	mov	r24, r18
    1dd0:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
					LCD_clear_screen();
    1dd4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1dd8:	82 e0       	ldi	r24, 0x02	; 2
    1dda:	64 e0       	ldi	r22, 0x04	; 4
    1ddc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("well done");
    1de0:	85 ec       	ldi	r24, 0xC5	; 197
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter1++;
    1de8:	80 91 3d 03 	lds	r24, 0x033D
    1dec:	90 91 3e 03 	lds	r25, 0x033E
    1df0:	01 96       	adiw	r24, 0x01	; 1
    1df2:	90 93 3e 03 	sts	0x033E, r25
    1df6:	80 93 3d 03 	sts	0x033D, r24
    1dfa:	13 c0       	rjmp	.+38     	; 0x1e22 <main+0x13f4>
				}
				else
				{
					LCD_clear_screen();
    1dfc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_MOVE_CURSOR(2,4);
    1e00:	82 e0       	ldi	r24, 0x02	; 2
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("wrong answer");
    1e08:	8f ec       	ldi	r24, 0xCF	; 207
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					counter2++;
    1e10:	80 91 3b 03 	lds	r24, 0x033B
    1e14:	90 91 3c 03 	lds	r25, 0x033C
    1e18:	01 96       	adiw	r24, 0x01	; 1
    1e1a:	90 93 3c 03 	sts	0x033C, r25
    1e1e:	80 93 3b 03 	sts	0x033B, r24
    1e22:	8f e7       	ldi	r24, 0x7F	; 127
    1e24:	99 ea       	ldi	r25, 0xA9	; 169
    1e26:	a3 e0       	ldi	r26, 0x03	; 3
    1e28:	81 50       	subi	r24, 0x01	; 1
    1e2a:	90 40       	sbci	r25, 0x00	; 0
    1e2c:	a0 40       	sbci	r26, 0x00	; 0
    1e2e:	e1 f7       	brne	.-8      	; 0x1e28 <main+0x13fa>
    1e30:	00 c0       	rjmp	.+0      	; 0x1e32 <main+0x1404>
    1e32:	00 00       	nop
				}
				_delay_ms(150);
				LCD_clear_screen();
    1e34:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				LCD_SEND_STRING("the correct=");
    1e38:	8b e5       	ldi	r24, 0x5B	; 91
    1e3a:	91 e0       	ldi	r25, 0x01	; 1
    1e3c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(1,13);
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	6d e0       	ldi	r22, 0x0D	; 13
    1e44:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR(counter1+48);
    1e48:	80 91 3d 03 	lds	r24, 0x033D
    1e4c:	90 91 3e 03 	lds	r25, 0x033E
    1e50:	80 5d       	subi	r24, 0xD0	; 208
    1e52:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
				LCD_MOVE_CURSOR(2,1);
    1e56:	82 e0       	ldi	r24, 0x02	; 2
    1e58:	61 e0       	ldi	r22, 0x01	; 1
    1e5a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_STRING("the wrong=");
    1e5e:	88 e6       	ldi	r24, 0x68	; 104
    1e60:	91 e0       	ldi	r25, 0x01	; 1
    1e62:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
				LCD_MOVE_CURSOR(2,11);
    1e66:	82 e0       	ldi	r24, 0x02	; 2
    1e68:	6b e0       	ldi	r22, 0x0B	; 11
    1e6a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
				LCD_SEND_CHAR(counter2+48);
    1e6e:	80 91 3b 03 	lds	r24, 0x033B
    1e72:	90 91 3c 03 	lds	r25, 0x033C
    1e76:	80 5d       	subi	r24, 0xD0	; 208
    1e78:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
    1e7c:	8f ef       	ldi	r24, 0xFF	; 255
    1e7e:	97 e8       	ldi	r25, 0x87	; 135
    1e80:	a3 e1       	ldi	r26, 0x13	; 19
    1e82:	81 50       	subi	r24, 0x01	; 1
    1e84:	90 40       	sbci	r25, 0x00	; 0
    1e86:	a0 40       	sbci	r26, 0x00	; 0
    1e88:	e1 f7       	brne	.-8      	; 0x1e82 <main+0x1454>
    1e8a:	00 c0       	rjmp	.+0      	; 0x1e8c <main+0x145e>
    1e8c:	00 00       	nop
				_delay_ms(800);
				LCD_clear_screen();
    1e8e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
				if (counter1>counter2)
    1e92:	80 91 3d 03 	lds	r24, 0x033D
    1e96:	90 91 3e 03 	lds	r25, 0x033E
    1e9a:	20 91 3b 03 	lds	r18, 0x033B
    1e9e:	30 91 3c 03 	lds	r19, 0x033C
    1ea2:	28 17       	cp	r18, r24
    1ea4:	39 07       	cpc	r19, r25
    1ea6:	08 f5       	brcc	.+66     	; 0x1eea <main+0x14bc>
				{
		
					LCD_SEND_STRING("succed");
    1ea8:	83 e7       	ldi	r24, 0x73	; 115
    1eaa:	91 e0       	ldi	r25, 0x01	; 1
    1eac:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1eb0:	8f e7       	ldi	r24, 0x7F	; 127
    1eb2:	99 ea       	ldi	r25, 0xA9	; 169
    1eb4:	a3 e0       	ldi	r26, 0x03	; 3
    1eb6:	81 50       	subi	r24, 0x01	; 1
    1eb8:	90 40       	sbci	r25, 0x00	; 0
    1eba:	a0 40       	sbci	r26, 0x00	; 0
    1ebc:	e1 f7       	brne	.-8      	; 0x1eb6 <main+0x1488>
    1ebe:	00 c0       	rjmp	.+0      	; 0x1ec0 <main+0x1492>
    1ec0:	00 00       	nop
					_delay_ms(150);	
					LCD_clear_screen();
    1ec2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
					LCD_SEND_STRING("up to test(3)");
    1ec6:	81 e4       	ldi	r24, 0x41	; 65
    1ec8:	92 e0       	ldi	r25, 0x02	; 2
    1eca:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1ece:	8f ef       	ldi	r24, 0xFF	; 255
    1ed0:	91 ee       	ldi	r25, 0xE1	; 225
    1ed2:	a4 e0       	ldi	r26, 0x04	; 4
    1ed4:	81 50       	subi	r24, 0x01	; 1
    1ed6:	90 40       	sbci	r25, 0x00	; 0
    1ed8:	a0 40       	sbci	r26, 0x00	; 0
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <main+0x14a6>
    1edc:	00 c0       	rjmp	.+0      	; 0x1ede <main+0x14b0>
    1ede:	00 00       	nop
					_delay_ms(200);
					flag2=1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	80 93 38 03 	sts	0x0338, r24
    1ee6:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>
				}
				else
				{
					LCD_MOVE_CURSOR(1,5);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	65 e0       	ldi	r22, 0x05	; 5
    1eee:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("failed");
    1ef2:	88 e8       	ldi	r24, 0x88	; 136
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
					LCD_MOVE_CURSOR(2,4);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	64 e0       	ldi	r22, 0x04	; 4
    1efe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
					LCD_SEND_STRING("Try again");
    1f02:	8f e8       	ldi	r24, 0x8F	; 143
    1f04:	91 e0       	ldi	r25, 0x01	; 1
    1f06:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1f0a:	8f ef       	ldi	r24, 0xFF	; 255
    1f0c:	93 ec       	ldi	r25, 0xC3	; 195
    1f0e:	a9 e0       	ldi	r26, 0x09	; 9
    1f10:	81 50       	subi	r24, 0x01	; 1
    1f12:	90 40       	sbci	r25, 0x00	; 0
    1f14:	a0 40       	sbci	r26, 0x00	; 0
    1f16:	e1 f7       	brne	.-8      	; 0x1f10 <main+0x14e2>
    1f18:	00 c0       	rjmp	.+0      	; 0x1f1a <main+0x14ec>
    1f1a:	00 00       	nop
					_delay_ms(400);
					flag1=0;
    1f1c:	10 92 39 03 	sts	0x0339, r1
    1f20:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>
				}
				goto L1;
     	}
		 else
		 {
			 LCD_clear_screen();
    1f24:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			 LCD_SEND_STRING("  Test2 locked  ");
    1f28:	8f e4       	ldi	r24, 0x4F	; 79
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	96 e1       	ldi	r25, 0x16	; 22
    1f34:	a1 e1       	ldi	r26, 0x11	; 17
    1f36:	81 50       	subi	r24, 0x01	; 1
    1f38:	90 40       	sbci	r25, 0x00	; 0
    1f3a:	a0 40       	sbci	r26, 0x00	; 0
    1f3c:	e1 f7       	brne	.-8      	; 0x1f36 <main+0x1508>
    1f3e:	00 c0       	rjmp	.+0      	; 0x1f40 <main+0x1512>
    1f40:	00 00       	nop
			_delay_ms(700);
			LCD_clear_screen();
    1f42:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			 goto L1;
    1f46:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>





    else if (value_read == '3')
    1f4a:	83 33       	cpi	r24, 0x33	; 51
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <main+0x1524>
    1f50:	31 c5       	rjmp	.+2658   	; 0x29b4 <main+0x1f86>
	{
		//counter=0;
		if (value_read == '3' &&  flag1==1 && flag2==1)
    1f52:	80 91 39 03 	lds	r24, 0x0339
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	09 f0       	breq	.+2      	; 0x1f5c <main+0x152e>
    1f5a:	19 c5       	rjmp	.+2610   	; 0x298e <main+0x1f60>
    1f5c:	80 91 38 03 	lds	r24, 0x0338
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <main+0x1538>
    1f64:	14 c5       	rjmp	.+2600   	; 0x298e <main+0x1f60>
		{
		flag2=1;
		counter=0;
    1f66:	10 92 40 03 	sts	0x0340, r1
    1f6a:	10 92 3f 03 	sts	0x033F, r1
		LCD_clear_screen();
    1f6e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_MOVE_CURSOR(1,4);
    1f72:	81 e0       	ldi	r24, 0x01	; 1
    1f74:	64 e0       	ldi	r22, 0x04	; 4
    1f76:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Test(3)");
    1f7a:	80 e6       	ldi	r24, 0x60	; 96
    1f7c:	92 e0       	ldi	r25, 0x02	; 2
    1f7e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    1f82:	8f ef       	ldi	r24, 0xFF	; 255
    1f84:	91 ee       	ldi	r25, 0xE1	; 225
    1f86:	a4 e0       	ldi	r26, 0x04	; 4
    1f88:	81 50       	subi	r24, 0x01	; 1
    1f8a:	90 40       	sbci	r25, 0x00	; 0
    1f8c:	a0 40       	sbci	r26, 0x00	; 0
    1f8e:	e1 f7       	brne	.-8      	; 0x1f88 <main+0x155a>
    1f90:	00 c0       	rjmp	.+0      	; 0x1f92 <main+0x1564>
    1f92:	00 00       	nop
		_delay_ms(200);
		LCD_clear_screen();
    1f94:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("1) 4+4*(7-6)+..=10");
    1f98:	88 e6       	ldi	r24, 0x68	; 104
    1f9a:	92 e0       	ldi	r25, 0x02	; 2
    1f9c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		
		do
		{
			if (counter>=200)
			{
				flag=1;
    1fa0:	dd 24       	eor	r13, r13
    1fa2:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("1) 4+4*(7-6)+..=10");
		
		do
		{
			if (counter>=200)
    1fa4:	80 91 3f 03 	lds	r24, 0x033F
    1fa8:	90 91 40 03 	lds	r25, 0x0340
    1fac:	88 3c       	cpi	r24, 0xC8	; 200
    1fae:	91 05       	cpc	r25, r1
    1fb0:	10 f0       	brcs	.+4      	; 0x1fb6 <main+0x1588>
			{
				flag=1;
    1fb2:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    1fb6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    1fba:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    1fbc:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	c1 f4       	brne	.+48     	; 0x1ff2 <main+0x15c4>
    1fc2:	80 91 3a 03 	lds	r24, 0x033A
    1fc6:	88 23       	and	r24, r24
    1fc8:	69 f3       	breq	.-38     	; 0x1fa4 <main+0x1576>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    1fca:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	64 e0       	ldi	r22, 0x04	; 4
    1fd2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    1fd6:	8b eb       	ldi	r24, 0xBB	; 187
    1fd8:	90 e0       	ldi	r25, 0x00	; 0
    1fda:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    1fde:	80 91 3b 03 	lds	r24, 0x033B
    1fe2:	90 91 3c 03 	lds	r25, 0x033C
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	90 93 3c 03 	sts	0x033C, r25
    1fec:	80 93 3b 03 	sts	0x033B, r24
    1ff0:	2a c0       	rjmp	.+84     	; 0x2046 <main+0x1618>
		}
		else if (value_read=='2')
    1ff2:	82 33       	cpi	r24, 0x32	; 50
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	a1 f4       	brne	.+40     	; 0x2020 <main+0x15f2>
		{
			LCD_clear_screen();
    1ff8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	64 e0       	ldi	r22, 0x04	; 4
    2000:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2004:	85 ec       	ldi	r24, 0xC5	; 197
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    200c:	80 91 3d 03 	lds	r24, 0x033D
    2010:	90 91 3e 03 	lds	r25, 0x033E
    2014:	01 96       	adiw	r24, 0x01	; 1
    2016:	90 93 3e 03 	sts	0x033E, r25
    201a:	80 93 3d 03 	sts	0x033D, r24
    201e:	13 c0       	rjmp	.+38     	; 0x2046 <main+0x1618>
		}
		else
		{
			LCD_clear_screen();
    2020:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	64 e0       	ldi	r22, 0x04	; 4
    2028:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    202c:	8f ec       	ldi	r24, 0xCF	; 207
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2034:	80 91 3b 03 	lds	r24, 0x033B
    2038:	90 91 3c 03 	lds	r25, 0x033C
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	90 93 3c 03 	sts	0x033C, r25
    2042:	80 93 3b 03 	sts	0x033B, r24
    2046:	8f e7       	ldi	r24, 0x7F	; 127
    2048:	99 ea       	ldi	r25, 0xA9	; 169
    204a:	a3 e0       	ldi	r26, 0x03	; 3
    204c:	81 50       	subi	r24, 0x01	; 1
    204e:	90 40       	sbci	r25, 0x00	; 0
    2050:	a0 40       	sbci	r26, 0x00	; 0
    2052:	e1 f7       	brne	.-8      	; 0x204c <main+0x161e>
    2054:	00 c0       	rjmp	.+0      	; 0x2056 <main+0x1628>
    2056:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2058:	10 92 40 03 	sts	0x0340, r1
    205c:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2060:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2064:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("2) 8-6\(2+1)+..=10");
    2068:	8b e7       	ldi	r24, 0x7B	; 123
    206a:	92 e0       	ldi	r25, 0x02	; 2
    206c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	90 e7       	ldi	r25, 0x70	; 112
    2074:	a2 e0       	ldi	r26, 0x02	; 2
    2076:	81 50       	subi	r24, 0x01	; 1
    2078:	90 40       	sbci	r25, 0x00	; 0
    207a:	a0 40       	sbci	r26, 0x00	; 0
    207c:	e1 f7       	brne	.-8      	; 0x2076 <main+0x1648>
    207e:	00 c0       	rjmp	.+0      	; 0x2080 <main+0x1652>
    2080:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2082:	dd 24       	eor	r13, r13
    2084:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("2) 8-6\(2+1)+..=10");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2086:	80 91 3f 03 	lds	r24, 0x033F
    208a:	90 91 40 03 	lds	r25, 0x0340
    208e:	88 3c       	cpi	r24, 0xC8	; 200
    2090:	91 05       	cpc	r25, r1
    2092:	10 f0       	brcs	.+4      	; 0x2098 <main+0x166a>
			{
				flag=1;
    2094:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2098:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    209c:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    209e:	8f 3f       	cpi	r24, 0xFF	; 255
    20a0:	91 05       	cpc	r25, r1
    20a2:	c1 f4       	brne	.+48     	; 0x20d4 <main+0x16a6>
    20a4:	80 91 3a 03 	lds	r24, 0x033A
    20a8:	88 23       	and	r24, r24
    20aa:	69 f3       	breq	.-38     	; 0x2086 <main+0x1658>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    20ac:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    20b0:	82 e0       	ldi	r24, 0x02	; 2
    20b2:	64 e0       	ldi	r22, 0x04	; 4
    20b4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    20b8:	8b eb       	ldi	r24, 0xBB	; 187
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    20c0:	80 91 3b 03 	lds	r24, 0x033B
    20c4:	90 91 3c 03 	lds	r25, 0x033C
    20c8:	01 96       	adiw	r24, 0x01	; 1
    20ca:	90 93 3c 03 	sts	0x033C, r25
    20ce:	80 93 3b 03 	sts	0x033B, r24
    20d2:	2a c0       	rjmp	.+84     	; 0x2128 <main+0x16fa>
		}
		else if (value_read=='4')
    20d4:	84 33       	cpi	r24, 0x34	; 52
    20d6:	91 05       	cpc	r25, r1
    20d8:	a1 f4       	brne	.+40     	; 0x2102 <main+0x16d4>
		{
			LCD_clear_screen();
    20da:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	64 e0       	ldi	r22, 0x04	; 4
    20e2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    20e6:	85 ec       	ldi	r24, 0xC5	; 197
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    20ee:	80 91 3d 03 	lds	r24, 0x033D
    20f2:	90 91 3e 03 	lds	r25, 0x033E
    20f6:	01 96       	adiw	r24, 0x01	; 1
    20f8:	90 93 3e 03 	sts	0x033E, r25
    20fc:	80 93 3d 03 	sts	0x033D, r24
    2100:	13 c0       	rjmp	.+38     	; 0x2128 <main+0x16fa>
		}
		else
		{
			LCD_clear_screen();
    2102:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2106:	82 e0       	ldi	r24, 0x02	; 2
    2108:	64 e0       	ldi	r22, 0x04	; 4
    210a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    210e:	8f ec       	ldi	r24, 0xCF	; 207
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2116:	80 91 3b 03 	lds	r24, 0x033B
    211a:	90 91 3c 03 	lds	r25, 0x033C
    211e:	01 96       	adiw	r24, 0x01	; 1
    2120:	90 93 3c 03 	sts	0x033C, r25
    2124:	80 93 3b 03 	sts	0x033B, r24
    2128:	8f e7       	ldi	r24, 0x7F	; 127
    212a:	99 ea       	ldi	r25, 0xA9	; 169
    212c:	a3 e0       	ldi	r26, 0x03	; 3
    212e:	81 50       	subi	r24, 0x01	; 1
    2130:	90 40       	sbci	r25, 0x00	; 0
    2132:	a0 40       	sbci	r26, 0x00	; 0
    2134:	e1 f7       	brne	.-8      	; 0x212e <main+0x1700>
    2136:	00 c0       	rjmp	.+0      	; 0x2138 <main+0x170a>
    2138:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    213a:	10 92 40 03 	sts	0x0340, r1
    213e:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2142:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2146:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("3) 2+(5*3)-9=");
    214a:	8d e8       	ldi	r24, 0x8D	; 141
    214c:	92 e0       	ldi	r25, 0x02	; 2
    214e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2152:	8f ef       	ldi	r24, 0xFF	; 255
    2154:	90 e7       	ldi	r25, 0x70	; 112
    2156:	a2 e0       	ldi	r26, 0x02	; 2
    2158:	81 50       	subi	r24, 0x01	; 1
    215a:	90 40       	sbci	r25, 0x00	; 0
    215c:	a0 40       	sbci	r26, 0x00	; 0
    215e:	e1 f7       	brne	.-8      	; 0x2158 <main+0x172a>
    2160:	00 c0       	rjmp	.+0      	; 0x2162 <main+0x1734>
    2162:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2164:	dd 24       	eor	r13, r13
    2166:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("3) 2+(5*3)-9=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2168:	80 91 3f 03 	lds	r24, 0x033F
    216c:	90 91 40 03 	lds	r25, 0x0340
    2170:	88 3c       	cpi	r24, 0xC8	; 200
    2172:	91 05       	cpc	r25, r1
    2174:	10 f0       	brcs	.+4      	; 0x217a <main+0x174c>
			{
				flag=1;
    2176:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    217a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    217e:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2180:	8f 3f       	cpi	r24, 0xFF	; 255
    2182:	91 05       	cpc	r25, r1
    2184:	c1 f4       	brne	.+48     	; 0x21b6 <main+0x1788>
    2186:	80 91 3a 03 	lds	r24, 0x033A
    218a:	88 23       	and	r24, r24
    218c:	69 f3       	breq	.-38     	; 0x2168 <main+0x173a>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    218e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2192:	82 e0       	ldi	r24, 0x02	; 2
    2194:	64 e0       	ldi	r22, 0x04	; 4
    2196:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    219a:	8b eb       	ldi	r24, 0xBB	; 187
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    21a2:	80 91 3b 03 	lds	r24, 0x033B
    21a6:	90 91 3c 03 	lds	r25, 0x033C
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	90 93 3c 03 	sts	0x033C, r25
    21b0:	80 93 3b 03 	sts	0x033B, r24
    21b4:	2a c0       	rjmp	.+84     	; 0x220a <main+0x17dc>
		}
		else if (value_read=='8')
    21b6:	88 33       	cpi	r24, 0x38	; 56
    21b8:	91 05       	cpc	r25, r1
    21ba:	a1 f4       	brne	.+40     	; 0x21e4 <main+0x17b6>
		{
			LCD_clear_screen();
    21bc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	64 e0       	ldi	r22, 0x04	; 4
    21c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    21c8:	85 ec       	ldi	r24, 0xC5	; 197
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    21d0:	80 91 3d 03 	lds	r24, 0x033D
    21d4:	90 91 3e 03 	lds	r25, 0x033E
    21d8:	01 96       	adiw	r24, 0x01	; 1
    21da:	90 93 3e 03 	sts	0x033E, r25
    21de:	80 93 3d 03 	sts	0x033D, r24
    21e2:	13 c0       	rjmp	.+38     	; 0x220a <main+0x17dc>
		}
		else
		{
			LCD_clear_screen();
    21e4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    21e8:	82 e0       	ldi	r24, 0x02	; 2
    21ea:	64 e0       	ldi	r22, 0x04	; 4
    21ec:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    21f0:	8f ec       	ldi	r24, 0xCF	; 207
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    21f8:	80 91 3b 03 	lds	r24, 0x033B
    21fc:	90 91 3c 03 	lds	r25, 0x033C
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	90 93 3c 03 	sts	0x033C, r25
    2206:	80 93 3b 03 	sts	0x033B, r24
    220a:	8f e7       	ldi	r24, 0x7F	; 127
    220c:	99 ea       	ldi	r25, 0xA9	; 169
    220e:	a3 e0       	ldi	r26, 0x03	; 3
    2210:	81 50       	subi	r24, 0x01	; 1
    2212:	90 40       	sbci	r25, 0x00	; 0
    2214:	a0 40       	sbci	r26, 0x00	; 0
    2216:	e1 f7       	brne	.-8      	; 0x2210 <main+0x17e2>
    2218:	00 c0       	rjmp	.+0      	; 0x221a <main+0x17ec>
    221a:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    221c:	10 92 40 03 	sts	0x0340, r1
    2220:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2224:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2228:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("4) ((3*8+4)-3)\5=");
    222c:	8b e9       	ldi	r24, 0x9B	; 155
    222e:	92 e0       	ldi	r25, 0x02	; 2
    2230:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2234:	8f ef       	ldi	r24, 0xFF	; 255
    2236:	90 e7       	ldi	r25, 0x70	; 112
    2238:	a2 e0       	ldi	r26, 0x02	; 2
    223a:	81 50       	subi	r24, 0x01	; 1
    223c:	90 40       	sbci	r25, 0x00	; 0
    223e:	a0 40       	sbci	r26, 0x00	; 0
    2240:	e1 f7       	brne	.-8      	; 0x223a <main+0x180c>
    2242:	00 c0       	rjmp	.+0      	; 0x2244 <main+0x1816>
    2244:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2246:	dd 24       	eor	r13, r13
    2248:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("4) ((3*8+4)-3)\5=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    224a:	80 91 3f 03 	lds	r24, 0x033F
    224e:	90 91 40 03 	lds	r25, 0x0340
    2252:	88 3c       	cpi	r24, 0xC8	; 200
    2254:	91 05       	cpc	r25, r1
    2256:	10 f0       	brcs	.+4      	; 0x225c <main+0x182e>
			{
				flag=1;
    2258:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    225c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2260:	28 2f       	mov	r18, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2264:	8f 3f       	cpi	r24, 0xFF	; 255
    2266:	91 05       	cpc	r25, r1
    2268:	c1 f4       	brne	.+48     	; 0x229a <main+0x186c>
    226a:	80 91 3a 03 	lds	r24, 0x033A
    226e:	88 23       	and	r24, r24
    2270:	61 f3       	breq	.-40     	; 0x224a <main+0x181c>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2272:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	64 e0       	ldi	r22, 0x04	; 4
    227a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    227e:	8b eb       	ldi	r24, 0xBB	; 187
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2286:	80 91 3b 03 	lds	r24, 0x033B
    228a:	90 91 3c 03 	lds	r25, 0x033C
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	90 93 3c 03 	sts	0x033C, r25
    2294:	80 93 3b 03 	sts	0x033B, r24
    2298:	2d c0       	rjmp	.+90     	; 0x22f4 <main+0x18c6>
		}
		else if (value_read=='5')
    229a:	85 33       	cpi	r24, 0x35	; 53
    229c:	91 05       	cpc	r25, r1
    229e:	b9 f4       	brne	.+46     	; 0x22ce <main+0x18a0>
		{
			LCD_SEND_CHAR(value_read);
    22a0:	82 2f       	mov	r24, r18
    22a2:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    22a6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    22aa:	82 e0       	ldi	r24, 0x02	; 2
    22ac:	64 e0       	ldi	r22, 0x04	; 4
    22ae:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    22b2:	85 ec       	ldi	r24, 0xC5	; 197
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    22ba:	80 91 3d 03 	lds	r24, 0x033D
    22be:	90 91 3e 03 	lds	r25, 0x033E
    22c2:	01 96       	adiw	r24, 0x01	; 1
    22c4:	90 93 3e 03 	sts	0x033E, r25
    22c8:	80 93 3d 03 	sts	0x033D, r24
    22cc:	13 c0       	rjmp	.+38     	; 0x22f4 <main+0x18c6>
		}
		else
		{
			LCD_clear_screen();
    22ce:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    22d2:	82 e0       	ldi	r24, 0x02	; 2
    22d4:	64 e0       	ldi	r22, 0x04	; 4
    22d6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    22da:	8f ec       	ldi	r24, 0xCF	; 207
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    22e2:	80 91 3b 03 	lds	r24, 0x033B
    22e6:	90 91 3c 03 	lds	r25, 0x033C
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	90 93 3c 03 	sts	0x033C, r25
    22f0:	80 93 3b 03 	sts	0x033B, r24
    22f4:	8f e7       	ldi	r24, 0x7F	; 127
    22f6:	99 ea       	ldi	r25, 0xA9	; 169
    22f8:	a3 e0       	ldi	r26, 0x03	; 3
    22fa:	81 50       	subi	r24, 0x01	; 1
    22fc:	90 40       	sbci	r25, 0x00	; 0
    22fe:	a0 40       	sbci	r26, 0x00	; 0
    2300:	e1 f7       	brne	.-8      	; 0x22fa <main+0x18cc>
    2302:	00 c0       	rjmp	.+0      	; 0x2304 <main+0x18d6>
    2304:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2306:	10 92 40 03 	sts	0x0340, r1
    230a:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    230e:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2312:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("5) 14-2*6+5=");
    2316:	8c ea       	ldi	r24, 0xAC	; 172
    2318:	92 e0       	ldi	r25, 0x02	; 2
    231a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    231e:	8f ef       	ldi	r24, 0xFF	; 255
    2320:	90 e7       	ldi	r25, 0x70	; 112
    2322:	a2 e0       	ldi	r26, 0x02	; 2
    2324:	81 50       	subi	r24, 0x01	; 1
    2326:	90 40       	sbci	r25, 0x00	; 0
    2328:	a0 40       	sbci	r26, 0x00	; 0
    232a:	e1 f7       	brne	.-8      	; 0x2324 <main+0x18f6>
    232c:	00 c0       	rjmp	.+0      	; 0x232e <main+0x1900>
    232e:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2330:	dd 24       	eor	r13, r13
    2332:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("5) 14-2*6+5=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2334:	80 91 3f 03 	lds	r24, 0x033F
    2338:	90 91 40 03 	lds	r25, 0x0340
    233c:	88 3c       	cpi	r24, 0xC8	; 200
    233e:	91 05       	cpc	r25, r1
    2340:	10 f0       	brcs	.+4      	; 0x2346 <main+0x1918>
			{
				flag=1;
    2342:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2346:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    234a:	28 2f       	mov	r18, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    234e:	8f 3f       	cpi	r24, 0xFF	; 255
    2350:	91 05       	cpc	r25, r1
    2352:	c1 f4       	brne	.+48     	; 0x2384 <main+0x1956>
    2354:	80 91 3a 03 	lds	r24, 0x033A
    2358:	88 23       	and	r24, r24
    235a:	61 f3       	breq	.-40     	; 0x2334 <main+0x1906>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    235c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	64 e0       	ldi	r22, 0x04	; 4
    2364:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2368:	8b eb       	ldi	r24, 0xBB	; 187
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2370:	80 91 3b 03 	lds	r24, 0x033B
    2374:	90 91 3c 03 	lds	r25, 0x033C
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	90 93 3c 03 	sts	0x033C, r25
    237e:	80 93 3b 03 	sts	0x033B, r24
    2382:	2d c0       	rjmp	.+90     	; 0x23de <main+0x19b0>
		}
		else if (value_read=='7')
    2384:	87 33       	cpi	r24, 0x37	; 55
    2386:	91 05       	cpc	r25, r1
    2388:	b9 f4       	brne	.+46     	; 0x23b8 <main+0x198a>
		{
			LCD_SEND_CHAR(value_read);
    238a:	82 2f       	mov	r24, r18
    238c:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2390:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    239c:	85 ec       	ldi	r24, 0xC5	; 197
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    23a4:	80 91 3d 03 	lds	r24, 0x033D
    23a8:	90 91 3e 03 	lds	r25, 0x033E
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	90 93 3e 03 	sts	0x033E, r25
    23b2:	80 93 3d 03 	sts	0x033D, r24
    23b6:	13 c0       	rjmp	.+38     	; 0x23de <main+0x19b0>
		}
		else
		{
			LCD_clear_screen();
    23b8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    23bc:	82 e0       	ldi	r24, 0x02	; 2
    23be:	64 e0       	ldi	r22, 0x04	; 4
    23c0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    23c4:	8f ec       	ldi	r24, 0xCF	; 207
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    23cc:	80 91 3b 03 	lds	r24, 0x033B
    23d0:	90 91 3c 03 	lds	r25, 0x033C
    23d4:	01 96       	adiw	r24, 0x01	; 1
    23d6:	90 93 3c 03 	sts	0x033C, r25
    23da:	80 93 3b 03 	sts	0x033B, r24
    23de:	8f e7       	ldi	r24, 0x7F	; 127
    23e0:	99 ea       	ldi	r25, 0xA9	; 169
    23e2:	a3 e0       	ldi	r26, 0x03	; 3
    23e4:	81 50       	subi	r24, 0x01	; 1
    23e6:	90 40       	sbci	r25, 0x00	; 0
    23e8:	a0 40       	sbci	r26, 0x00	; 0
    23ea:	e1 f7       	brne	.-8      	; 0x23e4 <main+0x19b6>
    23ec:	00 c0       	rjmp	.+0      	; 0x23ee <main+0x19c0>
    23ee:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    23f0:	10 92 40 03 	sts	0x0340, r1
    23f4:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    23f8:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    23fc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("6) 50\5+4*10-41=");
    2400:	89 eb       	ldi	r24, 0xB9	; 185
    2402:	92 e0       	ldi	r25, 0x02	; 2
    2404:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2408:	8f ef       	ldi	r24, 0xFF	; 255
    240a:	90 e7       	ldi	r25, 0x70	; 112
    240c:	a2 e0       	ldi	r26, 0x02	; 2
    240e:	81 50       	subi	r24, 0x01	; 1
    2410:	90 40       	sbci	r25, 0x00	; 0
    2412:	a0 40       	sbci	r26, 0x00	; 0
    2414:	e1 f7       	brne	.-8      	; 0x240e <main+0x19e0>
    2416:	00 c0       	rjmp	.+0      	; 0x2418 <main+0x19ea>
    2418:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    241a:	dd 24       	eor	r13, r13
    241c:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("6) 50\5+4*10-41=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    241e:	80 91 3f 03 	lds	r24, 0x033F
    2422:	90 91 40 03 	lds	r25, 0x0340
    2426:	88 3c       	cpi	r24, 0xC8	; 200
    2428:	91 05       	cpc	r25, r1
    242a:	10 f0       	brcs	.+4      	; 0x2430 <main+0x1a02>
			{
				flag=1;
    242c:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2430:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2434:	28 2f       	mov	r18, r24
    2436:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2438:	8f 3f       	cpi	r24, 0xFF	; 255
    243a:	91 05       	cpc	r25, r1
    243c:	c1 f4       	brne	.+48     	; 0x246e <main+0x1a40>
    243e:	80 91 3a 03 	lds	r24, 0x033A
    2442:	88 23       	and	r24, r24
    2444:	61 f3       	breq	.-40     	; 0x241e <main+0x19f0>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2446:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    244a:	82 e0       	ldi	r24, 0x02	; 2
    244c:	64 e0       	ldi	r22, 0x04	; 4
    244e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2452:	8b eb       	ldi	r24, 0xBB	; 187
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    245a:	80 91 3b 03 	lds	r24, 0x033B
    245e:	90 91 3c 03 	lds	r25, 0x033C
    2462:	01 96       	adiw	r24, 0x01	; 1
    2464:	90 93 3c 03 	sts	0x033C, r25
    2468:	80 93 3b 03 	sts	0x033B, r24
    246c:	2d c0       	rjmp	.+90     	; 0x24c8 <main+0x1a9a>
		}
		else if (value_read=='9')
    246e:	89 33       	cpi	r24, 0x39	; 57
    2470:	91 05       	cpc	r25, r1
    2472:	b9 f4       	brne	.+46     	; 0x24a2 <main+0x1a74>
		{
			LCD_SEND_CHAR(value_read);
    2474:	82 2f       	mov	r24, r18
    2476:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    247a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    247e:	82 e0       	ldi	r24, 0x02	; 2
    2480:	64 e0       	ldi	r22, 0x04	; 4
    2482:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2486:	85 ec       	ldi	r24, 0xC5	; 197
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    248e:	80 91 3d 03 	lds	r24, 0x033D
    2492:	90 91 3e 03 	lds	r25, 0x033E
    2496:	01 96       	adiw	r24, 0x01	; 1
    2498:	90 93 3e 03 	sts	0x033E, r25
    249c:	80 93 3d 03 	sts	0x033D, r24
    24a0:	13 c0       	rjmp	.+38     	; 0x24c8 <main+0x1a9a>
		}
		else
		{
			LCD_clear_screen();
    24a2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    24a6:	82 e0       	ldi	r24, 0x02	; 2
    24a8:	64 e0       	ldi	r22, 0x04	; 4
    24aa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    24ae:	8f ec       	ldi	r24, 0xCF	; 207
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    24b6:	80 91 3b 03 	lds	r24, 0x033B
    24ba:	90 91 3c 03 	lds	r25, 0x033C
    24be:	01 96       	adiw	r24, 0x01	; 1
    24c0:	90 93 3c 03 	sts	0x033C, r25
    24c4:	80 93 3b 03 	sts	0x033B, r24
    24c8:	8f e7       	ldi	r24, 0x7F	; 127
    24ca:	99 ea       	ldi	r25, 0xA9	; 169
    24cc:	a3 e0       	ldi	r26, 0x03	; 3
    24ce:	81 50       	subi	r24, 0x01	; 1
    24d0:	90 40       	sbci	r25, 0x00	; 0
    24d2:	a0 40       	sbci	r26, 0x00	; 0
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <main+0x1aa0>
    24d6:	00 c0       	rjmp	.+0      	; 0x24d8 <main+0x1aaa>
    24d8:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    24da:	10 92 40 03 	sts	0x0340, r1
    24de:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    24e2:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    24e6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("7) 50*2-190\2=");
    24ea:	89 ec       	ldi	r24, 0xC9	; 201
    24ec:	92 e0       	ldi	r25, 0x02	; 2
    24ee:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    24f2:	8f ef       	ldi	r24, 0xFF	; 255
    24f4:	90 e7       	ldi	r25, 0x70	; 112
    24f6:	a2 e0       	ldi	r26, 0x02	; 2
    24f8:	81 50       	subi	r24, 0x01	; 1
    24fa:	90 40       	sbci	r25, 0x00	; 0
    24fc:	a0 40       	sbci	r26, 0x00	; 0
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <main+0x1aca>
    2500:	00 c0       	rjmp	.+0      	; 0x2502 <main+0x1ad4>
    2502:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2504:	dd 24       	eor	r13, r13
    2506:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("7) 50*2-190\2=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2508:	80 91 3f 03 	lds	r24, 0x033F
    250c:	90 91 40 03 	lds	r25, 0x0340
    2510:	88 3c       	cpi	r24, 0xC8	; 200
    2512:	91 05       	cpc	r25, r1
    2514:	10 f0       	brcs	.+4      	; 0x251a <main+0x1aec>
			{
				flag=1;
    2516:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    251a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    251e:	28 2f       	mov	r18, r24
    2520:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2522:	8f 3f       	cpi	r24, 0xFF	; 255
    2524:	91 05       	cpc	r25, r1
    2526:	c1 f4       	brne	.+48     	; 0x2558 <main+0x1b2a>
    2528:	80 91 3a 03 	lds	r24, 0x033A
    252c:	88 23       	and	r24, r24
    252e:	61 f3       	breq	.-40     	; 0x2508 <main+0x1ada>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2530:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	64 e0       	ldi	r22, 0x04	; 4
    2538:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    253c:	8b eb       	ldi	r24, 0xBB	; 187
    253e:	90 e0       	ldi	r25, 0x00	; 0
    2540:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2544:	80 91 3b 03 	lds	r24, 0x033B
    2548:	90 91 3c 03 	lds	r25, 0x033C
    254c:	01 96       	adiw	r24, 0x01	; 1
    254e:	90 93 3c 03 	sts	0x033C, r25
    2552:	80 93 3b 03 	sts	0x033B, r24
    2556:	2d c0       	rjmp	.+90     	; 0x25b2 <main+0x1b84>
		}
		else if (value_read=='5')
    2558:	85 33       	cpi	r24, 0x35	; 53
    255a:	91 05       	cpc	r25, r1
    255c:	b9 f4       	brne	.+46     	; 0x258c <main+0x1b5e>
		{
			LCD_SEND_CHAR(value_read);
    255e:	82 2f       	mov	r24, r18
    2560:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2564:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2568:	82 e0       	ldi	r24, 0x02	; 2
    256a:	64 e0       	ldi	r22, 0x04	; 4
    256c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2570:	85 ec       	ldi	r24, 0xC5	; 197
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2578:	80 91 3d 03 	lds	r24, 0x033D
    257c:	90 91 3e 03 	lds	r25, 0x033E
    2580:	01 96       	adiw	r24, 0x01	; 1
    2582:	90 93 3e 03 	sts	0x033E, r25
    2586:	80 93 3d 03 	sts	0x033D, r24
    258a:	13 c0       	rjmp	.+38     	; 0x25b2 <main+0x1b84>
		}
		else
		{
			LCD_clear_screen();
    258c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	64 e0       	ldi	r22, 0x04	; 4
    2594:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2598:	8f ec       	ldi	r24, 0xCF	; 207
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    25a0:	80 91 3b 03 	lds	r24, 0x033B
    25a4:	90 91 3c 03 	lds	r25, 0x033C
    25a8:	01 96       	adiw	r24, 0x01	; 1
    25aa:	90 93 3c 03 	sts	0x033C, r25
    25ae:	80 93 3b 03 	sts	0x033B, r24
    25b2:	8f e7       	ldi	r24, 0x7F	; 127
    25b4:	99 ea       	ldi	r25, 0xA9	; 169
    25b6:	a3 e0       	ldi	r26, 0x03	; 3
    25b8:	81 50       	subi	r24, 0x01	; 1
    25ba:	90 40       	sbci	r25, 0x00	; 0
    25bc:	a0 40       	sbci	r26, 0x00	; 0
    25be:	e1 f7       	brne	.-8      	; 0x25b8 <main+0x1b8a>
    25c0:	00 c0       	rjmp	.+0      	; 0x25c2 <main+0x1b94>
    25c2:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    25c4:	10 92 40 03 	sts	0x0340, r1
    25c8:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    25cc:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    25d0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("8) 14*2-28=");
    25d4:	87 ed       	ldi	r24, 0xD7	; 215
    25d6:	92 e0       	ldi	r25, 0x02	; 2
    25d8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    25dc:	8f ef       	ldi	r24, 0xFF	; 255
    25de:	90 e7       	ldi	r25, 0x70	; 112
    25e0:	a2 e0       	ldi	r26, 0x02	; 2
    25e2:	81 50       	subi	r24, 0x01	; 1
    25e4:	90 40       	sbci	r25, 0x00	; 0
    25e6:	a0 40       	sbci	r26, 0x00	; 0
    25e8:	e1 f7       	brne	.-8      	; 0x25e2 <main+0x1bb4>
    25ea:	00 c0       	rjmp	.+0      	; 0x25ec <main+0x1bbe>
    25ec:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    25ee:	dd 24       	eor	r13, r13
    25f0:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("8) 14*2-28=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    25f2:	80 91 3f 03 	lds	r24, 0x033F
    25f6:	90 91 40 03 	lds	r25, 0x0340
    25fa:	88 3c       	cpi	r24, 0xC8	; 200
    25fc:	91 05       	cpc	r25, r1
    25fe:	10 f0       	brcs	.+4      	; 0x2604 <main+0x1bd6>
			{
				flag=1;
    2600:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2604:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2608:	28 2f       	mov	r18, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    260c:	8f 3f       	cpi	r24, 0xFF	; 255
    260e:	91 05       	cpc	r25, r1
    2610:	c1 f4       	brne	.+48     	; 0x2642 <main+0x1c14>
    2612:	80 91 3a 03 	lds	r24, 0x033A
    2616:	88 23       	and	r24, r24
    2618:	61 f3       	breq	.-40     	; 0x25f2 <main+0x1bc4>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    261a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    261e:	82 e0       	ldi	r24, 0x02	; 2
    2620:	64 e0       	ldi	r22, 0x04	; 4
    2622:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2626:	8b eb       	ldi	r24, 0xBB	; 187
    2628:	90 e0       	ldi	r25, 0x00	; 0
    262a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    262e:	80 91 3b 03 	lds	r24, 0x033B
    2632:	90 91 3c 03 	lds	r25, 0x033C
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	90 93 3c 03 	sts	0x033C, r25
    263c:	80 93 3b 03 	sts	0x033B, r24
    2640:	2d c0       	rjmp	.+90     	; 0x269c <main+0x1c6e>
		}
		else if (value_read=='0')
    2642:	80 33       	cpi	r24, 0x30	; 48
    2644:	91 05       	cpc	r25, r1
    2646:	b9 f4       	brne	.+46     	; 0x2676 <main+0x1c48>
		{
			LCD_SEND_CHAR(value_read);
    2648:	82 2f       	mov	r24, r18
    264a:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    264e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2652:	82 e0       	ldi	r24, 0x02	; 2
    2654:	64 e0       	ldi	r22, 0x04	; 4
    2656:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    265a:	85 ec       	ldi	r24, 0xC5	; 197
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2662:	80 91 3d 03 	lds	r24, 0x033D
    2666:	90 91 3e 03 	lds	r25, 0x033E
    266a:	01 96       	adiw	r24, 0x01	; 1
    266c:	90 93 3e 03 	sts	0x033E, r25
    2670:	80 93 3d 03 	sts	0x033D, r24
    2674:	13 c0       	rjmp	.+38     	; 0x269c <main+0x1c6e>
		}
		else
		{
			LCD_clear_screen();
    2676:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    267a:	82 e0       	ldi	r24, 0x02	; 2
    267c:	64 e0       	ldi	r22, 0x04	; 4
    267e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2682:	8f ec       	ldi	r24, 0xCF	; 207
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    268a:	80 91 3b 03 	lds	r24, 0x033B
    268e:	90 91 3c 03 	lds	r25, 0x033C
    2692:	01 96       	adiw	r24, 0x01	; 1
    2694:	90 93 3c 03 	sts	0x033C, r25
    2698:	80 93 3b 03 	sts	0x033B, r24
    269c:	8f e7       	ldi	r24, 0x7F	; 127
    269e:	99 ea       	ldi	r25, 0xA9	; 169
    26a0:	a3 e0       	ldi	r26, 0x03	; 3
    26a2:	81 50       	subi	r24, 0x01	; 1
    26a4:	90 40       	sbci	r25, 0x00	; 0
    26a6:	a0 40       	sbci	r26, 0x00	; 0
    26a8:	e1 f7       	brne	.-8      	; 0x26a2 <main+0x1c74>
    26aa:	00 c0       	rjmp	.+0      	; 0x26ac <main+0x1c7e>
    26ac:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    26ae:	10 92 40 03 	sts	0x0340, r1
    26b2:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    26b6:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    26ba:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("9) 3*4-10\2=");
    26be:	83 ee       	ldi	r24, 0xE3	; 227
    26c0:	92 e0       	ldi	r25, 0x02	; 2
    26c2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    26c6:	8f ef       	ldi	r24, 0xFF	; 255
    26c8:	90 e7       	ldi	r25, 0x70	; 112
    26ca:	a2 e0       	ldi	r26, 0x02	; 2
    26cc:	81 50       	subi	r24, 0x01	; 1
    26ce:	90 40       	sbci	r25, 0x00	; 0
    26d0:	a0 40       	sbci	r26, 0x00	; 0
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <main+0x1c9e>
    26d4:	00 c0       	rjmp	.+0      	; 0x26d6 <main+0x1ca8>
    26d6:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    26d8:	dd 24       	eor	r13, r13
    26da:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("9) 3*4-10\2=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    26dc:	80 91 3f 03 	lds	r24, 0x033F
    26e0:	90 91 40 03 	lds	r25, 0x0340
    26e4:	88 3c       	cpi	r24, 0xC8	; 200
    26e6:	91 05       	cpc	r25, r1
    26e8:	10 f0       	brcs	.+4      	; 0x26ee <main+0x1cc0>
			{
				flag=1;
    26ea:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    26ee:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    26f2:	28 2f       	mov	r18, r24
    26f4:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    26f6:	8f 3f       	cpi	r24, 0xFF	; 255
    26f8:	91 05       	cpc	r25, r1
    26fa:	c1 f4       	brne	.+48     	; 0x272c <main+0x1cfe>
    26fc:	80 91 3a 03 	lds	r24, 0x033A
    2700:	88 23       	and	r24, r24
    2702:	61 f3       	breq	.-40     	; 0x26dc <main+0x1cae>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2704:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2708:	82 e0       	ldi	r24, 0x02	; 2
    270a:	64 e0       	ldi	r22, 0x04	; 4
    270c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2710:	8b eb       	ldi	r24, 0xBB	; 187
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2718:	80 91 3b 03 	lds	r24, 0x033B
    271c:	90 91 3c 03 	lds	r25, 0x033C
    2720:	01 96       	adiw	r24, 0x01	; 1
    2722:	90 93 3c 03 	sts	0x033C, r25
    2726:	80 93 3b 03 	sts	0x033B, r24
    272a:	2d c0       	rjmp	.+90     	; 0x2786 <main+0x1d58>
		}
		else if (value_read=='7')
    272c:	87 33       	cpi	r24, 0x37	; 55
    272e:	91 05       	cpc	r25, r1
    2730:	b9 f4       	brne	.+46     	; 0x2760 <main+0x1d32>
		{
			LCD_SEND_CHAR(value_read);
    2732:	82 2f       	mov	r24, r18
    2734:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2738:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    273c:	82 e0       	ldi	r24, 0x02	; 2
    273e:	64 e0       	ldi	r22, 0x04	; 4
    2740:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2744:	85 ec       	ldi	r24, 0xC5	; 197
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    274c:	80 91 3d 03 	lds	r24, 0x033D
    2750:	90 91 3e 03 	lds	r25, 0x033E
    2754:	01 96       	adiw	r24, 0x01	; 1
    2756:	90 93 3e 03 	sts	0x033E, r25
    275a:	80 93 3d 03 	sts	0x033D, r24
    275e:	13 c0       	rjmp	.+38     	; 0x2786 <main+0x1d58>
		}
		else
		{
			LCD_clear_screen();
    2760:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2764:	82 e0       	ldi	r24, 0x02	; 2
    2766:	64 e0       	ldi	r22, 0x04	; 4
    2768:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    276c:	8f ec       	ldi	r24, 0xCF	; 207
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2774:	80 91 3b 03 	lds	r24, 0x033B
    2778:	90 91 3c 03 	lds	r25, 0x033C
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	90 93 3c 03 	sts	0x033C, r25
    2782:	80 93 3b 03 	sts	0x033B, r24
    2786:	8f e7       	ldi	r24, 0x7F	; 127
    2788:	99 ea       	ldi	r25, 0xA9	; 169
    278a:	a3 e0       	ldi	r26, 0x03	; 3
    278c:	81 50       	subi	r24, 0x01	; 1
    278e:	90 40       	sbci	r25, 0x00	; 0
    2790:	a0 40       	sbci	r26, 0x00	; 0
    2792:	e1 f7       	brne	.-8      	; 0x278c <main+0x1d5e>
    2794:	00 c0       	rjmp	.+0      	; 0x2796 <main+0x1d68>
    2796:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2798:	10 92 40 03 	sts	0x0340, r1
    279c:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    27a0:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    27a4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("10) 14-1*6+1=");
    27a8:	8f ee       	ldi	r24, 0xEF	; 239
    27aa:	92 e0       	ldi	r25, 0x02	; 2
    27ac:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    27b0:	8f ef       	ldi	r24, 0xFF	; 255
    27b2:	90 e7       	ldi	r25, 0x70	; 112
    27b4:	a2 e0       	ldi	r26, 0x02	; 2
    27b6:	81 50       	subi	r24, 0x01	; 1
    27b8:	90 40       	sbci	r25, 0x00	; 0
    27ba:	a0 40       	sbci	r26, 0x00	; 0
    27bc:	e1 f7       	brne	.-8      	; 0x27b6 <main+0x1d88>
    27be:	00 c0       	rjmp	.+0      	; 0x27c0 <main+0x1d92>
    27c0:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    27c2:	dd 24       	eor	r13, r13
    27c4:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("10) 14-1*6+1=");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    27c6:	80 91 3f 03 	lds	r24, 0x033F
    27ca:	90 91 40 03 	lds	r25, 0x0340
    27ce:	88 3c       	cpi	r24, 0xC8	; 200
    27d0:	91 05       	cpc	r25, r1
    27d2:	10 f0       	brcs	.+4      	; 0x27d8 <main+0x1daa>
			{
				flag=1;
    27d4:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    27d8:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    27dc:	28 2f       	mov	r18, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    27e0:	8f 3f       	cpi	r24, 0xFF	; 255
    27e2:	91 05       	cpc	r25, r1
    27e4:	c1 f4       	brne	.+48     	; 0x2816 <main+0x1de8>
    27e6:	80 91 3a 03 	lds	r24, 0x033A
    27ea:	88 23       	and	r24, r24
    27ec:	61 f3       	breq	.-40     	; 0x27c6 <main+0x1d98>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    27ee:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	64 e0       	ldi	r22, 0x04	; 4
    27f6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    27fa:	8b eb       	ldi	r24, 0xBB	; 187
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2802:	80 91 3b 03 	lds	r24, 0x033B
    2806:	90 91 3c 03 	lds	r25, 0x033C
    280a:	01 96       	adiw	r24, 0x01	; 1
    280c:	90 93 3c 03 	sts	0x033C, r25
    2810:	80 93 3b 03 	sts	0x033B, r24
    2814:	2d c0       	rjmp	.+90     	; 0x2870 <main+0x1e42>
		}
		else if (value_read=='9')
    2816:	89 33       	cpi	r24, 0x39	; 57
    2818:	91 05       	cpc	r25, r1
    281a:	b9 f4       	brne	.+46     	; 0x284a <main+0x1e1c>
		{
			LCD_SEND_CHAR(value_read);
    281c:	82 2f       	mov	r24, r18
    281e:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2822:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2826:	82 e0       	ldi	r24, 0x02	; 2
    2828:	64 e0       	ldi	r22, 0x04	; 4
    282a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    282e:	85 ec       	ldi	r24, 0xC5	; 197
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2836:	80 91 3d 03 	lds	r24, 0x033D
    283a:	90 91 3e 03 	lds	r25, 0x033E
    283e:	01 96       	adiw	r24, 0x01	; 1
    2840:	90 93 3e 03 	sts	0x033E, r25
    2844:	80 93 3d 03 	sts	0x033D, r24
    2848:	13 c0       	rjmp	.+38     	; 0x2870 <main+0x1e42>
		}
		else
		{
			LCD_clear_screen();
    284a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	64 e0       	ldi	r22, 0x04	; 4
    2852:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2856:	8f ec       	ldi	r24, 0xCF	; 207
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    285e:	80 91 3b 03 	lds	r24, 0x033B
    2862:	90 91 3c 03 	lds	r25, 0x033C
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	90 93 3c 03 	sts	0x033C, r25
    286c:	80 93 3b 03 	sts	0x033B, r24
    2870:	8f e7       	ldi	r24, 0x7F	; 127
    2872:	99 ea       	ldi	r25, 0xA9	; 169
    2874:	a3 e0       	ldi	r26, 0x03	; 3
    2876:	81 50       	subi	r24, 0x01	; 1
    2878:	90 40       	sbci	r25, 0x00	; 0
    287a:	a0 40       	sbci	r26, 0x00	; 0
    287c:	e1 f7       	brne	.-8      	; 0x2876 <main+0x1e48>
    287e:	00 c0       	rjmp	.+0      	; 0x2880 <main+0x1e52>
    2880:	00 00       	nop
		}
		_delay_ms(150);
		LCD_clear_screen();
    2882:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("the correct=");
    2886:	8b e5       	ldi	r24, 0x5B	; 91
    2888:	91 e0       	ldi	r25, 0x01	; 1
    288a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		LCD_MOVE_CURSOR(1,13);
    288e:	81 e0       	ldi	r24, 0x01	; 1
    2890:	6d e0       	ldi	r22, 0x0D	; 13
    2892:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_CHAR(counter1+48);
    2896:	80 91 3d 03 	lds	r24, 0x033D
    289a:	90 91 3e 03 	lds	r25, 0x033E
    289e:	80 5d       	subi	r24, 0xD0	; 208
    28a0:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
		LCD_MOVE_CURSOR(2,1);
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	61 e0       	ldi	r22, 0x01	; 1
    28a8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("the wrong=");
    28ac:	88 e6       	ldi	r24, 0x68	; 104
    28ae:	91 e0       	ldi	r25, 0x01	; 1
    28b0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		LCD_MOVE_CURSOR(2,11);
    28b4:	82 e0       	ldi	r24, 0x02	; 2
    28b6:	6b e0       	ldi	r22, 0x0B	; 11
    28b8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_CHAR(counter2+48);
    28bc:	80 91 3b 03 	lds	r24, 0x033B
    28c0:	90 91 3c 03 	lds	r25, 0x033C
    28c4:	80 5d       	subi	r24, 0xD0	; 208
    28c6:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
    28ca:	8f ef       	ldi	r24, 0xFF	; 255
    28cc:	97 e8       	ldi	r25, 0x87	; 135
    28ce:	a3 e1       	ldi	r26, 0x13	; 19
    28d0:	81 50       	subi	r24, 0x01	; 1
    28d2:	90 40       	sbci	r25, 0x00	; 0
    28d4:	a0 40       	sbci	r26, 0x00	; 0
    28d6:	e1 f7       	brne	.-8      	; 0x28d0 <main+0x1ea2>
    28d8:	00 c0       	rjmp	.+0      	; 0x28da <main+0x1eac>
    28da:	00 00       	nop
		_delay_ms(800);
		LCD_clear_screen();
    28dc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		if(counter1>counter2)
    28e0:	80 91 3d 03 	lds	r24, 0x033D
    28e4:	90 91 3e 03 	lds	r25, 0x033E
    28e8:	20 91 3b 03 	lds	r18, 0x033B
    28ec:	30 91 3c 03 	lds	r19, 0x033C
    28f0:	28 17       	cp	r18, r24
    28f2:	39 07       	cpc	r19, r25
    28f4:	78 f5       	brcc	.+94     	; 0x2954 <main+0x1f26>
		{
			counter=0;
    28f6:	10 92 40 03 	sts	0x0340, r1
    28fa:	10 92 3f 03 	sts	0x033F, r1
			counter1=0;
    28fe:	10 92 3e 03 	sts	0x033E, r1
    2902:	10 92 3d 03 	sts	0x033D, r1
			counter2=0;
    2906:	10 92 3c 03 	sts	0x033C, r1
    290a:	10 92 3b 03 	sts	0x033B, r1
			LCD_SEND_STRING("succed");
    290e:	83 e7       	ldi	r24, 0x73	; 115
    2910:	91 e0       	ldi	r25, 0x01	; 1
    2912:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2916:	8f e7       	ldi	r24, 0x7F	; 127
    2918:	99 ea       	ldi	r25, 0xA9	; 169
    291a:	a3 e0       	ldi	r26, 0x03	; 3
    291c:	81 50       	subi	r24, 0x01	; 1
    291e:	90 40       	sbci	r25, 0x00	; 0
    2920:	a0 40       	sbci	r26, 0x00	; 0
    2922:	e1 f7       	brne	.-8      	; 0x291c <main+0x1eee>
    2924:	00 c0       	rjmp	.+0      	; 0x2926 <main+0x1ef8>
    2926:	00 00       	nop
			_delay_ms(150);
			LCD_clear_screen();
    2928:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_SEND_STRING("up to test(4)");
    292c:	8d ef       	ldi	r24, 0xFD	; 253
    292e:	92 e0       	ldi	r25, 0x02	; 2
    2930:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2934:	8f ef       	ldi	r24, 0xFF	; 255
    2936:	91 ee       	ldi	r25, 0xE1	; 225
    2938:	a4 e0       	ldi	r26, 0x04	; 4
    293a:	81 50       	subi	r24, 0x01	; 1
    293c:	90 40       	sbci	r25, 0x00	; 0
    293e:	a0 40       	sbci	r26, 0x00	; 0
    2940:	e1 f7       	brne	.-8      	; 0x293a <main+0x1f0c>
    2942:	00 c0       	rjmp	.+0      	; 0x2944 <main+0x1f16>
    2944:	00 00       	nop
			_delay_ms(200);
			LCD_clear_screen();
    2946:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			flag3=1;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	80 93 37 03 	sts	0x0337, r24
    2950:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>
			
		}
		else
		{
			flag2=0;
    2954:	10 92 38 03 	sts	0x0338, r1
			LCD_MOVE_CURSOR(1,5);
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	65 e0       	ldi	r22, 0x05	; 5
    295c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("failed");
    2960:	88 e8       	ldi	r24, 0x88	; 136
    2962:	91 e0       	ldi	r25, 0x01	; 1
    2964:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			LCD_MOVE_CURSOR(2,4);
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	64 e0       	ldi	r22, 0x04	; 4
    296c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("Try again");
    2970:	8f e8       	ldi	r24, 0x8F	; 143
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2978:	8f ef       	ldi	r24, 0xFF	; 255
    297a:	93 ec       	ldi	r25, 0xC3	; 195
    297c:	a9 e0       	ldi	r26, 0x09	; 9
    297e:	81 50       	subi	r24, 0x01	; 1
    2980:	90 40       	sbci	r25, 0x00	; 0
    2982:	a0 40       	sbci	r26, 0x00	; 0
    2984:	e1 f7       	brne	.-8      	; 0x297e <main+0x1f50>
    2986:	00 c0       	rjmp	.+0      	; 0x2988 <main+0x1f5a>
    2988:	00 00       	nop
    298a:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>
		
		goto L1;		
	}	
	else
	{
		LCD_clear_screen();
    298e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("  Test3 locked  ");
    2992:	8b e0       	ldi	r24, 0x0B	; 11
    2994:	93 e0       	ldi	r25, 0x03	; 3
    2996:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    299a:	8f ef       	ldi	r24, 0xFF	; 255
    299c:	96 e1       	ldi	r25, 0x16	; 22
    299e:	a1 e1       	ldi	r26, 0x11	; 17
    29a0:	81 50       	subi	r24, 0x01	; 1
    29a2:	90 40       	sbci	r25, 0x00	; 0
    29a4:	a0 40       	sbci	r26, 0x00	; 0
    29a6:	e1 f7       	brne	.-8      	; 0x29a0 <main+0x1f72>
    29a8:	00 c0       	rjmp	.+0      	; 0x29aa <main+0x1f7c>
    29aa:	00 00       	nop
		_delay_ms(700);
		LCD_clear_screen();
    29ac:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		goto L1;
    29b0:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>
}
	
	
	
	
	else if (value_read == '4')
    29b4:	84 33       	cpi	r24, 0x34	; 52
    29b6:	91 05       	cpc	r25, r1
    29b8:	11 f0       	breq	.+4      	; 0x29be <main+0x1f90>
    29ba:	0c 94 6a 05 	jmp	0xad4	; 0xad4 <main+0xa6>
	{
		if (value_read=='4'&& flag1==1 && flag2==1 && flag3==1)
    29be:	80 91 39 03 	lds	r24, 0x0339
    29c2:	81 30       	cpi	r24, 0x01	; 1
    29c4:	09 f0       	breq	.+2      	; 0x29c8 <main+0x1f9a>
    29c6:	07 c5       	rjmp	.+2574   	; 0x33d6 <main+0x29a8>
    29c8:	80 91 38 03 	lds	r24, 0x0338
    29cc:	81 30       	cpi	r24, 0x01	; 1
    29ce:	09 f0       	breq	.+2      	; 0x29d2 <main+0x1fa4>
    29d0:	02 c5       	rjmp	.+2564   	; 0x33d6 <main+0x29a8>
    29d2:	80 91 37 03 	lds	r24, 0x0337
    29d6:	81 30       	cpi	r24, 0x01	; 1
    29d8:	09 f0       	breq	.+2      	; 0x29dc <main+0x1fae>
    29da:	fd c4       	rjmp	.+2554   	; 0x33d6 <main+0x29a8>
		{
		flag3=1;
		counter=0;
    29dc:	10 92 40 03 	sts	0x0340, r1
    29e0:	10 92 3f 03 	sts	0x033F, r1
		LCD_clear_screen();
    29e4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_MOVE_CURSOR(1,4);
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	64 e0       	ldi	r22, 0x04	; 4
    29ec:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("Test(4)");
    29f0:	8c e1       	ldi	r24, 0x1C	; 28
    29f2:	93 e0       	ldi	r25, 0x03	; 3
    29f4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    29f8:	8f ef       	ldi	r24, 0xFF	; 255
    29fa:	91 ee       	ldi	r25, 0xE1	; 225
    29fc:	a4 e0       	ldi	r26, 0x04	; 4
    29fe:	81 50       	subi	r24, 0x01	; 1
    2a00:	90 40       	sbci	r25, 0x00	; 0
    2a02:	a0 40       	sbci	r26, 0x00	; 0
    2a04:	e1 f7       	brne	.-8      	; 0x29fe <main+0x1fd0>
    2a06:	00 c0       	rjmp	.+0      	; 0x2a08 <main+0x1fda>
    2a08:	00 00       	nop
		_delay_ms(200);
		LCD_clear_screen();
    2a0a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("1) 3+..=10");
    2a0e:	c5 01       	movw	r24, r10
    2a10:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		
		do
		{
			if (counter>=200)
			{
				flag=1;
    2a14:	dd 24       	eor	r13, r13
    2a16:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("1) 3+..=10");
		
		do
		{
			if (counter>=200)
    2a18:	80 91 3f 03 	lds	r24, 0x033F
    2a1c:	90 91 40 03 	lds	r25, 0x0340
    2a20:	88 3c       	cpi	r24, 0xC8	; 200
    2a22:	91 05       	cpc	r25, r1
    2a24:	10 f0       	brcs	.+4      	; 0x2a2a <main+0x1ffc>
			{
				flag=1;
    2a26:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2a2a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2a30:	8f 3f       	cpi	r24, 0xFF	; 255
    2a32:	91 05       	cpc	r25, r1
    2a34:	c1 f4       	brne	.+48     	; 0x2a66 <main+0x2038>
    2a36:	80 91 3a 03 	lds	r24, 0x033A
    2a3a:	88 23       	and	r24, r24
    2a3c:	69 f3       	breq	.-38     	; 0x2a18 <main+0x1fea>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2a3e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2a42:	82 e0       	ldi	r24, 0x02	; 2
    2a44:	64 e0       	ldi	r22, 0x04	; 4
    2a46:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2a4a:	8b eb       	ldi	r24, 0xBB	; 187
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2a52:	80 91 3b 03 	lds	r24, 0x033B
    2a56:	90 91 3c 03 	lds	r25, 0x033C
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	90 93 3c 03 	sts	0x033C, r25
    2a60:	80 93 3b 03 	sts	0x033B, r24
    2a64:	2a c0       	rjmp	.+84     	; 0x2aba <main+0x208c>
		}
		else if (value_read=='7')
    2a66:	87 33       	cpi	r24, 0x37	; 55
    2a68:	91 05       	cpc	r25, r1
    2a6a:	a1 f4       	brne	.+40     	; 0x2a94 <main+0x2066>
		{
			LCD_clear_screen();
    2a6c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2a70:	82 e0       	ldi	r24, 0x02	; 2
    2a72:	64 e0       	ldi	r22, 0x04	; 4
    2a74:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2a78:	85 ec       	ldi	r24, 0xC5	; 197
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2a80:	80 91 3d 03 	lds	r24, 0x033D
    2a84:	90 91 3e 03 	lds	r25, 0x033E
    2a88:	01 96       	adiw	r24, 0x01	; 1
    2a8a:	90 93 3e 03 	sts	0x033E, r25
    2a8e:	80 93 3d 03 	sts	0x033D, r24
    2a92:	13 c0       	rjmp	.+38     	; 0x2aba <main+0x208c>
		}
		else
		{
			LCD_clear_screen();
    2a94:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2a98:	82 e0       	ldi	r24, 0x02	; 2
    2a9a:	64 e0       	ldi	r22, 0x04	; 4
    2a9c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2aa0:	8f ec       	ldi	r24, 0xCF	; 207
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2aa8:	80 91 3b 03 	lds	r24, 0x033B
    2aac:	90 91 3c 03 	lds	r25, 0x033C
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	90 93 3c 03 	sts	0x033C, r25
    2ab6:	80 93 3b 03 	sts	0x033B, r24
    2aba:	8f e7       	ldi	r24, 0x7F	; 127
    2abc:	99 ea       	ldi	r25, 0xA9	; 169
    2abe:	a3 e0       	ldi	r26, 0x03	; 3
    2ac0:	81 50       	subi	r24, 0x01	; 1
    2ac2:	90 40       	sbci	r25, 0x00	; 0
    2ac4:	a0 40       	sbci	r26, 0x00	; 0
    2ac6:	e1 f7       	brne	.-8      	; 0x2ac0 <main+0x2092>
    2ac8:	00 c0       	rjmp	.+0      	; 0x2aca <main+0x209c>
    2aca:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2acc:	10 92 40 03 	sts	0x0340, r1
    2ad0:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2ad4:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2ad8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("2) 13-..=10");
    2adc:	c4 01       	movw	r24, r8
    2ade:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2ae2:	8f ef       	ldi	r24, 0xFF	; 255
    2ae4:	90 e7       	ldi	r25, 0x70	; 112
    2ae6:	a2 e0       	ldi	r26, 0x02	; 2
    2ae8:	81 50       	subi	r24, 0x01	; 1
    2aea:	90 40       	sbci	r25, 0x00	; 0
    2aec:	a0 40       	sbci	r26, 0x00	; 0
    2aee:	e1 f7       	brne	.-8      	; 0x2ae8 <main+0x20ba>
    2af0:	00 c0       	rjmp	.+0      	; 0x2af2 <main+0x20c4>
    2af2:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2af4:	dd 24       	eor	r13, r13
    2af6:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("2) 13-..=10");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2af8:	80 91 3f 03 	lds	r24, 0x033F
    2afc:	90 91 40 03 	lds	r25, 0x0340
    2b00:	88 3c       	cpi	r24, 0xC8	; 200
    2b02:	91 05       	cpc	r25, r1
    2b04:	10 f0       	brcs	.+4      	; 0x2b0a <main+0x20dc>
			{
				flag=1;
    2b06:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2b0a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2b10:	8f 3f       	cpi	r24, 0xFF	; 255
    2b12:	91 05       	cpc	r25, r1
    2b14:	c1 f4       	brne	.+48     	; 0x2b46 <main+0x2118>
    2b16:	80 91 3a 03 	lds	r24, 0x033A
    2b1a:	88 23       	and	r24, r24
    2b1c:	69 f3       	breq	.-38     	; 0x2af8 <main+0x20ca>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2b1e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	64 e0       	ldi	r22, 0x04	; 4
    2b26:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2b2a:	8b eb       	ldi	r24, 0xBB	; 187
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2b32:	80 91 3b 03 	lds	r24, 0x033B
    2b36:	90 91 3c 03 	lds	r25, 0x033C
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	90 93 3c 03 	sts	0x033C, r25
    2b40:	80 93 3b 03 	sts	0x033B, r24
    2b44:	2a c0       	rjmp	.+84     	; 0x2b9a <main+0x216c>
		}
		else if (value_read=='3')
    2b46:	83 33       	cpi	r24, 0x33	; 51
    2b48:	91 05       	cpc	r25, r1
    2b4a:	a1 f4       	brne	.+40     	; 0x2b74 <main+0x2146>
		{
			LCD_clear_screen();
    2b4c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2b50:	82 e0       	ldi	r24, 0x02	; 2
    2b52:	64 e0       	ldi	r22, 0x04	; 4
    2b54:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2b58:	85 ec       	ldi	r24, 0xC5	; 197
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2b60:	80 91 3d 03 	lds	r24, 0x033D
    2b64:	90 91 3e 03 	lds	r25, 0x033E
    2b68:	01 96       	adiw	r24, 0x01	; 1
    2b6a:	90 93 3e 03 	sts	0x033E, r25
    2b6e:	80 93 3d 03 	sts	0x033D, r24
    2b72:	13 c0       	rjmp	.+38     	; 0x2b9a <main+0x216c>
		}
		else
		{
			LCD_clear_screen();
    2b74:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	64 e0       	ldi	r22, 0x04	; 4
    2b7c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2b80:	8f ec       	ldi	r24, 0xCF	; 207
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2b88:	80 91 3b 03 	lds	r24, 0x033B
    2b8c:	90 91 3c 03 	lds	r25, 0x033C
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	90 93 3c 03 	sts	0x033C, r25
    2b96:	80 93 3b 03 	sts	0x033B, r24
    2b9a:	8f e7       	ldi	r24, 0x7F	; 127
    2b9c:	99 ea       	ldi	r25, 0xA9	; 169
    2b9e:	a3 e0       	ldi	r26, 0x03	; 3
    2ba0:	81 50       	subi	r24, 0x01	; 1
    2ba2:	90 40       	sbci	r25, 0x00	; 0
    2ba4:	a0 40       	sbci	r26, 0x00	; 0
    2ba6:	e1 f7       	brne	.-8      	; 0x2ba0 <main+0x2172>
    2ba8:	00 c0       	rjmp	.+0      	; 0x2baa <main+0x217c>
    2baa:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2bac:	10 92 40 03 	sts	0x0340, r1
    2bb0:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2bb4:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2bb8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("3) 2*..=10");
    2bbc:	c3 01       	movw	r24, r6
    2bbe:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2bc2:	8f ef       	ldi	r24, 0xFF	; 255
    2bc4:	90 e7       	ldi	r25, 0x70	; 112
    2bc6:	a2 e0       	ldi	r26, 0x02	; 2
    2bc8:	81 50       	subi	r24, 0x01	; 1
    2bca:	90 40       	sbci	r25, 0x00	; 0
    2bcc:	a0 40       	sbci	r26, 0x00	; 0
    2bce:	e1 f7       	brne	.-8      	; 0x2bc8 <main+0x219a>
    2bd0:	00 c0       	rjmp	.+0      	; 0x2bd2 <main+0x21a4>
    2bd2:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2bd4:	dd 24       	eor	r13, r13
    2bd6:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("3) 2*..=10");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2bd8:	80 91 3f 03 	lds	r24, 0x033F
    2bdc:	90 91 40 03 	lds	r25, 0x0340
    2be0:	88 3c       	cpi	r24, 0xC8	; 200
    2be2:	91 05       	cpc	r25, r1
    2be4:	10 f0       	brcs	.+4      	; 0x2bea <main+0x21bc>
			{
				flag=1;
    2be6:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2bea:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2bee:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2bf0:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf2:	91 05       	cpc	r25, r1
    2bf4:	c1 f4       	brne	.+48     	; 0x2c26 <main+0x21f8>
    2bf6:	80 91 3a 03 	lds	r24, 0x033A
    2bfa:	88 23       	and	r24, r24
    2bfc:	69 f3       	breq	.-38     	; 0x2bd8 <main+0x21aa>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2bfe:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	64 e0       	ldi	r22, 0x04	; 4
    2c06:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2c0a:	8b eb       	ldi	r24, 0xBB	; 187
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2c12:	80 91 3b 03 	lds	r24, 0x033B
    2c16:	90 91 3c 03 	lds	r25, 0x033C
    2c1a:	01 96       	adiw	r24, 0x01	; 1
    2c1c:	90 93 3c 03 	sts	0x033C, r25
    2c20:	80 93 3b 03 	sts	0x033B, r24
    2c24:	2a c0       	rjmp	.+84     	; 0x2c7a <main+0x224c>
		}
		else if (value_read=='5')
    2c26:	85 33       	cpi	r24, 0x35	; 53
    2c28:	91 05       	cpc	r25, r1
    2c2a:	a1 f4       	brne	.+40     	; 0x2c54 <main+0x2226>
		{
			LCD_clear_screen();
    2c2c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2c30:	82 e0       	ldi	r24, 0x02	; 2
    2c32:	64 e0       	ldi	r22, 0x04	; 4
    2c34:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2c38:	85 ec       	ldi	r24, 0xC5	; 197
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2c40:	80 91 3d 03 	lds	r24, 0x033D
    2c44:	90 91 3e 03 	lds	r25, 0x033E
    2c48:	01 96       	adiw	r24, 0x01	; 1
    2c4a:	90 93 3e 03 	sts	0x033E, r25
    2c4e:	80 93 3d 03 	sts	0x033D, r24
    2c52:	13 c0       	rjmp	.+38     	; 0x2c7a <main+0x224c>
		}
		else
		{
			LCD_clear_screen();
    2c54:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	64 e0       	ldi	r22, 0x04	; 4
    2c5c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2c60:	8f ec       	ldi	r24, 0xCF	; 207
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2c68:	80 91 3b 03 	lds	r24, 0x033B
    2c6c:	90 91 3c 03 	lds	r25, 0x033C
    2c70:	01 96       	adiw	r24, 0x01	; 1
    2c72:	90 93 3c 03 	sts	0x033C, r25
    2c76:	80 93 3b 03 	sts	0x033B, r24
    2c7a:	8f e7       	ldi	r24, 0x7F	; 127
    2c7c:	99 ea       	ldi	r25, 0xA9	; 169
    2c7e:	a3 e0       	ldi	r26, 0x03	; 3
    2c80:	81 50       	subi	r24, 0x01	; 1
    2c82:	90 40       	sbci	r25, 0x00	; 0
    2c84:	a0 40       	sbci	r26, 0x00	; 0
    2c86:	e1 f7       	brne	.-8      	; 0x2c80 <main+0x2252>
    2c88:	00 c0       	rjmp	.+0      	; 0x2c8a <main+0x225c>
    2c8a:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2c8c:	10 92 40 03 	sts	0x0340, r1
    2c90:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2c94:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2c98:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("4) 50/..=10");
    2c9c:	c2 01       	movw	r24, r4
    2c9e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2ca2:	8f ef       	ldi	r24, 0xFF	; 255
    2ca4:	90 e7       	ldi	r25, 0x70	; 112
    2ca6:	a2 e0       	ldi	r26, 0x02	; 2
    2ca8:	81 50       	subi	r24, 0x01	; 1
    2caa:	90 40       	sbci	r25, 0x00	; 0
    2cac:	a0 40       	sbci	r26, 0x00	; 0
    2cae:	e1 f7       	brne	.-8      	; 0x2ca8 <main+0x227a>
    2cb0:	00 c0       	rjmp	.+0      	; 0x2cb2 <main+0x2284>
    2cb2:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2cb4:	dd 24       	eor	r13, r13
    2cb6:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("4) 50/..=10");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2cb8:	80 91 3f 03 	lds	r24, 0x033F
    2cbc:	90 91 40 03 	lds	r25, 0x0340
    2cc0:	88 3c       	cpi	r24, 0xC8	; 200
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	10 f0       	brcs	.+4      	; 0x2cca <main+0x229c>
			{
				flag=1;
    2cc6:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2cca:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2cce:	28 2f       	mov	r18, r24
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2cd2:	8f 3f       	cpi	r24, 0xFF	; 255
    2cd4:	91 05       	cpc	r25, r1
    2cd6:	c1 f4       	brne	.+48     	; 0x2d08 <main+0x22da>
    2cd8:	80 91 3a 03 	lds	r24, 0x033A
    2cdc:	88 23       	and	r24, r24
    2cde:	61 f3       	breq	.-40     	; 0x2cb8 <main+0x228a>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2ce0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2ce4:	82 e0       	ldi	r24, 0x02	; 2
    2ce6:	64 e0       	ldi	r22, 0x04	; 4
    2ce8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2cec:	8b eb       	ldi	r24, 0xBB	; 187
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2cf4:	80 91 3b 03 	lds	r24, 0x033B
    2cf8:	90 91 3c 03 	lds	r25, 0x033C
    2cfc:	01 96       	adiw	r24, 0x01	; 1
    2cfe:	90 93 3c 03 	sts	0x033C, r25
    2d02:	80 93 3b 03 	sts	0x033B, r24
    2d06:	2d c0       	rjmp	.+90     	; 0x2d62 <main+0x2334>
		}
		else if (value_read=='5')
    2d08:	85 33       	cpi	r24, 0x35	; 53
    2d0a:	91 05       	cpc	r25, r1
    2d0c:	b9 f4       	brne	.+46     	; 0x2d3c <main+0x230e>
		{
			LCD_SEND_CHAR(value_read);
    2d0e:	82 2f       	mov	r24, r18
    2d10:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2d14:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2d18:	82 e0       	ldi	r24, 0x02	; 2
    2d1a:	64 e0       	ldi	r22, 0x04	; 4
    2d1c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2d20:	85 ec       	ldi	r24, 0xC5	; 197
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2d28:	80 91 3d 03 	lds	r24, 0x033D
    2d2c:	90 91 3e 03 	lds	r25, 0x033E
    2d30:	01 96       	adiw	r24, 0x01	; 1
    2d32:	90 93 3e 03 	sts	0x033E, r25
    2d36:	80 93 3d 03 	sts	0x033D, r24
    2d3a:	13 c0       	rjmp	.+38     	; 0x2d62 <main+0x2334>
		}
		else
		{
			LCD_clear_screen();
    2d3c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	64 e0       	ldi	r22, 0x04	; 4
    2d44:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2d48:	8f ec       	ldi	r24, 0xCF	; 207
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2d50:	80 91 3b 03 	lds	r24, 0x033B
    2d54:	90 91 3c 03 	lds	r25, 0x033C
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	90 93 3c 03 	sts	0x033C, r25
    2d5e:	80 93 3b 03 	sts	0x033B, r24
    2d62:	8f e7       	ldi	r24, 0x7F	; 127
    2d64:	99 ea       	ldi	r25, 0xA9	; 169
    2d66:	a3 e0       	ldi	r26, 0x03	; 3
    2d68:	81 50       	subi	r24, 0x01	; 1
    2d6a:	90 40       	sbci	r25, 0x00	; 0
    2d6c:	a0 40       	sbci	r26, 0x00	; 0
    2d6e:	e1 f7       	brne	.-8      	; 0x2d68 <main+0x233a>
    2d70:	00 c0       	rjmp	.+0      	; 0x2d72 <main+0x2344>
    2d72:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2d74:	10 92 40 03 	sts	0x0340, r1
    2d78:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2d7c:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2d80:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("5) 14%..=0");
    2d84:	c1 01       	movw	r24, r2
    2d86:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2d8a:	8f ef       	ldi	r24, 0xFF	; 255
    2d8c:	90 e7       	ldi	r25, 0x70	; 112
    2d8e:	a2 e0       	ldi	r26, 0x02	; 2
    2d90:	81 50       	subi	r24, 0x01	; 1
    2d92:	90 40       	sbci	r25, 0x00	; 0
    2d94:	a0 40       	sbci	r26, 0x00	; 0
    2d96:	e1 f7       	brne	.-8      	; 0x2d90 <main+0x2362>
    2d98:	00 c0       	rjmp	.+0      	; 0x2d9a <main+0x236c>
    2d9a:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2d9c:	dd 24       	eor	r13, r13
    2d9e:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("5) 14%..=0");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2da0:	80 91 3f 03 	lds	r24, 0x033F
    2da4:	90 91 40 03 	lds	r25, 0x0340
    2da8:	88 3c       	cpi	r24, 0xC8	; 200
    2daa:	91 05       	cpc	r25, r1
    2dac:	10 f0       	brcs	.+4      	; 0x2db2 <main+0x2384>
			{
				flag=1;
    2dae:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2db2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2db6:	28 2f       	mov	r18, r24
    2db8:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2dba:	8f 3f       	cpi	r24, 0xFF	; 255
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	c1 f4       	brne	.+48     	; 0x2df0 <main+0x23c2>
    2dc0:	80 91 3a 03 	lds	r24, 0x033A
    2dc4:	88 23       	and	r24, r24
    2dc6:	61 f3       	breq	.-40     	; 0x2da0 <main+0x2372>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2dc8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2dcc:	82 e0       	ldi	r24, 0x02	; 2
    2dce:	64 e0       	ldi	r22, 0x04	; 4
    2dd0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2dd4:	8b eb       	ldi	r24, 0xBB	; 187
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2ddc:	80 91 3b 03 	lds	r24, 0x033B
    2de0:	90 91 3c 03 	lds	r25, 0x033C
    2de4:	01 96       	adiw	r24, 0x01	; 1
    2de6:	90 93 3c 03 	sts	0x033C, r25
    2dea:	80 93 3b 03 	sts	0x033B, r24
    2dee:	2d c0       	rjmp	.+90     	; 0x2e4a <main+0x241c>
		}
		else if (value_read=='7')
    2df0:	87 33       	cpi	r24, 0x37	; 55
    2df2:	91 05       	cpc	r25, r1
    2df4:	b9 f4       	brne	.+46     	; 0x2e24 <main+0x23f6>
		{
			LCD_SEND_CHAR(value_read);
    2df6:	82 2f       	mov	r24, r18
    2df8:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2dfc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2e00:	82 e0       	ldi	r24, 0x02	; 2
    2e02:	64 e0       	ldi	r22, 0x04	; 4
    2e04:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2e08:	85 ec       	ldi	r24, 0xC5	; 197
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2e10:	80 91 3d 03 	lds	r24, 0x033D
    2e14:	90 91 3e 03 	lds	r25, 0x033E
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	90 93 3e 03 	sts	0x033E, r25
    2e1e:	80 93 3d 03 	sts	0x033D, r24
    2e22:	13 c0       	rjmp	.+38     	; 0x2e4a <main+0x241c>
		}
		else
		{
			LCD_clear_screen();
    2e24:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	64 e0       	ldi	r22, 0x04	; 4
    2e2c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2e30:	8f ec       	ldi	r24, 0xCF	; 207
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2e38:	80 91 3b 03 	lds	r24, 0x033B
    2e3c:	90 91 3c 03 	lds	r25, 0x033C
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	90 93 3c 03 	sts	0x033C, r25
    2e46:	80 93 3b 03 	sts	0x033B, r24
    2e4a:	8f e7       	ldi	r24, 0x7F	; 127
    2e4c:	99 ea       	ldi	r25, 0xA9	; 169
    2e4e:	a3 e0       	ldi	r26, 0x03	; 3
    2e50:	81 50       	subi	r24, 0x01	; 1
    2e52:	90 40       	sbci	r25, 0x00	; 0
    2e54:	a0 40       	sbci	r26, 0x00	; 0
    2e56:	e1 f7       	brne	.-8      	; 0x2e50 <main+0x2422>
    2e58:	00 c0       	rjmp	.+0      	; 0x2e5a <main+0x242c>
    2e5a:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2e5c:	10 92 40 03 	sts	0x0340, r1
    2e60:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2e64:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2e68:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("6) 50+4+...=60");
    2e6c:	8a e0       	ldi	r24, 0x0A	; 10
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2e74:	8f ef       	ldi	r24, 0xFF	; 255
    2e76:	90 e7       	ldi	r25, 0x70	; 112
    2e78:	a2 e0       	ldi	r26, 0x02	; 2
    2e7a:	81 50       	subi	r24, 0x01	; 1
    2e7c:	90 40       	sbci	r25, 0x00	; 0
    2e7e:	a0 40       	sbci	r26, 0x00	; 0
    2e80:	e1 f7       	brne	.-8      	; 0x2e7a <main+0x244c>
    2e82:	00 c0       	rjmp	.+0      	; 0x2e84 <main+0x2456>
    2e84:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2e86:	dd 24       	eor	r13, r13
    2e88:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("6) 50+4+...=60");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2e8a:	80 91 3f 03 	lds	r24, 0x033F
    2e8e:	90 91 40 03 	lds	r25, 0x0340
    2e92:	88 3c       	cpi	r24, 0xC8	; 200
    2e94:	91 05       	cpc	r25, r1
    2e96:	10 f0       	brcs	.+4      	; 0x2e9c <main+0x246e>
			{
				flag=1;
    2e98:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2e9c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2ea0:	28 2f       	mov	r18, r24
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2ea4:	8f 3f       	cpi	r24, 0xFF	; 255
    2ea6:	91 05       	cpc	r25, r1
    2ea8:	c1 f4       	brne	.+48     	; 0x2eda <main+0x24ac>
    2eaa:	80 91 3a 03 	lds	r24, 0x033A
    2eae:	88 23       	and	r24, r24
    2eb0:	61 f3       	breq	.-40     	; 0x2e8a <main+0x245c>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2eb2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2eb6:	82 e0       	ldi	r24, 0x02	; 2
    2eb8:	64 e0       	ldi	r22, 0x04	; 4
    2eba:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2ebe:	8b eb       	ldi	r24, 0xBB	; 187
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2ec6:	80 91 3b 03 	lds	r24, 0x033B
    2eca:	90 91 3c 03 	lds	r25, 0x033C
    2ece:	01 96       	adiw	r24, 0x01	; 1
    2ed0:	90 93 3c 03 	sts	0x033C, r25
    2ed4:	80 93 3b 03 	sts	0x033B, r24
    2ed8:	2d c0       	rjmp	.+90     	; 0x2f34 <main+0x2506>
		}
		else if (value_read=='6')
    2eda:	86 33       	cpi	r24, 0x36	; 54
    2edc:	91 05       	cpc	r25, r1
    2ede:	b9 f4       	brne	.+46     	; 0x2f0e <main+0x24e0>
		{
			LCD_SEND_CHAR(value_read);
    2ee0:	82 2f       	mov	r24, r18
    2ee2:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2ee6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2eea:	82 e0       	ldi	r24, 0x02	; 2
    2eec:	64 e0       	ldi	r22, 0x04	; 4
    2eee:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2ef2:	85 ec       	ldi	r24, 0xC5	; 197
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2efa:	80 91 3d 03 	lds	r24, 0x033D
    2efe:	90 91 3e 03 	lds	r25, 0x033E
    2f02:	01 96       	adiw	r24, 0x01	; 1
    2f04:	90 93 3e 03 	sts	0x033E, r25
    2f08:	80 93 3d 03 	sts	0x033D, r24
    2f0c:	13 c0       	rjmp	.+38     	; 0x2f34 <main+0x2506>
		}
		else
		{
			LCD_clear_screen();
    2f0e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2f12:	82 e0       	ldi	r24, 0x02	; 2
    2f14:	64 e0       	ldi	r22, 0x04	; 4
    2f16:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    2f1a:	8f ec       	ldi	r24, 0xCF	; 207
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2f22:	80 91 3b 03 	lds	r24, 0x033B
    2f26:	90 91 3c 03 	lds	r25, 0x033C
    2f2a:	01 96       	adiw	r24, 0x01	; 1
    2f2c:	90 93 3c 03 	sts	0x033C, r25
    2f30:	80 93 3b 03 	sts	0x033B, r24
    2f34:	8f e7       	ldi	r24, 0x7F	; 127
    2f36:	99 ea       	ldi	r25, 0xA9	; 169
    2f38:	a3 e0       	ldi	r26, 0x03	; 3
    2f3a:	81 50       	subi	r24, 0x01	; 1
    2f3c:	90 40       	sbci	r25, 0x00	; 0
    2f3e:	a0 40       	sbci	r26, 0x00	; 0
    2f40:	e1 f7       	brne	.-8      	; 0x2f3a <main+0x250c>
    2f42:	00 c0       	rjmp	.+0      	; 0x2f44 <main+0x2516>
    2f44:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    2f46:	10 92 40 03 	sts	0x0340, r1
    2f4a:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    2f4e:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    2f52:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("7) 50*2+...=108");
    2f56:	89 e1       	ldi	r24, 0x19	; 25
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    2f5e:	8f ef       	ldi	r24, 0xFF	; 255
    2f60:	90 e7       	ldi	r25, 0x70	; 112
    2f62:	a2 e0       	ldi	r26, 0x02	; 2
    2f64:	81 50       	subi	r24, 0x01	; 1
    2f66:	90 40       	sbci	r25, 0x00	; 0
    2f68:	a0 40       	sbci	r26, 0x00	; 0
    2f6a:	e1 f7       	brne	.-8      	; 0x2f64 <main+0x2536>
    2f6c:	00 c0       	rjmp	.+0      	; 0x2f6e <main+0x2540>
    2f6e:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    2f70:	dd 24       	eor	r13, r13
    2f72:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("7) 50*2+...=108");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    2f74:	80 91 3f 03 	lds	r24, 0x033F
    2f78:	90 91 40 03 	lds	r25, 0x0340
    2f7c:	88 3c       	cpi	r24, 0xC8	; 200
    2f7e:	91 05       	cpc	r25, r1
    2f80:	10 f0       	brcs	.+4      	; 0x2f86 <main+0x2558>
			{
				flag=1;
    2f82:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    2f86:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    2f8e:	8f 3f       	cpi	r24, 0xFF	; 255
    2f90:	91 05       	cpc	r25, r1
    2f92:	c1 f4       	brne	.+48     	; 0x2fc4 <main+0x2596>
    2f94:	80 91 3a 03 	lds	r24, 0x033A
    2f98:	88 23       	and	r24, r24
    2f9a:	61 f3       	breq	.-40     	; 0x2f74 <main+0x2546>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    2f9c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2fa0:	82 e0       	ldi	r24, 0x02	; 2
    2fa2:	64 e0       	ldi	r22, 0x04	; 4
    2fa4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    2fa8:	8b eb       	ldi	r24, 0xBB	; 187
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    2fb0:	80 91 3b 03 	lds	r24, 0x033B
    2fb4:	90 91 3c 03 	lds	r25, 0x033C
    2fb8:	01 96       	adiw	r24, 0x01	; 1
    2fba:	90 93 3c 03 	sts	0x033C, r25
    2fbe:	80 93 3b 03 	sts	0x033B, r24
    2fc2:	2d c0       	rjmp	.+90     	; 0x301e <main+0x25f0>
		}
		else if (value_read=='8')
    2fc4:	88 33       	cpi	r24, 0x38	; 56
    2fc6:	91 05       	cpc	r25, r1
    2fc8:	b9 f4       	brne	.+46     	; 0x2ff8 <main+0x25ca>
		{
			LCD_SEND_CHAR(value_read);
    2fca:	82 2f       	mov	r24, r18
    2fcc:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    2fd0:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2fd4:	82 e0       	ldi	r24, 0x02	; 2
    2fd6:	64 e0       	ldi	r22, 0x04	; 4
    2fd8:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    2fdc:	85 ec       	ldi	r24, 0xC5	; 197
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    2fe4:	80 91 3d 03 	lds	r24, 0x033D
    2fe8:	90 91 3e 03 	lds	r25, 0x033E
    2fec:	01 96       	adiw	r24, 0x01	; 1
    2fee:	90 93 3e 03 	sts	0x033E, r25
    2ff2:	80 93 3d 03 	sts	0x033D, r24
    2ff6:	13 c0       	rjmp	.+38     	; 0x301e <main+0x25f0>
		}
		else
		{
			LCD_clear_screen();
    2ff8:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    2ffc:	82 e0       	ldi	r24, 0x02	; 2
    2ffe:	64 e0       	ldi	r22, 0x04	; 4
    3000:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    3004:	8f ec       	ldi	r24, 0xCF	; 207
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    300c:	80 91 3b 03 	lds	r24, 0x033B
    3010:	90 91 3c 03 	lds	r25, 0x033C
    3014:	01 96       	adiw	r24, 0x01	; 1
    3016:	90 93 3c 03 	sts	0x033C, r25
    301a:	80 93 3b 03 	sts	0x033B, r24
    301e:	8f e7       	ldi	r24, 0x7F	; 127
    3020:	99 ea       	ldi	r25, 0xA9	; 169
    3022:	a3 e0       	ldi	r26, 0x03	; 3
    3024:	81 50       	subi	r24, 0x01	; 1
    3026:	90 40       	sbci	r25, 0x00	; 0
    3028:	a0 40       	sbci	r26, 0x00	; 0
    302a:	e1 f7       	brne	.-8      	; 0x3024 <main+0x25f6>
    302c:	00 c0       	rjmp	.+0      	; 0x302e <main+0x2600>
    302e:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    3030:	10 92 40 03 	sts	0x0340, r1
    3034:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    3038:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    303c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("8) 14+4-1*...=14");
    3040:	89 e2       	ldi	r24, 0x29	; 41
    3042:	91 e0       	ldi	r25, 0x01	; 1
    3044:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    3048:	8f ef       	ldi	r24, 0xFF	; 255
    304a:	90 e7       	ldi	r25, 0x70	; 112
    304c:	a2 e0       	ldi	r26, 0x02	; 2
    304e:	81 50       	subi	r24, 0x01	; 1
    3050:	90 40       	sbci	r25, 0x00	; 0
    3052:	a0 40       	sbci	r26, 0x00	; 0
    3054:	e1 f7       	brne	.-8      	; 0x304e <main+0x2620>
    3056:	00 c0       	rjmp	.+0      	; 0x3058 <main+0x262a>
    3058:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    305a:	dd 24       	eor	r13, r13
    305c:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("8) 14+4-1*...=14");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    305e:	80 91 3f 03 	lds	r24, 0x033F
    3062:	90 91 40 03 	lds	r25, 0x0340
    3066:	88 3c       	cpi	r24, 0xC8	; 200
    3068:	91 05       	cpc	r25, r1
    306a:	10 f0       	brcs	.+4      	; 0x3070 <main+0x2642>
			{
				flag=1;
    306c:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    3070:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    3074:	28 2f       	mov	r18, r24
    3076:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    3078:	8f 3f       	cpi	r24, 0xFF	; 255
    307a:	91 05       	cpc	r25, r1
    307c:	c1 f4       	brne	.+48     	; 0x30ae <main+0x2680>
    307e:	80 91 3a 03 	lds	r24, 0x033A
    3082:	88 23       	and	r24, r24
    3084:	61 f3       	breq	.-40     	; 0x305e <main+0x2630>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    3086:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    308a:	82 e0       	ldi	r24, 0x02	; 2
    308c:	64 e0       	ldi	r22, 0x04	; 4
    308e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    3092:	8b eb       	ldi	r24, 0xBB	; 187
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    309a:	80 91 3b 03 	lds	r24, 0x033B
    309e:	90 91 3c 03 	lds	r25, 0x033C
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	90 93 3c 03 	sts	0x033C, r25
    30a8:	80 93 3b 03 	sts	0x033B, r24
    30ac:	2d c0       	rjmp	.+90     	; 0x3108 <main+0x26da>
		}
		else if (value_read=='4')
    30ae:	84 33       	cpi	r24, 0x34	; 52
    30b0:	91 05       	cpc	r25, r1
    30b2:	b9 f4       	brne	.+46     	; 0x30e2 <main+0x26b4>
		{
			LCD_SEND_CHAR(value_read);
    30b4:	82 2f       	mov	r24, r18
    30b6:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    30ba:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    30be:	82 e0       	ldi	r24, 0x02	; 2
    30c0:	64 e0       	ldi	r22, 0x04	; 4
    30c2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    30c6:	85 ec       	ldi	r24, 0xC5	; 197
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    30ce:	80 91 3d 03 	lds	r24, 0x033D
    30d2:	90 91 3e 03 	lds	r25, 0x033E
    30d6:	01 96       	adiw	r24, 0x01	; 1
    30d8:	90 93 3e 03 	sts	0x033E, r25
    30dc:	80 93 3d 03 	sts	0x033D, r24
    30e0:	13 c0       	rjmp	.+38     	; 0x3108 <main+0x26da>
		}
		else
		{
			LCD_clear_screen();
    30e2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    30e6:	82 e0       	ldi	r24, 0x02	; 2
    30e8:	64 e0       	ldi	r22, 0x04	; 4
    30ea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    30ee:	8f ec       	ldi	r24, 0xCF	; 207
    30f0:	90 e0       	ldi	r25, 0x00	; 0
    30f2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    30f6:	80 91 3b 03 	lds	r24, 0x033B
    30fa:	90 91 3c 03 	lds	r25, 0x033C
    30fe:	01 96       	adiw	r24, 0x01	; 1
    3100:	90 93 3c 03 	sts	0x033C, r25
    3104:	80 93 3b 03 	sts	0x033B, r24
    3108:	8f e7       	ldi	r24, 0x7F	; 127
    310a:	99 ea       	ldi	r25, 0xA9	; 169
    310c:	a3 e0       	ldi	r26, 0x03	; 3
    310e:	81 50       	subi	r24, 0x01	; 1
    3110:	90 40       	sbci	r25, 0x00	; 0
    3112:	a0 40       	sbci	r26, 0x00	; 0
    3114:	e1 f7       	brne	.-8      	; 0x310e <main+0x26e0>
    3116:	00 c0       	rjmp	.+0      	; 0x3118 <main+0x26ea>
    3118:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    311a:	10 92 40 03 	sts	0x0340, r1
    311e:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    3122:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    3126:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("9) 1*4+10/...=9");
    312a:	8a e3       	ldi	r24, 0x3A	; 58
    312c:	91 e0       	ldi	r25, 0x01	; 1
    312e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    3132:	8f ef       	ldi	r24, 0xFF	; 255
    3134:	90 e7       	ldi	r25, 0x70	; 112
    3136:	a2 e0       	ldi	r26, 0x02	; 2
    3138:	81 50       	subi	r24, 0x01	; 1
    313a:	90 40       	sbci	r25, 0x00	; 0
    313c:	a0 40       	sbci	r26, 0x00	; 0
    313e:	e1 f7       	brne	.-8      	; 0x3138 <main+0x270a>
    3140:	00 c0       	rjmp	.+0      	; 0x3142 <main+0x2714>
    3142:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    3144:	dd 24       	eor	r13, r13
    3146:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("9) 1*4+10/...=9");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    3148:	80 91 3f 03 	lds	r24, 0x033F
    314c:	90 91 40 03 	lds	r25, 0x0340
    3150:	88 3c       	cpi	r24, 0xC8	; 200
    3152:	91 05       	cpc	r25, r1
    3154:	10 f0       	brcs	.+4      	; 0x315a <main+0x272c>
			{
				flag=1;
    3156:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    315a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    315e:	28 2f       	mov	r18, r24
    3160:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    3162:	8f 3f       	cpi	r24, 0xFF	; 255
    3164:	91 05       	cpc	r25, r1
    3166:	c1 f4       	brne	.+48     	; 0x3198 <main+0x276a>
    3168:	80 91 3a 03 	lds	r24, 0x033A
    316c:	88 23       	and	r24, r24
    316e:	61 f3       	breq	.-40     	; 0x3148 <main+0x271a>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    3170:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    3174:	82 e0       	ldi	r24, 0x02	; 2
    3176:	64 e0       	ldi	r22, 0x04	; 4
    3178:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    317c:	8b eb       	ldi	r24, 0xBB	; 187
    317e:	90 e0       	ldi	r25, 0x00	; 0
    3180:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    3184:	80 91 3b 03 	lds	r24, 0x033B
    3188:	90 91 3c 03 	lds	r25, 0x033C
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	90 93 3c 03 	sts	0x033C, r25
    3192:	80 93 3b 03 	sts	0x033B, r24
    3196:	2d c0       	rjmp	.+90     	; 0x31f2 <main+0x27c4>
		}
		else if (value_read=='2')
    3198:	82 33       	cpi	r24, 0x32	; 50
    319a:	91 05       	cpc	r25, r1
    319c:	b9 f4       	brne	.+46     	; 0x31cc <main+0x279e>
		{
			LCD_SEND_CHAR(value_read);
    319e:	82 2f       	mov	r24, r18
    31a0:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    31a4:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	64 e0       	ldi	r22, 0x04	; 4
    31ac:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    31b0:	85 ec       	ldi	r24, 0xC5	; 197
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    31b8:	80 91 3d 03 	lds	r24, 0x033D
    31bc:	90 91 3e 03 	lds	r25, 0x033E
    31c0:	01 96       	adiw	r24, 0x01	; 1
    31c2:	90 93 3e 03 	sts	0x033E, r25
    31c6:	80 93 3d 03 	sts	0x033D, r24
    31ca:	13 c0       	rjmp	.+38     	; 0x31f2 <main+0x27c4>
		}
		else
		{
			LCD_clear_screen();
    31cc:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	64 e0       	ldi	r22, 0x04	; 4
    31d4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    31d8:	8f ec       	ldi	r24, 0xCF	; 207
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    31e0:	80 91 3b 03 	lds	r24, 0x033B
    31e4:	90 91 3c 03 	lds	r25, 0x033C
    31e8:	01 96       	adiw	r24, 0x01	; 1
    31ea:	90 93 3c 03 	sts	0x033C, r25
    31ee:	80 93 3b 03 	sts	0x033B, r24
    31f2:	8f e7       	ldi	r24, 0x7F	; 127
    31f4:	99 ea       	ldi	r25, 0xA9	; 169
    31f6:	a3 e0       	ldi	r26, 0x03	; 3
    31f8:	81 50       	subi	r24, 0x01	; 1
    31fa:	90 40       	sbci	r25, 0x00	; 0
    31fc:	a0 40       	sbci	r26, 0x00	; 0
    31fe:	e1 f7       	brne	.-8      	; 0x31f8 <main+0x27ca>
    3200:	00 c0       	rjmp	.+0      	; 0x3202 <main+0x27d4>
    3202:	00 00       	nop
		}
		_delay_ms(150);
		counter=0;
    3204:	10 92 40 03 	sts	0x0340, r1
    3208:	10 92 3f 03 	sts	0x033F, r1
		flag=0;
    320c:	10 92 3a 03 	sts	0x033A, r1
		LCD_clear_screen();
    3210:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("10) 14-4/1+..=10");
    3214:	8a e4       	ldi	r24, 0x4A	; 74
    3216:	91 e0       	ldi	r25, 0x01	; 1
    3218:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    321c:	8f ef       	ldi	r24, 0xFF	; 255
    321e:	90 e7       	ldi	r25, 0x70	; 112
    3220:	a2 e0       	ldi	r26, 0x02	; 2
    3222:	81 50       	subi	r24, 0x01	; 1
    3224:	90 40       	sbci	r25, 0x00	; 0
    3226:	a0 40       	sbci	r26, 0x00	; 0
    3228:	e1 f7       	brne	.-8      	; 0x3222 <main+0x27f4>
    322a:	00 c0       	rjmp	.+0      	; 0x322c <main+0x27fe>
    322c:	00 00       	nop
		_delay_ms(100);
		do
		{
			if (counter>=200)
			{
				flag=1;
    322e:	dd 24       	eor	r13, r13
    3230:	d3 94       	inc	r13
		LCD_clear_screen();
		LCD_SEND_STRING("10) 14-4/1+..=10");
		_delay_ms(100);
		do
		{
			if (counter>=200)
    3232:	80 91 3f 03 	lds	r24, 0x033F
    3236:	90 91 40 03 	lds	r25, 0x0340
    323a:	88 3c       	cpi	r24, 0xC8	; 200
    323c:	91 05       	cpc	r25, r1
    323e:	10 f0       	brcs	.+4      	; 0x3244 <main+0x2816>
			{
				flag=1;
    3240:	d0 92 3a 03 	sts	0x033A, r13
			}
			value_read=keybad_u8read_press();
    3244:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <keybad_u8read_press>
    3248:	28 2f       	mov	r18, r24
    324a:	90 e0       	ldi	r25, 0x00	; 0
		} while (value_read==notpassed && flag==0);
    324c:	8f 3f       	cpi	r24, 0xFF	; 255
    324e:	91 05       	cpc	r25, r1
    3250:	c1 f4       	brne	.+48     	; 0x3282 <main+0x2854>
    3252:	80 91 3a 03 	lds	r24, 0x033A
    3256:	88 23       	and	r24, r24
    3258:	61 f3       	breq	.-40     	; 0x3232 <main+0x2804>
		if (value_read==notpassed)
		{
			LCD_clear_screen();
    325a:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    325e:	82 e0       	ldi	r24, 0x02	; 2
    3260:	64 e0       	ldi	r22, 0x04	; 4
    3262:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("time over");
    3266:	8b eb       	ldi	r24, 0xBB	; 187
    3268:	90 e0       	ldi	r25, 0x00	; 0
    326a:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    326e:	80 91 3b 03 	lds	r24, 0x033B
    3272:	90 91 3c 03 	lds	r25, 0x033C
    3276:	01 96       	adiw	r24, 0x01	; 1
    3278:	90 93 3c 03 	sts	0x033C, r25
    327c:	80 93 3b 03 	sts	0x033B, r24
    3280:	2d c0       	rjmp	.+90     	; 0x32dc <main+0x28ae>
		}
		else if (value_read=='0')
    3282:	80 33       	cpi	r24, 0x30	; 48
    3284:	91 05       	cpc	r25, r1
    3286:	b9 f4       	brne	.+46     	; 0x32b6 <main+0x2888>
		{
			LCD_SEND_CHAR(value_read);
    3288:	82 2f       	mov	r24, r18
    328a:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
			LCD_clear_screen();
    328e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    3292:	82 e0       	ldi	r24, 0x02	; 2
    3294:	64 e0       	ldi	r22, 0x04	; 4
    3296:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("well done");
    329a:	85 ec       	ldi	r24, 0xC5	; 197
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter1++;
    32a2:	80 91 3d 03 	lds	r24, 0x033D
    32a6:	90 91 3e 03 	lds	r25, 0x033E
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	90 93 3e 03 	sts	0x033E, r25
    32b0:	80 93 3d 03 	sts	0x033D, r24
    32b4:	13 c0       	rjmp	.+38     	; 0x32dc <main+0x28ae>
		}
		else
		{
			LCD_clear_screen();
    32b6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
			LCD_MOVE_CURSOR(2,4);
    32ba:	82 e0       	ldi	r24, 0x02	; 2
    32bc:	64 e0       	ldi	r22, 0x04	; 4
    32be:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("wrong answer");
    32c2:	8f ec       	ldi	r24, 0xCF	; 207
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			counter2++;
    32ca:	80 91 3b 03 	lds	r24, 0x033B
    32ce:	90 91 3c 03 	lds	r25, 0x033C
    32d2:	01 96       	adiw	r24, 0x01	; 1
    32d4:	90 93 3c 03 	sts	0x033C, r25
    32d8:	80 93 3b 03 	sts	0x033B, r24
    32dc:	8f e7       	ldi	r24, 0x7F	; 127
    32de:	99 ea       	ldi	r25, 0xA9	; 169
    32e0:	a3 e0       	ldi	r26, 0x03	; 3
    32e2:	81 50       	subi	r24, 0x01	; 1
    32e4:	90 40       	sbci	r25, 0x00	; 0
    32e6:	a0 40       	sbci	r26, 0x00	; 0
    32e8:	e1 f7       	brne	.-8      	; 0x32e2 <main+0x28b4>
    32ea:	00 c0       	rjmp	.+0      	; 0x32ec <main+0x28be>
    32ec:	00 00       	nop
		}
		_delay_ms(150);
		LCD_clear_screen();
    32ee:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		LCD_SEND_STRING("the correct=");
    32f2:	8b e5       	ldi	r24, 0x5B	; 91
    32f4:	91 e0       	ldi	r25, 0x01	; 1
    32f6:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		LCD_MOVE_CURSOR(1,13);
    32fa:	81 e0       	ldi	r24, 0x01	; 1
    32fc:	6d e0       	ldi	r22, 0x0D	; 13
    32fe:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_CHAR(counter1+48);
    3302:	80 91 3d 03 	lds	r24, 0x033D
    3306:	90 91 3e 03 	lds	r25, 0x033E
    330a:	80 5d       	subi	r24, 0xD0	; 208
    330c:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
		LCD_MOVE_CURSOR(2,1);
    3310:	82 e0       	ldi	r24, 0x02	; 2
    3312:	61 e0       	ldi	r22, 0x01	; 1
    3314:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_STRING("the wrong=");
    3318:	88 e6       	ldi	r24, 0x68	; 104
    331a:	91 e0       	ldi	r25, 0x01	; 1
    331c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
		LCD_MOVE_CURSOR(2,11);
    3320:	82 e0       	ldi	r24, 0x02	; 2
    3322:	6b e0       	ldi	r22, 0x0B	; 11
    3324:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
		LCD_SEND_CHAR(counter2+48);
    3328:	80 91 3b 03 	lds	r24, 0x033B
    332c:	90 91 3c 03 	lds	r25, 0x033C
    3330:	80 5d       	subi	r24, 0xD0	; 208
    3332:	0e 94 4f 04 	call	0x89e	; 0x89e <LCD_SEND_CHAR>
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	97 e8       	ldi	r25, 0x87	; 135
    333a:	a3 e1       	ldi	r26, 0x13	; 19
    333c:	81 50       	subi	r24, 0x01	; 1
    333e:	90 40       	sbci	r25, 0x00	; 0
    3340:	a0 40       	sbci	r26, 0x00	; 0
    3342:	e1 f7       	brne	.-8      	; 0x333c <main+0x290e>
    3344:	00 c0       	rjmp	.+0      	; 0x3346 <main+0x2918>
    3346:	00 00       	nop
		_delay_ms(800);
		LCD_clear_screen();
    3348:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
		if(counter1>counter2)
    334c:	80 91 3d 03 	lds	r24, 0x033D
    3350:	90 91 3e 03 	lds	r25, 0x033E
    3354:	20 91 3b 03 	lds	r18, 0x033B
    3358:	30 91 3c 03 	lds	r19, 0x033C
    335c:	28 17       	cp	r18, r24
    335e:	39 07       	cpc	r19, r25
    3360:	e8 f4       	brcc	.+58     	; 0x339c <main+0x296e>
		{
			counter=0;
    3362:	10 92 40 03 	sts	0x0340, r1
    3366:	10 92 3f 03 	sts	0x033F, r1
			counter1=0;
    336a:	10 92 3e 03 	sts	0x033E, r1
    336e:	10 92 3d 03 	sts	0x033D, r1
			counter2=0;
    3372:	10 92 3c 03 	sts	0x033C, r1
    3376:	10 92 3b 03 	sts	0x033B, r1
			LCD_SEND_STRING("succed");
    337a:	83 e7       	ldi	r24, 0x73	; 115
    337c:	91 e0       	ldi	r25, 0x01	; 1
    337e:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    3382:	8f e7       	ldi	r24, 0x7F	; 127
    3384:	99 ea       	ldi	r25, 0xA9	; 169
    3386:	a3 e0       	ldi	r26, 0x03	; 3
    3388:	81 50       	subi	r24, 0x01	; 1
    338a:	90 40       	sbci	r25, 0x00	; 0
    338c:	a0 40       	sbci	r26, 0x00	; 0
    338e:	e1 f7       	brne	.-8      	; 0x3388 <main+0x295a>
    3390:	00 c0       	rjmp	.+0      	; 0x3392 <main+0x2964>
    3392:	00 00       	nop
			_delay_ms(150);
			LCD_clear_screen();
    3394:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
    3398:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>
		}
		else
		{
			flag2=0;
    339c:	10 92 38 03 	sts	0x0338, r1
			LCD_MOVE_CURSOR(1,5);
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	65 e0       	ldi	r22, 0x05	; 5
    33a4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("failed");
    33a8:	88 e8       	ldi	r24, 0x88	; 136
    33aa:	91 e0       	ldi	r25, 0x01	; 1
    33ac:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
			LCD_MOVE_CURSOR(2,4);
    33b0:	82 e0       	ldi	r24, 0x02	; 2
    33b2:	64 e0       	ldi	r22, 0x04	; 4
    33b4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <LCD_MOVE_CURSOR>
			LCD_SEND_STRING("Try again");
    33b8:	8f e8       	ldi	r24, 0x8F	; 143
    33ba:	91 e0       	ldi	r25, 0x01	; 1
    33bc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    33c0:	8f ef       	ldi	r24, 0xFF	; 255
    33c2:	93 ec       	ldi	r25, 0xC3	; 195
    33c4:	a9 e0       	ldi	r26, 0x09	; 9
    33c6:	81 50       	subi	r24, 0x01	; 1
    33c8:	90 40       	sbci	r25, 0x00	; 0
    33ca:	a0 40       	sbci	r26, 0x00	; 0
    33cc:	e1 f7       	brne	.-8      	; 0x33c6 <main+0x2998>
    33ce:	00 c0       	rjmp	.+0      	; 0x33d0 <main+0x29a2>
    33d0:	00 00       	nop
    33d2:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>
		}
		goto L1; 
  }
  else
  {
	  LCD_clear_screen();
    33d6:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
	  LCD_SEND_STRING("  Test4 locked  ");
    33da:	c7 01       	movw	r24, r14
    33dc:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_SEND_STRING>
    33e0:	8f ef       	ldi	r24, 0xFF	; 255
    33e2:	96 e1       	ldi	r25, 0x16	; 22
    33e4:	a1 e1       	ldi	r26, 0x11	; 17
    33e6:	81 50       	subi	r24, 0x01	; 1
    33e8:	90 40       	sbci	r25, 0x00	; 0
    33ea:	a0 40       	sbci	r26, 0x00	; 0
    33ec:	e1 f7       	brne	.-8      	; 0x33e6 <main+0x29b8>
    33ee:	00 c0       	rjmp	.+0      	; 0x33f0 <main+0x29c2>
    33f0:	00 00       	nop
	  _delay_ms(700);
	  LCD_clear_screen();
    33f2:	0e 94 dd 04 	call	0x9ba	; 0x9ba <LCD_clear_screen>
	  goto L1;
    33f6:	0c 94 5e 05 	jmp	0xabc	; 0xabc <main+0x8e>

000033fa <__vector_10>:
}  
} 	
} 

ISR(TIMER0_COMP_vect)
{
    33fa:	1f 92       	push	r1
    33fc:	0f 92       	push	r0
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	0f 92       	push	r0
    3402:	11 24       	eor	r1, r1
    3404:	8f 93       	push	r24
    3406:	9f 93       	push	r25
	counter++;
    3408:	80 91 3f 03 	lds	r24, 0x033F
    340c:	90 91 40 03 	lds	r25, 0x0340
    3410:	01 96       	adiw	r24, 0x01	; 1
    3412:	90 93 40 03 	sts	0x0340, r25
    3416:	80 93 3f 03 	sts	0x033F, r24
    341a:	9f 91       	pop	r25
    341c:	8f 91       	pop	r24
    341e:	0f 90       	pop	r0
    3420:	0f be       	out	0x3f, r0	; 63
    3422:	0f 90       	pop	r0
    3424:	1f 90       	pop	r1
    3426:	18 95       	reti

00003428 <TIMER_CTC_INIT>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include "std_macros.h"
void TIMER_CTC_INIT(void)
{
	sei();
    3428:	78 94       	sei
	SET_BIT(TCCR0,CS00);//clock
    342a:	83 b7       	in	r24, 0x33	; 51
    342c:	81 60       	ori	r24, 0x01	; 1
    342e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);//clock
    3430:	83 b7       	in	r24, 0x33	; 51
    3432:	84 60       	ori	r24, 0x04	; 4
    3434:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);//mode
    3436:	83 b7       	in	r24, 0x33	; 51
    3438:	88 60       	ori	r24, 0x08	; 8
    343a:	83 bf       	out	0x33, r24	; 51
	OCR0=30;
    343c:	8e e1       	ldi	r24, 0x1E	; 30
    343e:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TIMSK,OCIE0);//enable
    3440:	89 b7       	in	r24, 0x39	; 57
    3442:	82 60       	ori	r24, 0x02	; 2
    3444:	89 bf       	out	0x39, r24	; 57
    3446:	08 95       	ret

00003448 <_exit>:
    3448:	f8 94       	cli

0000344a <__stop_program>:
    344a:	ff cf       	rjmp	.-2      	; 0x344a <__stop_program>
